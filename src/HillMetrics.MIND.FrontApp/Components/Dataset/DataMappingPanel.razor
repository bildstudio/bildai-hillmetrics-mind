@using AiTraining.Data.Entities
@using AiTraining.Data.Enums

<MudText Typo="Typo.h6" Class="mb-3">
    @(IsEditMode ? "Edit Data Mappings" : "Map Financial Data")
</MudText>

@if (UploadedFile == null && !IsEditMode)
{
    <MudAlert Severity="Severity.Info">Upload a file first to map financial data.</MudAlert>
}
else
{
    @if (AvailableDataPoints.Count == 0)
    {
        <MudAlert Severity="Severity.Warning">
            No financial data points available.
            <MudLink Href="/financial-data/create">Create some first</MudLink>.
        </MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="8">
                <MudSelect T="int" Label="Select Financial Data Point"
                           @bind-Value="selectedDataPointId"
                           Class="mb-4">
                    @foreach (var dataPoint in AvailableDataPoints)
                    {
                        <MudSelectItem Value="@dataPoint.FinancialDataPointId">
                            @dataPoint.Name
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" Class="d-flex align-center">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="AddDataPoint"
                           Disabled="selectedDataPointId == 0"
                           FullWidth="true">
                    Add Data Point
                </MudButton>
            </MudItem>
        </MudGrid>

        @if (DataMappings.Count == 0)
        {
            <MudText Class="my-4">No data points mapped yet. Select data points to map from the dropdown above.</MudText>
        }
        else
        {
            <MudExpansionPanels MultiExpansion="true" Class="mb-4">
                @foreach (var mapping in DataMappings)
                {
                    <DataPointMappingItem 
                        Mapping="mapping" 
                        OnRemove="() => RemoveMapping(mapping.MappingId)" />
                }
            </MudExpansionPanels>

            <MudButton OnClick="SaveMappings"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Disabled="isSaving || DataMappings.Count == 0"
                       StartIcon="@(IsEditMode ? Icons.Material.Filled.Save : Icons.Material.Filled.Save)"
                       FullWidth="true">
                @if (isSaving)
                {
                    <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                    <span>Saving...</span>
                }
                else
                {
                    <span>@(IsEditMode ? "Update Data Mappings" : "Save Data Mappings")</span>
                }
            </MudButton>

            @if (IsEditMode)
            {
                <MudButton OnClick="Cancel"
                           Color="Color.Secondary"
                           Variant="Variant.Outlined"
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           FullWidth="true"
                           Class="mt-2">
                    Cancel
                </MudButton>
            }
        }
    }
}

@code {
    [Parameter]
    public FileUploadEntity? UploadedFile { get; set; }

    [Parameter]
    public List<FileDataMapping.DataMappingViewModel> DataMappings { get; set; } = new();

    [Parameter]
    public List<FinancialDataPointEntity> AvailableDataPoints { get; set; } = new();

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback<(int, string)> OnAddDataPoint { get; set; }

    [Parameter]
    public EventCallback<int> OnRemoveDataPoint { get; set; }

    private int selectedDataPointId;
    private bool isSaving;

    protected override void OnParametersSet()
    {
        if (AvailableDataPoints.Count > 0 && selectedDataPointId == 0)
        {
            selectedDataPointId = AvailableDataPoints[0].FinancialDataPointId;
        }
    }

    private async Task AddDataPoint()
    {
        if (selectedDataPointId == 0 || UploadedFile == null)
        {
            return;
        }

        // Générer un nom d'instance unique pour ce data point
        string instanceName = string.Empty;
        int instanceCount = DataMappings.Count(m => m.DataPointId == selectedDataPointId) + 1;
        if (instanceCount > 1)
        {
            instanceName = $"Instance {instanceCount}";
        }

        await OnAddDataPoint.InvokeAsync((selectedDataPointId, instanceName));
        
        // Reset selection
        selectedDataPointId = 0;
    }

    private async Task RemoveMapping(int mappingId)
    {
        await OnRemoveDataPoint.InvokeAsync(mappingId);
    }

    private async Task SaveMappings()
    {
        if (UploadedFile == null || DataMappings.Count == 0)
        {
            return;
        }

        try
        {
            isSaving = true;
            await OnSave.InvokeAsync();
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
} 