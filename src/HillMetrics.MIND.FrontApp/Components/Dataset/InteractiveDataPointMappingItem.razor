@using AiTraining.Data.Enums

<MudExpansionPanel>
    <TitleContent>
        <div class="d-flex align-center">
            <MudText Typo="Typo.h6">@Mapping.DataPoint.Name</MudText>
            @if (!string.IsNullOrEmpty(Mapping.InstanceName))
            {
                <MudChip Size="Size.Small" Color="Color.Secondary" Class="ml-2">@Mapping.InstanceName</MudChip>
            }
        </div>
    </TitleContent>
    <ChildContent>
        @if (!string.IsNullOrEmpty(Mapping.InstanceName))
        {
            <MudTextField @bind-Value="Mapping.InstanceName" 
                         Label="Instance Name" 
                         Class="mb-4" />
        }
        
        <MudText Typo="Typo.subtitle1" Class="mb-3">Elements</MudText>
        
        @foreach (var element in Mapping.DataPoint.Elements)
        {
            var elementId = element.FinancialDataPointElementId;
            
            <MudPaper Class="pa-3 mb-3" Elevation="0">
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudText><strong>@element.PropertyName</strong></MudText>
                        @if (!string.IsNullOrEmpty(element.Description))
                        {
                            <MudText Typo="Typo.caption">@element.Description</MudText>
                        }
                    </MudItem>
                    <MudItem xs="12" md="8">
                        <div class="d-flex">
                            <MudTextField @bind-Value="Mapping.ElementValues[elementId]"
                                         Label="Value"
                                         Variant="Variant.Outlined"
                                         Class="flex-grow-1" />
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                         Color="Color.Primary"
                                         Size="Size.Small"
                                         Class="ml-2 mt-2"
                                         OnClick="() => SelectElementField(element.PropertyName, elementId)" />
                        </div>
                        
                        <MudSelect T="PropertyDataType" 
                                  @bind-Value="Mapping.ElementDataTypes[elementId]"
                                  Label="Data Type"
                                  Class="mt-2">
                            <MudSelectItem Value="PropertyDataType.Column">Column</MudSelectItem>
                            <MudSelectItem Value="PropertyDataType.Fixed">Fixed Value</MudSelectItem>
                            <MudSelectItem Value="PropertyDataType.Row">Row</MudSelectItem>
                            <MudSelectItem Value="PropertyDataType.Deductive">Deductive</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
        
        <div class="d-flex justify-end mt-4">
            <MudButton OnClick="@(() => OnRemove.InvokeAsync())"
                       Color="Color.Error"
                       Variant="Variant.Text"
                       StartIcon="@Icons.Material.Filled.Delete">
                Remove Data Point
            </MudButton>
        </div>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public FileDataMapping.DataMappingViewModel Mapping { get; set; } = null!;
    
    [Parameter]
    public EventCallback OnRemove { get; set; }
    
    [Parameter]
    public EventCallback<(string FieldName, Action<string> Callback)> OnFieldSelect { get; set; }
    
    private void SelectElementField(string propertyName, int elementId)
    {
        OnFieldSelect.InvokeAsync((propertyName, value => {
            Mapping.ElementValues[elementId] = value;
            StateHasChanged();
        }));
    }
} 