@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Security.Claims
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject ISignalRNotificationService SignalRService
@implements IDisposable

<MudThemeProvider Theme="myCustomTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@*Refresh authentication*@
<RefreshAuthComponent />

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h6" Class="ml-3">HillMetrics MIND</MudText>
        <MudSpacer />

        @* SignalR Status Indicator *@
        <MudTooltip Text="@(isSignalRConnected ? "SignalR Connected" : "SignalR Disconnected")">
            <MudIcon Icon="@Icons.Material.Filled.Circle"
                     Color="@(isSignalRConnected ? Color.Success : Color.Error)"
                     Style="margin-right: 10px;"/>
        </MudTooltip>

        @*authentication component*@
        <AuthMudAppBarComponent />
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Always">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <AuthorizeView>
            <Authorized>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-4">
                    @Body
                </MudContainer>
            </Authorized>
            <NotAuthorized>
                <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
                    <MudPaper Elevation="3" Class="pa-6 ma-2 text-center" Width="400px">
                        <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Color="Color.Error" Class="mb-4" />
                        <MudText Typo="Typo.h5" Class="mb-4">Unauthorized Access</MudText>
                        <MudText Typo="Typo.body1" Class="mb-4">You are not logged in or do not have the necessary permissions to access this page.</MudText>
                    </MudPaper>
                </MudContainer>
            </NotAuthorized>
        </AuthorizeView>
    </MudMainContent>
</MudLayout>

@* <MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider /> *@

@code {
    private bool _drawerOpen = true;
    private bool isSignalRConnected = false;

    private MudTheme myCustomTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#1976d2",
            Secondary = "#ff9800",
            AppbarBackground = "#1976d2",
            Background = "#f5f5f5",
            DrawerBackground = "#ffffff",
            DrawerText = "rgba(0,0,0, 0.7)",
            Surface = "#ffffff",
            TextPrimary = "rgba(0,0,0, 0.87)",
            TextSecondary = "rgba(0,0,0, 0.6)",
        },
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "0.875rem",
                FontWeight = 400,
                LineHeight = 1.43,
                LetterSpacing = ".01071em"
            },
            H1 = new H1()
            {
                FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = "2rem",
                FontWeight = 400,
                LineHeight = 1.167,
                LetterSpacing = "-.01562em"
            }
        },
        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        }
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        SignalRService.ConnectionStatusChanged += HandleConnectionStatusChanged;
        isSignalRConnected = SignalRService.IsConnected;
        await SignalRService.EnsureInitializedAsync();
        await base.OnInitializedAsync();
    }

    private void HandleConnectionStatusChanged(bool connected)
    {
        isSignalRConnected = connected;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SignalRService.ConnectionStatusChanged -= HandleConnectionStatusChanged;
        GC.SuppressFinalize(this);
    }

    // private void LoginClick(MouseEventArgs args)
    // {
    //     string returnUrl = NavigationManager.Uri.ToString();
    //     string callBackUrl = NavigationManager.ToAbsoluteUri("/Auth/LoginCallback").ToString();

    //     NavigationManager.NavigateTo($"/Auth/Login?returnUrl={returnUrl}&callBackUrl={callBackUrl}", forceLoad: true);
    // }

    // private void LogoutClick(MouseEventArgs args)
    // {
    //     NavigationManager.NavigateTo("/Auth/Logout", forceLoad: true);
    // }
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
