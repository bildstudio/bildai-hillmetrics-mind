@page "/ai/chat"
@using HillMetrics.Core.AI.Contracts
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Microsoft.Extensions.Options
@using HillMetrics.MIND.FrontApp.Configs
@using ModelContextProtocol.Client
@using Microsoft.Extensions.AI
@using System.Text.RegularExpressions
@inject IChatService ChatService
@inject IMcpClient McpClient;
@inject IJSRuntime JSRuntime
@inject IOptions<FeaturesConfig> FeaturesConfig
@attribute [StreamRendering(true)]

<PageTitle>AI Chat</PageTitle>

@if (!FeaturesConfig.Value.AiChat.Enabled)
{
    <div class="alert alert-warning" role="alert">
        <h4 class="alert-heading">Fonctionnalité désactivée</h4>
        <p>Le chat AI est désactivé dans cet environnement. Cette fonctionnalité n'est disponible qu'en environnement local.</p>
    </div>
    return;
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h1>AI Chat</h1>
            <div class="alert alert-info">
                <small>
                    <strong>Modèle:</strong> Ollama Local
                </small>
            </div>
            @if (McpTools?.Count > 0)
            {
                <div class="alert alert-success">
                    <small>
                        <strong>Outils MCP disponibles:</strong>
                        @foreach (var tool in McpTools)
                        {
                            <span class="badge bg-secondary me-1">@tool.Name</span>
                        }
                    </small>
                </div>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Chats</h5>
                        <button class="btn btn-sm btn-primary" @onclick="CreateNewChat">New Chat</button>
                    </div>
                </div>
                <div class="list-group list-group-flush">
                    @if (ChatSessions?.Count > 0)
                    {
                        @foreach (var chat in ChatSessions)
                        {
                            <button class="list-group-item list-group-item-action @(SelectedChatId == chat.Key ? "active" : "")"
                                    @onclick="() => SelectChat(chat.Key)">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@chat.Value.Title</h6>
                                    <small>@chat.Value.CreatedAt.ToString("g")</small>
                                </div>
                                <small>
                                    <span class="text-muted">Ollama Local</span>
                                </small>
                            </button>
                        }
                    }
                    else
                    {
                        <div class="list-group-item">No chats yet</div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-9">
            @if (SelectedChat != null)
            {
                <div class="card h-100">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@SelectedChat.Title</h5>
                            <small class="text-muted">Ollama Local</small>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column" style="min-height: 500px;">
                        <div class="flex-grow-1 overflow-auto mb-3" id="chat-messages" style="max-height: 400px;">
                            @if (SelectedChat.Messages?.Count > 0)
                            {
                                @foreach (var message in SelectedChat.Messages.Where(m => m.Role != ChatRole.System))
                                {
                                    <div class="mb-3">
                                        @{
                                            string messageContent = message.Text ?? string.Empty;
                                            string messageThink = string.Empty;
                                            string messageTitle = GetMessageTitle(message.Role);
                                            string bubbleClass = GetBubbleClass(message.Role);

                                            // Gestion des modèles de raisonnement
                                            if (message.Role == ChatRole.Assistant)
                                            {
                                                var match = Regex.Match(messageContent, @"<think>(.*?)<\/think>(.*)", RegexOptions.Singleline);
                                                if (match.Success)
                                                {
                                                    messageThink = match.Groups[1].Value.Trim();
                                                    messageContent = match.Groups[2].Value.Trim();
                                                }
                                            }
                                        }

                                        <div class="@bubbleClass">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <strong>@messageTitle</strong>
                                                <small class="text-muted">@DateTime.Now.ToString("HH:mm")</small>
                                            </div>
                                            <div class="mt-1 p-2 rounded">
                                                @if (message.Role == ChatRole.Tool)
                                                {
                                                    <details>
                                                        <summary class="fw-bold text-info">Résultat d'outil MCP</summary>
                                                        <div class="mt-2 p-2 bg-light rounded">
                                                            <pre class="mb-0">@messageContent</pre>
                                                        </div>
                                                    </details>
                                                }
                                                else
                                                {
                                                    @messageContent
                                                    @if (!string.IsNullOrEmpty(messageThink))
                                                    {
                                                        <details class="mt-2">
                                                            <summary class="fw-bold text-secondary">Processus de réflexion</summary>
                                                            <div class="mt-2 p-2 bg-light rounded">
                                                                <small>@messageThink</small>
                                                            </div>
                                                        </details>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center text-muted">
                                    <p>No messages yet. Start a conversation!</p>
                                    @if (McpTools?.Count > 0)
                                    {
                                        <p><small>Outils MCP disponibles: @string.Join(", ", McpTools.Select(t => t.Name))</small></p>
                                    }
                                </div>
                            }
                        </div>

                        <div class="mt-auto">
                            <EditForm Model="MessageModel" OnValidSubmit="SendMessage" class="d-flex">
                                <div class="flex-grow-1 me-2">
                                    <InputTextArea @bind-Value="MessageModel.Message"
                                                   class="form-control"
                                                   placeholder="Type your message..."
                                                   rows="2"
                                                   disabled="@IsLoading" />
                                </div>
                                <div>
                                    <button type="submit" class="btn btn-primary" disabled="@(IsLoading || string.IsNullOrWhiteSpace(MessageModel.Message))">
                                        @if (IsLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        }
                                        Send
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center justify-content-center">
                        <div class="text-center text-muted">
                            <h5>Select a chat to start</h5>
                            <p>Choose an existing chat from the sidebar or create a new one.</p>
                            <p><small>Using model: <strong>Ollama Local</strong></small></p>
                            @if (McpTools?.Count > 0)
                            {
                                <div class="mt-3">
                                    <h6>Outils MCP disponibles:</h6>
                                    @foreach (var tool in McpTools)
                                    {
                                        <div class="text-start mb-2">
                                            <strong>@tool.Name:</strong> @tool.Description
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- New Chat Modal -->
@if (ShowNewChatModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">New Chat</h5>
                    <button type="button" class="btn-close" @onclick="CloseNewChatModal"></button>
                </div>
                <EditForm Model="ChatModel" OnValidSubmit="SubmitNewChat">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="chatTitle" class="form-label">Chat Title</label>
                            <InputText id="chatTitle" @bind-Value="ChatModel.Title" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Model: Ollama Local</label>
                            <small class="form-text text-muted">Utilise votre instance Ollama locale</small>
                        </div>
                        @if (McpTools?.Count > 0)
                        {
                            <div class="mb-3">
                                <label class="form-label">Outils MCP: @McpTools.Count outil(s) disponible(s)</label>
                                <small class="form-text text-muted">@string.Join(", ", McpTools.Select(t => t.Name))</small>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseNewChatModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Create</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private Dictionary<int, SimpleChatSession>? ChatSessions { get; set; }
    private IList<McpClientTool>? McpTools { get; set; }
    private SimpleChatSession? SelectedChat => ChatSessions?.GetValueOrDefault(SelectedChatId);
    private int SelectedChatId { get; set; }
    private bool IsLoading { get; set; }
    private bool ShowNewChatModal { get; set; }

    private class SimpleChatSession
    {
        public string Title { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public List<ChatMessage> Messages { get; set; } = new();
    }

    private class NewMessageModel
    {
        public string Message { get; set; } = string.Empty;
    }
    private NewMessageModel MessageModel { get; set; } = new();

    private class NewChatModel
    {
        public string Title { get; set; } = string.Empty;
    }
    private NewChatModel ChatModel { get; set; } = new();

    private static int _nextChatId = 1;

    protected override async Task OnInitializedAsync()
    {
        ChatSessions = new Dictionary<int, SimpleChatSession>();
        await LoadMcpToolsAsync();
    }

    private async Task LoadMcpToolsAsync()
    {
        try
        {
            McpTools = await McpClient.ListToolsAsync();
        }
        catch (Exception)
        {
            // Erreur silencieuse si MCP n'est pas accessible
            McpTools = new List<McpClientTool>();
        }
    }

    private void SelectChat(int chatId)
    {
        SelectedChatId = chatId;
        StateHasChanged();
        // Scroll to bottom
        JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
    }

    private void CreateNewChat()
    {
        ChatModel = new NewChatModel
            {
                Title = $"New Chat {DateTime.Now.ToString("g")}"
            };
        ShowNewChatModal = true;
    }

    private void CloseNewChatModal()
    {
        ShowNewChatModal = false;
    }

    private void SubmitNewChat()
    {
        if (string.IsNullOrWhiteSpace(ChatModel.Title))
        {
            ChatModel.Title = $"Chat {DateTime.Now.ToString("g")}";
        }

        var newChatId = _nextChatId++;
        var newChat = new SimpleChatSession
            {
                Title = ChatModel.Title,
                CreatedAt = DateTime.UtcNow,
                Messages = new List<ChatMessage>
            {
                new ChatMessage(ChatRole.System,
                    "You are a helpful assistant. You always reply using text and emojis. You never generate HTML or Markdown. You only do what the user asks you to do. If you don't have a function to answer a question, you just answer the question.")
            }
            };

        ChatSessions![newChatId] = newChat;
        SelectedChatId = newChatId;
        ShowNewChatModal = false;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageModel.Message) || SelectedChat == null)
            return;

        IsLoading = true;
        try
        {
            // Utiliser directement le ChatClient avec les outils MCP
            var chatClient = ChatService.GetChatClient("mistral");

            // Construire le client avec support des fonctions
            var clientWithTools = chatClient.AsBuilder()
                .UseFunctionInvocation()
                .Build();

            // Ajouter le nouveau message utilisateur
            SelectedChat.Messages.Add(new ChatMessage(ChatRole.User, MessageModel.Message));

            MessageModel.Message = string.Empty;
            StateHasChanged();

            // Obtenir la réponse avec les outils MCP
            var response = await clientWithTools.GetResponseAsync(SelectedChat.Messages, new() { Tools = [.. McpTools?.ToList() ?? []] });

            // Ajouter tous les messages de la réponse
            if (response != null)
            {
                SelectedChat.Messages.AddMessages(response);
            }

            StateHasChanged();
            // Scroll to bottom
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error sending message: {ex.Message}");
            // Ajouter un message d'erreur
            SelectedChat.Messages.Add(new ChatMessage(ChatRole.Assistant, $"Erreur: {ex.Message}"));
            StateHasChanged();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string GetMessageTitle(ChatRole role)
    {
        if (role == ChatRole.System)
            return "System Message";
        else if (role == ChatRole.Tool)
            return "Tool Result";
        else if (role == ChatRole.Assistant)
            return "Assistant";
        else if (role == ChatRole.User)
            return "You";

        return "Unknown";
    }

    private string GetBubbleClass(ChatRole role)
    {
        if (role == ChatRole.System)
            return "bg-secondary text-white";
        else if (role == ChatRole.Tool)
            return "bg-info text-white";
        else if (role == ChatRole.Assistant)
            return "bg-primary text-white";
        else if (role == ChatRole.User)
            return "bg-light";

        return "bg-light";
    }
}

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>