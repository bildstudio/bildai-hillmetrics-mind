@page "/mapping-details/{MappingId:int}"
@using HillMetrics.Normalized.Domain.Contracts.AI.Dataset
@using HillMetrics.MIND.API.SDK.V1
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudBreadcrumbs Items="_breadcrumbs"></MudBreadcrumbs>

<MudGrid Class="mt-4">
    <MudItem xs="12">
        <MudPaper Class="pa-4" Elevation="3">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <MudText Typo="Typo.h4">Mapping Details</MudText>
                    @if (mapping != null)
                    {
                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">ID: @mapping.Id</MudText>
                    }
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex justify-end align-center">
                    <MudButton Variant="Variant.Outlined"
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.ArrowBack"
                              OnClick="NavigateBack"
                              Class="mr-2">
                        Back
                    </MudButton>
                    @if (mapping != null)
                    {
                        <MudButton Variant="Variant.Outlined"
                                  Color="Color.Secondary"
                                  StartIcon="@Icons.Material.Filled.Edit"
                                   OnClick="() => NavigateToEdit(mapping.Id)"
                                  Class="mr-2">
                            Edit
                        </MudButton>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else if (mapping == null)
{
    <MudAlert Severity="Severity.Error" Class="mt-4">Mapping not found or has been deleted.</MudAlert>
}
else
{
    <MudGrid Class="mt-4">
        <!-- File Information Card -->
        <MudItem xs="12" md="6">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" Class="mr-2" />
                            File Information
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudList T="FileDataMapping" Dense="true">
                        <MudListItem>
                            <MudText>
                                <strong>File Name:</strong> @mapping.FileUpload.FileName
                            </MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText>
                                <strong>File Type:</strong> @mapping.FileUpload.FileType
                            </MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText>
                                <strong>File Size:</strong> @FormatFileSize(mapping.FileUpload.FileSize)
                            </MudText>
                        </MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Data Point Information Card -->
        <MudItem xs="12" md="6">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.DataObject" Class="mr-2" />
                            Data Point Information
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudList T="FileDataMapping" Dense="true">
                        <MudListItem>
                            <MudText>
                                <strong>Data Point:</strong> @mapping.FinancialDataPoint.Name
                            </MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText>
                                <strong>Instance Name:</strong>
                                @(string.IsNullOrEmpty(mapping.InstanceName) ? "Default" : mapping.InstanceName)
                            </MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText>
                                <strong>Elements Count:</strong> @mapping.ElementValues.Count
                            </MudText>
                        </MudListItem>
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Elements Card -->
        <MudItem xs="12">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.List" Class="mr-2" />
                            Mapped Elements
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@mapping.ElementValues"
                             Dense="true"
                             Hover="true"
                             Bordered="true"
                             Striped="true">
                        <HeaderContent>
                            <MudTh>Property</MudTh>
                            <MudTh>Value</MudTh>
                            <MudTh>Data Type</MudTh>
                            <MudTh>Description</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Property">@context.FinancialDataPointElement.PropertyName</MudTd>
                            <MudTd DataLabel="Value">@context.ExtractedValue</MudTd>
                            <MudTd DataLabel="Data Type">
                                <MudChip T="Color" Size="Size.Small" Color="Color.Primary">@context.PropertyDataType.Name</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Description">@context.FinancialDataPointElement.Description</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public int MappingId { get; set; }

    private FileDataMapping? mapping;
    private bool isLoading = true;
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", "/"),
            new BreadcrumbItem("Flux Mappings", "/flux-mappings/search"),
            new BreadcrumbItem("Mapping Details", null, true)
        };

        await LoadMapping();
    }

    private async Task LoadMapping()
    {
        try
        {
            isLoading = true;

            var result = await MindApi.GetFileMappingAsync(MappingId);

            // if (!result.IsSuccess)
            // {
            //     Snackbar.Add(result.Error ?? "Failed to load mapping", Severity.Error);
            //     return;
            // }

            mapping = result.Data;

            // Update breadcrumb
            _breadcrumbs[2] = new BreadcrumbItem($"Mapping {MappingId}", null, true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading mapping: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateBack()
    {
        if (mapping != null)
        {
            NavigationManager.NavigateTo($"/file-details/{mapping.FileUploadId}");
        }
        else
        {
            NavigationManager.NavigateTo("/flux-mappings/search");
        }
    }

    private void NavigateToEdit(int mappingId)
    {
        NavigationManager.NavigateTo($"/file-data-mapping/mapping/{mappingId}");
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }
}