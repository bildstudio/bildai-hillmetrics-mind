@page "/file-data-mappings"
@using AiTraining.Data.Enums
@using AiTraining.Services
@using Microsoft.EntityFrameworkCore
@inject AiTrainingDbContext DbContext
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject MappingExportService MappingExportService
@inject IJSRuntime JSRuntime
@inject FileUploadService FileUploadService

<PageTitle>AI Training - File Data Mappings</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">File Data Mappings</MudText>

<MudPaper Class="pa-4 mb-4" Elevation="3">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h6" Class="mb-3">Filter Options</MudText>
            <MudTextField @bind-Value="searchTerm" 
                         Label="Search by file name or data point" 
                         Adornment="Adornment.End" 
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         OnAdornmentClick="ApplyFilters"
                         Class="mb-3" />
            <MudSelect T="MappingStatus?" Label="Filter by Status" 
                      @bind-Value="statusFilter" 
                      Clearable="true"
                      AnchorOrigin="Origin.BottomCenter">
                @foreach (var status in Enum.GetValues(typeof(MappingStatus)))
                {
                    <MudSelectItem T="MappingStatus?" Value="@((MappingStatus?)status)">@status.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="FileDifficulty?" Label="Filter by Difficulty" 
                      @bind-Value="difficultyFilter" 
                      Clearable="true"
                      AnchorOrigin="Origin.BottomCenter">
                @foreach (var difficulty in Enum.GetValues(typeof(FileDifficulty)))
                {
                    <MudSelectItem T="FileDifficulty?" Value="@((FileDifficulty?)difficulty)">@difficulty.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h6" Class="mb-3">Actions</MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add"
                       OnClick="() => NavigationManager.NavigateTo(FileDataMappingUrl)"
                      Class="mb-3 me-3">
                Create New Mapping
            </MudButton>
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Refresh" 
                      OnClick="LoadMappings"
                      Class="mb-3">
                Refresh
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (files.Count == 0)
{
    <MudAlert Severity="Severity.Info">
        No file data mappings found. 
        <MudLink Href="/file-data-mapping">Create your first mapping</MudLink>.
    </MudAlert>
}
else
{
    <MudTable Items="@files" 
             Dense="true" 
             Hover="true" 
             Bordered="true" 
             Striped="true"
             Filter="FilterFunc"
             T="FileViewModel">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Files (@files.Count)</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Download" 
                      OnClick="ExportAllMappings"
                      Class="ml-2">
                Export All
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>File</MudTh>
            <MudTh>Data Points</MudTh>
            <MudTh>Total Elements</MudTh>
            <MudTh>Uploaded</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Difficulty</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.FileUploadId</MudTd>
            <MudTd DataLabel="File">
                <div class="d-flex align-center">
                    <MudTooltip Text="@context.FileName">
                        <MudIconButton Icon="@GetFileIcon(context.FileType)" 
                                     Color="Color.Primary"
                                     Size="Size.Small"
                                     OnClick="() => DownloadFile(context.FileUploadId, context.FileName)"
                                     Class="mr-2" />
                    </MudTooltip>
                <MudTooltip Text="@context.FileName">
                        <MudText Typo="Typo.body2" Style="max-width: 180px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        @context.FileName
                    </MudText>
                </MudTooltip>
                </div>
            </MudTd>
            <MudTd DataLabel="Data Points">
                <MudChipSet>
                    @foreach (var mapping in context.Mappings)
                    {
                        <MudChip Size="Size.Small" 
                               Color="Color.Primary" 
                               OnClick="() => ShowDetails(mapping.FileDataMappingId)"
                               Style="margin: 2px">
                            @mapping.DataPointName (@mapping.ElementCount)
                        </MudChip>
                    }
                </MudChipSet>
            </MudTd>
            <MudTd DataLabel="Total Elements">@context.TotalElements</MudTd>
            <MudTd DataLabel="Uploaded">@context.UploadedAt.ToLocalTime().ToString("g")</MudTd>
            <MudTd DataLabel="Status">
                <MudChip Color="@GetStatusColor(context.MappingStatus)" Size="Size.Small">
                    @context.MappingStatus.ToString()
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Difficulty">
                <MudChip Color="@GetDifficultyColor(context.Difficulty)" Size="Size.Small">
                    @context.Difficulty.ToString()
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                 OnClick="() => NavigateToDetails(context.FileUploadId)" 
                                 Title="View Details" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                 OnClick="() => NavigateToEditFile(context.FileUploadId)" 
                                 Title="Edit Data Points" 
                                 Color="Color.Primary" />
                    <MudIconButton Icon="@Icons.Material.Filled.Download" 
                                 OnClick="() => ExportFileAllMappings(context.FileUploadId)" 
                                 Title="Export All" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                 OnClick="() => DeleteFileMappings(context.FileUploadId)" 
                                 Title="Delete All"
                                 Color="Color.Error" />
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

<MudDialog @bind-IsVisible="isDetailsDialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Mapping Details</MudText>
    </TitleContent>
    <DialogContent>
        @if (selectedMapping != null)
        {
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudText Typo="Typo.body1"><strong>Mapping ID:</strong> @selectedMapping.FileDataMappingId</MudText>
                    <MudText Typo="Typo.body1"><strong>File:</strong> @selectedMapping.FileName</MudText>
                    <MudText Typo="Typo.body1"><strong>Data Point:</strong> @selectedMapping.DataPointName</MudText>
                    <MudText Typo="Typo.body1"><strong>Created:</strong> @selectedMapping.CreatedAt.ToLocalTime().ToString("g")</MudText>
                    
                    <MudDivider Class="my-3" />
                    
                    <MudText Typo="Typo.h6" Class="mb-2">Elements</MudText>
                    @if (selectedMapping.Elements.Count == 0)
                    {
                        <MudText>No elements found for this mapping.</MudText>
                    }
                    else
                    {
                        <MudList Dense="true">
                            @foreach (var element in selectedMapping.Elements)
                            {
                                <MudListItem>
                                    <MudText>
                                        <strong>@element.PropertyName:</strong> @element.Value 
                                        <MudChip Size="Size.Small" Color="Color.Primary">@element.DataType</MudChip>
                                    </MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudCardContent>
            </MudCard>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDetailsDialog">Close</MudButton>
        @if (selectedMapping != null)
        {
            <MudButton Color="Color.Primary" 
                     OnClick="() => ExportMapping(selectedMapping.FileDataMappingId)">
                Export
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    private List<FileViewModel> files = new();
    private List<MappingViewModel> allMappings = new(); // Pour stocker tous les mappings individuels
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private bool isDetailsDialogVisible;
    private MappingViewModel? selectedMapping;
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
    private MappingStatus? statusFilter = null;
    private FileDifficulty? difficultyFilter = null;

    public const string FileDataMappingUrl = "/file-data-mapping";

    protected override async Task OnInitializedAsync()
    {
        await LoadMappings();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.downloadFileFromBase64 = function (fileName, base64, contentType) {
                    const linkSource = `data:${contentType};base64,${base64}`;
                    const downloadLink = document.createElement('a');
                    document.body.appendChild(downloadLink);
                    
                    downloadLink.href = linkSource;
                    downloadLink.download = fileName;
                    downloadLink.click();
                    document.body.removeChild(downloadLink);
                }
            ");
        }
    }

    private async Task LoadMappings()
    {
        try
        {
            isLoading = true;
            
            var query = DbContext.FileUploads.AsQueryable();
            
            // Appliquer le filtre par statut si sélectionné
            if (statusFilter.HasValue)
            {
                query = query.Where(f => f.MappingStatus == statusFilter.Value);
            }
            
            // Appliquer le filtre par difficulté si sélectionné
            if (difficultyFilter.HasValue)
            {
                query = query.Where(f => f.Difficulty == difficultyFilter.Value);
            }
            
            var dbMappings = await query
                .Include(f => f.DataMappings)
                .ThenInclude(m => m.FinancialDataPoint)
                .Include(f => f.DataMappings)
                .ThenInclude(m => m.ElementValues)
                    .ThenInclude(e => e.FinancialDataPointElement)
                .OrderByDescending(f => f.UploadedAt)
                .ToListAsync();

            // Convert to view models
            files = dbMappings.Select(f => new FileViewModel
            {
                FileUploadId = f.FileUploadId,
                FileName = f.FileName,
                FileType = f.FileType,
                UploadedAt = f.UploadedAt,
                MappingStatus = f.MappingStatus,
                Difficulty = f.Difficulty,
                Mappings = f.DataMappings.Select(m => new MappingViewModel
            {
                FileDataMappingId = m.FileDataMappingId,
                FileUploadId = m.FileUploadId,
                    FileName = f.FileName,
                    FileType = f.FileType,
                DataPointId = m.FinancialDataPointId,
                DataPointName = m.FinancialDataPoint.Name,
                    ElementCount = m.ElementValues.Count,
                    CreatedAt = f.UploadedAt,
                    Elements = m.ElementValues.Select(e => new ElementViewModel
                    {
                        ExtractionId = e.ElementValueId,
                    PropertyName = e.FinancialDataPointElement.PropertyName,
                    Value = e.ExtractedValue ?? string.Empty,
                    DataType = e.PropertyDataType.ToString()
                    }).ToList()
                }).ToList()
            })
            .OrderByDescending(f => f.UploadedAt)
            .ToList();

            // Créer allMappings en aplatissant les mappings de tous les fichiers
            allMappings = files.SelectMany(f => f.Mappings).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading mappings: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool FilterFunc(FileViewModel file)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        var term = searchTerm.Trim().ToLower();
        
        return file.FileName.ToLower().Contains(term) ||
               file.FileUploadId.ToString().Contains(term) ||
               file.Mappings.Any(m => 
                   m.DataPointName.ToLower().Contains(term) ||
                   m.Elements.Any(e => e.PropertyName.ToLower().Contains(term) || 
                                      e.Value.ToLower().Contains(term)));
    }

    private void ApplyFilters()
    {
        StateHasChanged();
    }

    private void ShowDetails(int mappingId)
    {
        // Rediriger vers la page de détails du mapping spécifique
        NavigationManager.NavigateTo($"/mapping-details/{mappingId}");
    }

    private void NavigateToDetails(int fileUploadId)
    {
        // Rediriger vers la page de détails du fichier qui affiche tous les mappings
        NavigationManager.NavigateTo($"/file-details/{fileUploadId}");
    }

    private void NavigateToEditFile(int fileUploadId)
    {
        // Rediriger vers la page d'édition avec le fichier préchargé
        NavigationManager.NavigateTo($"/file-data-mapping/file/{fileUploadId}");
    }

    private void CloseDetailsDialog()
    {
        isDetailsDialogVisible = false;
    }

    private async Task ExportMapping(int mappingId)
    {
        try
        {
            var mapping = allMappings.FirstOrDefault(m => m.FileDataMappingId == mappingId);
            if (mapping == null)
            {
                Snackbar.Add("Mapping not found", Severity.Error);
                return;
            }

            var json = await MappingExportService.ExportMappingToJsonAsync(mappingId);
            await MappingExportService.DownloadJsonFileAsync(json, $"mapping_{mappingId}.json");
            
            Snackbar.Add("Mapping exported successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting mapping: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportAllMappings()
    {
        try
        {
            var json = await MappingExportService.ExportAllMappingsToJsonAsync();
            await MappingExportService.DownloadJsonFileAsync(json, "all_mappings.json");
            
            Snackbar.Add("All mappings exported successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting mappings: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportFileAllMappings(int fileUploadId)
    {
        try
        {
            // Get all mappings for this file
            var fileMappings = allMappings.Where(m => m.FileUploadId == fileUploadId).ToList();
            if (!fileMappings.Any())
            {
                Snackbar.Add("No mappings found for this file", Severity.Warning);
                return;
            }

            var fileName = fileMappings.First().FileName;
            var json = await MappingExportService.ExportFileMappingsToJsonAsync(fileUploadId);
            
            // Use the file name for the export, adding "_answer.json" suffix
            var exportFileName = Path.GetFileNameWithoutExtension(fileName) + "_answer";
            
            await MappingExportService.DownloadJsonFileAsync(json, exportFileName);
            
            Snackbar.Add("All mappings for this file exported successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting mappings: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteFileMappings(int fileUploadId)
    {
        var fileMappings = allMappings.Where(m => m.FileUploadId == fileUploadId).ToList();
        if (!fileMappings.Any())
        {
            Snackbar.Add("No mappings found for this file", Severity.Warning);
            return;
        }

        var fileName = fileMappings.First().FileName;
        
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Deletion",
            $"Are you sure you want to delete ALL mappings for file '{fileName}'? This action cannot be undone.",
            yesText: "Delete All",
            cancelText: "Cancel",
            options: new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall }
        );
        
        if (result == true)
        {
            try
            {
                var dbMappings = await DbContext.FileDataMappings
                    .Where(m => m.FileUploadId == fileUploadId)
                    .ToListAsync();

                if (dbMappings.Any())
                {
                    DbContext.FileDataMappings.RemoveRange(dbMappings);
                    await DbContext.SaveChangesAsync();
                    
                    Snackbar.Add("All mappings for this file deleted successfully", Severity.Success);
                    await LoadMappings();
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting mappings: {ex.Message}", Severity.Error);
            }
        }
    }

    private string GetFileIcon(string fileType)
    {
        if (string.IsNullOrEmpty(fileType))
            return Icons.Material.Filled.InsertDriveFile;

        fileType = fileType.ToLowerInvariant();
        
        return fileType switch
        {
            ".xlsx" or ".xls" => Icons.Custom.FileFormats.FileExcel,
            ".csv" => Icons.Custom.FileFormats.FileDocument,
            ".pdf" => Icons.Custom.FileFormats.FilePdf,
            ".xml" => Icons.Custom.FileFormats.FileCode,
            ".json" => Icons.Custom.FileFormats.FileCode,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private async Task DownloadFile(int fileUploadId, string fileName)
    {
        try
        {
            var fileStream = await FileUploadService.GetFileStreamAsync(fileUploadId);
            if (fileStream == null)
            {
                Snackbar.Add("File not found", Severity.Error);
                return;
            }

            using var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            var fileBytes = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(fileBytes);

            var mimeType = GetMimeType(Path.GetExtension(fileName));

            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", fileName, base64, mimeType);
            
            Snackbar.Add("File download started", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error downloading file: {ex.Message}", Severity.Error);
        }
    }

    private string GetMimeType(string extension)
    {
        if (string.IsNullOrEmpty(extension))
            return "application/octet-stream";

        extension = extension.ToLowerInvariant();
        
        return extension switch
        {
            ".xlsx" => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ".xls" => "application/vnd.ms-excel",
            ".csv" => "text/csv",
            ".pdf" => "application/pdf",
            ".xml" => "application/xml",
            ".json" => "application/json",
            ".html" or ".htm" => "text/html",
            _ => "application/octet-stream"
        };
    }

    private Color GetStatusColor(MappingStatus status)
    {
        return status switch
        {
            MappingStatus.NotMapped => Color.Default,
            MappingStatus.InProgress => Color.Info,
            MappingStatus.Completed => Color.Success,
            MappingStatus.Approved => Color.Primary,
            _ => Color.Default
        };
    }

    private Color GetDifficultyColor(FileDifficulty difficulty)
    {
        return difficulty switch
        {
            FileDifficulty.VeryEasy => Color.Success,
            FileDifficulty.Simple => Color.Info,
            FileDifficulty.Medium => Color.Primary,
            FileDifficulty.Hard => Color.Warning,
            FileDifficulty.VeryDifficult => Color.Error,
            _ => Color.Default
        };
    }

    private class FileViewModel
    {
        public int FileUploadId { get; set; }
        public string FileName { get; set; } = string.Empty;
        public string FileType { get; set; } = string.Empty;
        public DateTime UploadedAt { get; set; }
        public List<MappingViewModel> Mappings { get; set; } = new();
        public int TotalElements => Mappings.Sum(m => m.ElementCount);
        public MappingStatus MappingStatus { get; set; }
        public FileDifficulty Difficulty { get; set; }
    }

    private class MappingViewModel
    {
        public int FileDataMappingId { get; set; }
        public int FileUploadId { get; set; }
        public string FileName { get; set; } = string.Empty;
        public string FileType { get; set; } = string.Empty;
        public int DataPointId { get; set; }
        public string DataPointName { get; set; } = string.Empty;
        public int ElementCount { get; set; }
        public DateTime CreatedAt { get; set; }
        public List<ElementViewModel> Elements { get; set; } = new();
    }

    private class ElementViewModel
    {
        public int ExtractionId { get; set; }
        public string PropertyName { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public string DataType { get; set; } = string.Empty;
    }
} 