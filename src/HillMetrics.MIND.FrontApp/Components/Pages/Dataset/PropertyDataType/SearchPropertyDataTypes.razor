@page "/property-data-types/search"
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset
@using HillMetrics.Core.Search
@using HillMetrics.Core.Common
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset
@using HillMetrics.MIND.API.SDK.V1
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <Documentation
        FileName="property-data-type-info.md"
        Title="What is a Property Data Type?" />

    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h4" Class="mb-4">Property Data Types</MudText>
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled"
                      Color="Color.Primary"
                      StartIcon="@Icons.Material.Filled.Add"
                      Href="/property-data-types/create"
                      Class="align-self-start">
                Create New Property Type
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid Spacing="1">
                    <!-- Name -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchRequest.Name"
                                    Label="Property Type Name"
                                    Variant="Variant.Outlined"
                                    Placeholder="Search by name..."
                                    Immediate="true"
                                    DebounceInterval="500"
                                    OnDebounceIntervalElapsed="Search"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search"/>
                    </MudItem>

                    <!-- Content Type -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="ContentType?" @bind-Value="searchRequest.ContentType"
                                 Label="Content Type" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((ContentType?)null)">All</MudSelectItem>
                            @foreach (var type in Enum.GetValues<ContentType>())
                            {
                                <MudSelectItem T="ContentType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search" Size="Size.Small">Search</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset" Size="Size.Small">Reset</MudButton>
        </MudCardActions>
    </MudCard>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else
    {
        <MudTable ServerData="@ServerReload"
                  Hover="true" Bordered="true" Striped="true"
                  Dense="true" @bind-SelectedItem="selectedItem"
                  T="PropertyDataTypeResponse"
                  Breakpoint="Breakpoint.Sm">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="ml-2">Property Types List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            IconSize="Size.Medium"
                            Class="mt-0 mb-3" Margin="Margin.Dense" Dense="true" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Content Type</MudTh>
                <MudTh>Element Values Count</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Content Type">
                    <MudChip T="Color" Color="Color.Primary" Size="Size.Small">
                        @context.ContentType
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Element Values Count">@context.ElementValuesCount</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem OnClick="@(() => EditPropertyType(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Size="Size.Small" /> Edit
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => DeletePropertyType(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" Size="Size.Small" Color="Color.Error" /> Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <NoRecordsContent>
                <MudAlert Severity="Severity.Info" Class="my-2">No property types found matching your search criteria.</MudAlert>
            </NoRecordsContent>
        </MudTable>
    }
</MudContainer>

@code {
    private SearchPropertyDataTypeRequest searchRequest = new();
    private bool loading = false;
    private bool isValid = false;
    private MudForm form;
    private string searchString = "";
    private PropertyDataTypeResponse selectedItem = null;
    private TableState tableState;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task<TableData<PropertyDataTypeResponse>> ServerReload(TableState state, CancellationToken token)
    {
        tableState = state;
        loading = true;

        try
        {
            searchRequest.Pagination = new Pagination(state.PageSize, state.Page + 1);
            searchRequest.Sorting = new Sorting("Name", Core.Search.SortDirection.Ascending);

            var response = await MindApi.SearchPropertyDataTypesAsync(searchRequest);

            return new TableData<PropertyDataTypeResponse>
            {
                Items = response.Data,
                TotalItems = (int)response.TotalRecords
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching property types: {ex.Message}", Severity.Error);
            return new TableData<PropertyDataTypeResponse>
            {
                Items = new List<PropertyDataTypeResponse>(),
                TotalItems = 0
            };
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task Search()
    {
        await ServerReload(tableState ?? new TableState
        {
            Page = 0,
            PageSize = 10
        }, CancellationToken.None);
    }

    private async Task Reset()
    {
        searchRequest = new SearchPropertyDataTypeRequest();
        searchString = "";

        if (tableState != null)
        {
            tableState.Page = 0;
            await ServerReload(tableState, CancellationToken.None);
        }
    }

    private void EditPropertyType(int id)
    {
        NavigationManager.NavigateTo($"/property-data-types/edit/{id}");
    }

    private async Task DeletePropertyType(int id)
    {
        var dialog = await DialogService.ShowMessageBox(
            "Confirm Deletion",
            "Are you sure you want to delete this property data type? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel"
        );

        if (dialog == true)
        {
            try
            {
                var result = await MindApi.DeletePropertyDataTypeAsync(id);
                if (result.Data)
                {
                    Snackbar.Add("Property data type deleted successfully", Severity.Success);
                    await Search();
                }
                else
                {
                    Snackbar.Add("Failed to delete property type", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting property type: {ex.Message}", Severity.Error);
            }
        }
    }
}