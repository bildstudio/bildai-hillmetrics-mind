@page "/financial-data/list"
@using Microsoft.EntityFrameworkCore
@inject AiTrainingDbContext DbContext
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable

<MudText Typo="Typo.h4" Class="mb-4">Financial Data Points</MudText>

<MudButton OnClick="() => NavigationManager.NavigateTo(CreateFinancialDataUrl)"
           Color="Color.Primary"
           Variant="Variant.Filled"
           StartIcon="@Icons.Material.Filled.Add"
           Class="mb-4">
    Create New Data Point
</MudButton>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (dataPoints.Count == 0)
{
    <MudAlert Severity="Severity.Info">No financial data points found. Create your first one!</MudAlert>
}
else
{
    <MudGrid>
        @foreach (var dataPoint in dataPoints)
        {
            <MudItem xs="12" md="6" lg="4">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@dataPoint.Name</MudText>
                            <MudText Typo="Typo.caption">ID: @dataPoint.FinancialDataPointId</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight">
                                <MudMenuItem OnClick="() => EditDataPoint(dataPoint.FinancialDataPointId)">Edit</MudMenuItem>
                                <MudMenuItem OnClick="() => DeleteDataPoint(dataPoint.FinancialDataPointId)">Delete</MudMenuItem>
                            </MudMenu>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Elements (@dataPoint.Elements.Count)</MudText>
                        
                        @if (dataPoint.Elements.Count == 0)
                        {
                            <MudText Typo="Typo.body2">No elements defined.</MudText>
                        }
                        else
                        {
                            <MudExpansionPanels>
                                @foreach (var element in dataPoint.Elements)
                                {
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <MudText Typo="Typo.body1">@element.PropertyName</MudText>
                                        </TitleContent>
                                        <ChildContent>
                                            @if (!string.IsNullOrEmpty(element.Description))
                                            {
                                                <MudText Typo="Typo.body2" Class="mb-2">@element.Description</MudText>
                                            }
                                            
                                            <MudText Typo="Typo.caption" Class="mb-1">Potential Values:</MudText>
                                            @if (element.PotentialValues.Count == 0)
                                            {
                                                <MudText Typo="Typo.body2">No potential values defined.</MudText>
                                            }
                                            else
                                            {
                                                <MudChipSet ReadOnly="true">
                                                    @foreach (var value in element.PotentialValues)
                                                    {
                                                        <MudChip Text="@value" Color="Color.Primary" Variant="Variant.Outlined" />
                                                    }
                                                </MudChipSet>
                                            }
                                        </ChildContent>
                                    </MudExpansionPanel>
                                }
                            </MudExpansionPanels>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

<MudDialog @bind-IsVisible="isDeleteDialogVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Delete Confirmation</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Are you sure you want to delete this financial data point? This action cannot be undone.</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelDelete">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="ConfirmDelete">Delete</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<FinancialDataPointEntity> dataPoints = new();
    private bool isLoading = true;
    private bool isDeleteDialogVisible = false;
    private int dataPointIdToDelete;
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };
    private System.Timers.Timer? refreshTimer;

    public const string CreateFinancialDataUrl = "/financial-data/create";

    protected override async Task OnInitializedAsync()
    {
        await LoadDataPoints();
        
        // Set up a timer to refresh the data every 30 seconds
        refreshTimer = new System.Timers.Timer(30000);
        refreshTimer.Elapsed += async (sender, e) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Enabled = true;
    }

    private async Task LoadDataPoints()
    {
        isLoading = true;
        try
        {
            dataPoints = await DbContext.FinancialDataPoints
                .Include(dp => dp.Elements)
                .OrderBy(dp => dp.Name)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        await InvokeAsync(async () =>
        {
            await LoadDataPoints();
        });
    }

    private void DeleteDataPoint(int id)
    {
        dataPointIdToDelete = id;
        isDeleteDialogVisible = true;
    }

    private void CancelDelete()
    {
        isDeleteDialogVisible = false;
    }

    private async Task ConfirmDelete()
    {
        isDeleteDialogVisible = false;
        
        try
        {
            var dataPoint = await DbContext.FinancialDataPoints
                .Include(dp => dp.Elements)
                .FirstOrDefaultAsync(dp => dp.FinancialDataPointId == dataPointIdToDelete);
                
            if (dataPoint != null)
            {
                DbContext.FinancialDataPoints.Remove(dataPoint);
                await DbContext.SaveChangesAsync();
                Snackbar.Add("Financial data point deleted successfully", Severity.Success);
                await LoadDataPoints();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting data point: {ex.Message}", Severity.Error);
        }
    }

    private void EditDataPoint(int id)
    {
        NavigationManager.NavigateTo($"/financial-data/edit/{id}");
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
} 