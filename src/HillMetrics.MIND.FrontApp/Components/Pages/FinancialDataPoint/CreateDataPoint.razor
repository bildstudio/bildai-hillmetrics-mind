@page "/financial-data/create"
@page "/financial-data/edit/{Id:int?}"
@using HillMetrics.Core.Financial
@using HillMetrics.Core.Financial.DataPoint
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.Normalized.Domain.Contracts.AI.Dataset
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="mb-4">@(IsEditMode ? "Edit" : "Create") Financial Data Point</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudCard Class="mb-6">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="dataPoint.Name"
                    Label="Data Point Name"
                    Required="true"
                    RequiredError="Name is required" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="FinancialType"
                    @bind-Value="dataPoint.FinancialType"
                    Label="Financial Type"
                    Required="true"
                    RequiredError="Financial Type is required"
                    AnchorOrigin="Origin.BottomCenter">
                        @foreach (var type in Enum.GetValues<FinancialType>())
                        {
                            <MudSelectItem Value="@type">@type</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="dataPoint.Description"
                    Label="Description"
                    Lines="3"
                    Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h5">Elements</MudText>
        <MudText Typo="Typo.caption" Color="Color.Info">
            <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Size="Size.Small" Class="mr-1" />
            Drag elements to reorder them
        </MudText>
    </div>

    <MudPaper Class="pa-4 mb-4">
        <MudDropContainer T="FinancialDataPointElementRequest"
        @ref="containerRef"
        ApplyDropClassesOnDragStarted="true"
        Items="dataPoint.Elements"
        ItemsSelector="@((item, dropzone) => dropzone == @DropZoneName)"
        ItemDropped="ItemDropped"
        DragClass="drag-item"
        DropClass="drop-zone-active"
        Class="d-flex flex-column gap-4">
            <ChildContent>
                @if (dataPoint.Elements.Count == 0)
                {
                    <MudAlert Severity="Severity.Info">No elements added yet. Click "Add Element" to start.</MudAlert>
                }
                else
                {
                    <MudPaper Class="ma-4 flex-grow-1" Elevation="0">
                        <MudList T="string" Class="d-flex flex-column mud-height-full">
                            <MudDropZone T="FinancialDataPointElementRequest" Identifier="@DropZoneName" Class="flex-grow-1 drop-zone" AllowReorder="true" />
                        </MudList>
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudCard Elevation="0" Class="element-card">
                    <MudCardHeader Class="py-1 mud-drop-item-draghandle">
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Primary" Size="Size.Small">@(context.Position)</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">
                                @(string.IsNullOrEmpty(context.PropertyName) ? "New Element" : context.PropertyName)
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.DragIndicator"
                            Size="Size.Small"
                            Class="drag-indicator" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTabs Rounded="true" Border="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                            <MudTabPanel Text="Basic Info" Icon="@Icons.Material.Filled.Info">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudTextField @bind-Value="context.PropertyName"
                                                      Label="Property Name"
                                                      Required="true"
                                                      Immediate="true"
                                                      Margin="Margin.Dense" />
                                    </MudItem>
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudTextField @bind-Value="context.ExternalName"
                                                      Label="External Name"
                                                      Immediate="true"
                                                      Margin="Margin.Dense" />
                                    </MudItem>
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudSelect T="MappingTypePrimitive"
                                                  @bind-Value="context.MappingPrimitiveValue"
                                                  Label="Data Type"
                                                  Required="true"
                                                  Margin="Margin.Dense"
                                                  AnchorOrigin="Origin.BottomCenter">
                                            @foreach (var type in Enum.GetValues<MappingTypePrimitive>())
                                            {
                                                <MudSelectItem Value="@type">@type</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudSelect T="FinancialTechnicalDataPoint?"
                                                  @bind-Value="context.FinancialTechnicalDataPoint"
                                                  Label="Technical Type"
                                                  Margin="Margin.Dense"
                                                  AnchorOrigin="Origin.BottomCenter">
                                            <MudSelectItem Value="@((FinancialTechnicalDataPoint?)null)">None</MudSelectItem>
                                            @foreach (var type in Enum.GetValues<FinancialTechnicalDataPoint>())
                                            {
                                                <MudSelectItem T="FinancialTechnicalDataPoint?" Value="@type">@type</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                            <MudTabPanel Text="Description" Icon="@Icons.Material.Filled.Description">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="context.Description"
                                                      Label="Description"
                                                      Lines="3"
                                                      Variant="Variant.Outlined"
                                                      Immediate="true" />
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="context.Commentary"
                                                      Label="Commentary"
                                                      Lines="3"
                                                      Variant="Variant.Outlined"
                                                      Immediate="true"
                                                      HelperText="Additional notes" />
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                        </MudTabs>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="() => RemoveElement(context)"
                        Color="Color.Error"
                        StartIcon="@Icons.Material.Filled.Delete"
                        Size="Size.Small">
                            Remove Element
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </ItemRenderer>
        </MudDropContainer>
    </MudPaper>

    <MudButton OnClick="AddElement"
    Color="Color.Primary"
    Variant="Variant.Outlined"
    StartIcon="@Icons.Material.Filled.Add"
    Class="mb-4 mt-4">
        Add Element
    </MudButton>

    <MudDivider Class="my-6" />

    <MudButton OnClick="SaveDataPoint"
    Color="Color.Primary"
    Variant="Variant.Filled"
    Size="Size.Large"
    Disabled="@(!CanSave())">
        @(IsEditMode ? "Update" : "Save") Data Point
    </MudButton>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private MudDropContainer<FinancialDataPointElementRequest> containerRef;
    private const string DropZoneName = "DataPointZone";
    private bool IsEditMode => Id.HasValue;
    private CreateFinancialDataPointRequest dataPoint = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            await LoadDataPoint();
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task LoadDataPoint()
    {
        try
        {
            var result = await MindApi.GetFinancialDataPointAsync(Id!.Value);

            dataPoint = new CreateFinancialDataPointRequest()
                {
                    Description = result.Data.Description,
                    Elements = result.Data.Elements.Select(e => new FinancialDataPointElementRequest
                    {
                        Id = e.Id,
                        FinancialDataPointId = e.FinancialDataPointId,
                        PropertyName = e.PropertyName,
                        Description = e.Description,
                        PotentialValues = e.PotentialValues.ToList(),
                        Position = e.Position,
                        MappingPrimitiveValue = e.MappingPrimitiveValue
                    }).ToList(),
                    FinancialType = result.Data.FinancialType,
                    Id = result.Data.Id,
                    Name = result.Data.Name
                };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddElement()
    {
        int nextPosition = dataPoint.Elements.Count > 0 ? dataPoint.Elements.Max(e => e.Position ?? 0) + 1 : 1;
        dataPoint.Elements.Add(new FinancialDataPointElementRequest
            {
                Position = nextPosition,
                MappingPrimitiveValue = MappingTypePrimitive.String // Valeur par défaut
            });

        containerRef.Refresh();
        StateHasChanged();
    }

    private void RemoveElement(FinancialDataPointElementRequest element)
    {
        dataPoint.Elements.Remove(element);
        UpdateElementPositions();

        containerRef.Refresh();
        StateHasChanged();
    }

    private void ItemDropped(MudItemDropInfo<FinancialDataPointElementRequest> dropInfo)
    {
        // Get the dropped item
        var item = dropInfo.Item;

        // Remove the item from its current position
        dataPoint.Elements.Remove(item);

        // Insert the item at the new position
        dataPoint.Elements.Insert(dropInfo.IndexInZone, item);

        // Update positions after reordering
        UpdateElementPositions();

        containerRef.Refresh();
        // Refresh UI
        StateHasChanged();
    }

    private void UpdateElementPositions()
    {
        for (int i = 0; i < dataPoint.Elements.Count; i++)
        {
            dataPoint.Elements[i].Position = i + 1;
        }
    }

    private bool CanSave()
    {
        if (string.IsNullOrWhiteSpace(dataPoint.Name))
            return false;

        if (dataPoint.Elements.Count == 0)
            return false;

        return dataPoint.Elements.All(e => !string.IsNullOrWhiteSpace(e.PropertyName));
    }

    private async Task SaveDataPoint()
    {
        try
        {
            if (IsEditMode)
            {
                var result = await MindApi.UpdateFinancialDataPointAsync(dataPoint.Id, dataPoint);
                Snackbar.Add("Financial data point updated successfully", Severity.Success);
                NavigationManager.NavigateTo("/financial-data/search");
            }
            else
            {
                var result = await MindApi.CreateFinancialDataPointAsync(dataPoint);

                if (result.Data != null)
                {
                    Snackbar.Add("Financial data point created successfully", Severity.Success);
                    NavigationManager.NavigateTo("/financial-data/search");
                }
                else
                {
                    Snackbar.Add("Failed to create data point", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving data point: {ex.Message}", Severity.Error);
        }
    }
}

<style>
    .mud-drop-item-draghandle {
        cursor: move;
    }
    
    .drag-indicator {
        cursor: move;
    }
    
    .element-card {
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
        margin-bottom: 8px;
    }
    
    .element-card:hover {
        border-color: var(--mud-palette-primary);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .drag-item {
        opacity: 0.7;
        transform: scale(1.02);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2) !important;
        border: 2px dashed var(--mud-palette-primary) !important;
    }
    
    .drop-zone {
        min-height: 80px;
        border: 2px dashed transparent;
        transition: all 0.3s ease;
        padding: 4px;
    }
    
    .drop-zone-active {
        border: 2px dashed var(--mud-palette-primary);
        background-color: rgba(var(--mud-palette-primary-rgb), 0.05);
    }
</style>