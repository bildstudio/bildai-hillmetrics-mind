@page "/financial-data/create"
@page "/financial-data/edit/{Id:int?}"
@using HillMetrics.Core.Financial
@using HillMetrics.Core.Financial.DataPoint
@using HillMetrics.Core.Search
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset.DocumentTypes
@using HillMetrics.MIND.API.Contracts.Responses.Languages
@using HillMetrics.MIND.API.SDK
@using HillMetrics.MIND.FrontApp.Components.DataPointElementsMetadata
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.Normalized.Domain.Contracts.AI.Dataset
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudBreadcrumbs Items="_breadcrumbItems" Class="mb-4" />

<MudText Typo="Typo.h4" Class="mb-4">@(IsEditMode ? "Edit" : "Create") Financial Data Point</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudCard Class="mb-6">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="dataPoint.Name"
                                  Label="Data Point Name"
                                  Required="true"
                                  RequiredError="Name is required" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="FinancialType"
                               @bind-Value="dataPoint.FinancialType"
                               Label="Financial Type"
                               Required="true"
                               RequiredError="Financial Type is required"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var type in Enum.GetValues<FinancialType>())
                        {
                            <MudSelectItem Value="@type">@type</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="dataPoint.Description"
                                  Label="Description"
                                  Lines="3"
                                  Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h5">Elements</MudText>
        <MudText Typo="Typo.caption" Color="Color.Info">
            <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Size="Size.Small" Class="mr-1" />
            Drag elements to reorder them
        </MudText>
    </div>

    <MudPaper Class="pa-4 mb-4">
        <MudDropContainer T="FinancialDataPointElementRequest"
                          @ref="containerRef"
                          ApplyDropClassesOnDragStarted="true"
                          Items="dataPoint.Elements"
                          ItemsSelector="@((item, dropzone) => dropzone == @DropZoneName)"
                          ItemDropped="ItemDropped"
                          DragClass="drag-item"
                          DropClass="drop-zone-active"
                          Class="d-flex flex-column gap-4">
            <ChildContent>
                @if (dataPoint.Elements.Count == 0)
                {
                    <MudAlert Severity="Severity.Info">No elements added yet. Click "Add Element" to start.</MudAlert>
                }
                else
                {
                    <MudPaper Class="ma-4 flex-grow-1" Elevation="0">
                        <MudList T="string" Class="d-flex flex-column mud-height-full">
                            <MudDropZone T="FinancialDataPointElementRequest" Identifier="@DropZoneName" Class="flex-grow-1 drop-zone" AllowReorder="true" />
                        </MudList>
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudCard Elevation="0" Class="element-card">
                    <MudCardHeader Class="py-1 mud-drop-item-draghandle">
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Primary" Size="Size.Small">@(context.Position)</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">
                                @(string.IsNullOrEmpty(context.PropertyName) ? "New Element" : context.PropertyName)
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.DragIndicator"
                                           Size="Size.Small"
                                           Class="drag-indicator" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTabs Rounded="true" Border="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                            <MudTabPanel Text="Basic Info" Icon="@Icons.Material.Filled.Info">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudTextField @bind-Value="context.PropertyName"
                                                      Label="Property Name"
                                                      Required="true"
                                                      Immediate="true"
                                                      Margin="Margin.Dense" />
                                    </MudItem>
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudTextField @bind-Value="context.ExternalName"
                                                      Label="External Name"
                                                      Immediate="true"
                                                      Margin="Margin.Dense" />
                                    </MudItem>
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudSelect T="MappingTypePrimitive"
                                        @bind-Value="context.MappingPrimitiveValue"
                                        Label="Data Type"
                                        Required="true"
                                        Margin="Margin.Dense"
                                        AnchorOrigin="Origin.BottomCenter">
                                            @foreach (var type in Enum.GetValues<MappingTypePrimitive>())
                                            {
                                                <MudSelectItem Value="@type">@type</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="4" md="3">
                                        <MudAutocomplete T="FinancialTechnicalDataPoint?"
                                        @bind-Value="context.FinancialTechnicalDataPoint"
                                        Label="Technical Type"
                                        Margin="Margin.Dense"
                                        SearchFunc="@SearchTechnicalDataPoints"
                                        ToStringFunc="@GetTechnicalDataPointDisplayName"
                                        Clearable="true"
                                        Placeholder="Search technical type..."
                                        ShowProgressIndicator="false"
                                        Dense="true"
                                        ResetValueOnEmptyText="false"
                                        CoerceText="false"
                                        CoerceValue="false" />
                                    </MudItem>
                                    <MudItem xs="12" sm="4" md="3">
                                        @if (dataPoint.FinancialType == FinancialType.Undefined)
                                            {
                                            <MudTextField T="string" Label="Parent Element"
                                            Margin="Margin.Dense"
                                            Placeholder="Please select Financial Type first"
                                            Disabled="true"/>
                                            }
                                        else
                                        {
                                            <MudAutocomplete T="int?"
                                            @bind-Value="context.ParentElementId"
                                            Label="Parent Element"
                                            Margin="Margin.Dense"
                                            SearchFunc="@((value, token) => SearchParentElements(value, context.Id, token))"
                                            ToStringFunc="@GetElementDisplayNameById"
                                            Clearable="true"
                                            Placeholder="Search parent element..."
                                            ShowProgressIndicator="false"
                                            Dense="true"
                                            ResetValueOnEmptyText="false"
                                            CoerceText="false"
                                            CoerceValue="false" />
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                            <MudTabPanel Text="Description" Icon="@Icons.Material.Filled.Description">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="context.Description"
                                                      Label="Description"
                                                      Lines="3"
                                                      Variant="Variant.Outlined"
                                                      Immediate="true" />
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="context.Commentary"
                                                      Label="Commentary"
                                                      Lines="3"
                                                      Variant="Variant.Outlined"
                                                      Immediate="true"
                                                      HelperText="Additional notes" />
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                            <MudTabPanel Text="Metadata" Icon="@Icons.Material.Filled.Translate" Disabled="metadataEditDisabled">
                                <MudGrid Spacing="1">
                                    <MudItem xs="12">
                                        <MudTable @ref="metadataTableRef" Items="@context.Metadatas" T="FinancialDataPointElementMetadata"
                                                  Hover="true" Breakpoint="Breakpoint.Sm" Context="elementMetadata" LoadingProgressColor="Color.Info">
                                            <HeaderContent>
                                                <MudTh>Language</MudTh>
                                                <MudTh>Document Type</MudTh>
                                                <MudTh>Context</MudTh>
                                                <MudTh>Question</MudTh>
                                                <MudTh>Description</MudTh>
                                                <MudTh>Actions</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd>@GetLanguageName(@elementMetadata.LanguageId)</MudTd>
                                                <MudTd>@GetDocumentTypeName(@elementMetadata.DocumentTypeId)</MudTd>
                                                <MudTd>@elementMetadata.Values[FinancialDataPointElementMetadataKey.Context]</MudTd>
                                                <MudTd>@elementMetadata.Values[FinancialDataPointElementMetadataKey.Question]</MudTd>
                                                <MudTd>@elementMetadata.Values[FinancialDataPointElementMetadataKey.Description]</MudTd>
                                                <MudTd DataLabel="Actions">
                                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                                                        <MudMenuItem OnClick="@((e) => ShowElementMetadataDialog(elementMetadata, UserActions.View, context))">
                                                            <MudIcon Icon="@Icons.Material.Filled.Details" Class="mr-2" Size="Size.Small" /> View
                                                        </MudMenuItem>
                                                        <MudMenuItem OnClick="@((e) => ShowElementMetadataDialog(elementMetadata, UserActions.Update, context))">
                                                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Size="Size.Small" /> Edit
                                                        </MudMenuItem>
                                                        <MudMenuItem OnClick="@((e) => DeleteElementMetadataAsync(elementMetadata, context))">
                                                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" Size="Size.Small" Color="Color.Error" /> Delete
                                                        </MudMenuItem>
                                                    </MudMenu>
                                                </MudTd>
                                            </RowTemplate>
                                            <NoRecordsContent>
                                                <MudAlert Severity="Severity.Info" Class="my-2">No metadatas created yet.</MudAlert>
                                            </NoRecordsContent>
                                            <FooterContent>
                                                <MudButton OnClick="@((e) => ShowElementMetadataDialog(new FinancialDataPointElementMetadata() { ElementId = context.Id }, UserActions.Create, context))"
                                                           Color="Color.Primary"
                                                           StartIcon="@Icons.Material.Filled.Create"
                                                           Size="Size.Small"
                                                           Disabled="@metadataCreateDisabled">
                                                    Create metadata
                                                </MudButton>
                                            </FooterContent>
                                        </MudTable>
                                    </MudItem>
                                </MudGrid>
                            </MudTabPanel>
                        </MudTabs>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="() => RemoveElement(context)"
                                   Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Size="Size.Small">
                            Remove Element
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </ItemRenderer>
        </MudDropContainer>
    </MudPaper>

    <MudButton OnClick="AddElement"
               Color="Color.Primary"
               Variant="Variant.Outlined"
               StartIcon="@Icons.Material.Filled.Add"
               Class="mb-4 mt-4">
        Add Element
    </MudButton>

    <MudDivider Class="my-6" />

    <MudButton OnClick="SaveDataPoint"
               Color="Color.Primary"
               Variant="Variant.Filled"
               Size="Size.Large"
               Disabled="@(!CanSave())">
        @(IsEditMode ? "Update" : "Save") Data Point
    </MudButton>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private MudDropContainer<FinancialDataPointElementRequest> containerRef;
    private const string DropZoneName = "DataPointZone";
    private bool IsEditMode => Id.HasValue;
    private CreateFinancialDataPointRequest dataPoint = new() { FinancialType = FinancialType.Undefined };
    private bool isLoading = true;
    private readonly List<FinancialTechnicalDataPoint?> technicalDataPoints;
    private List<FinancialDataPointElement> allAvailableElements = new();
    private bool metadataEditDisabled = true;
    private bool metadataCreateDisabled = true;
    private FinancialType? targetFinancialType;
    private List<LanguageDto> languages;
    public Dictionary<int, string> languagesDictionary { get; set; } = new Dictionary<int, string>();
    public List<DocumentTypeDto> documentTypes { get; set; }
    public Dictionary<int, string> documentTypesDictionary { get; set; } = new Dictionary<int, string>();

    private List<BreadcrumbItem> _breadcrumbItems = new();

    public CreateDataPoint()
    {
        // Initialize the list with null (None) option and all enum values
        technicalDataPoints = new List<FinancialTechnicalDataPoint?> { null }
            .Concat(Enum.GetValues<FinancialTechnicalDataPoint>().Cast<FinancialTechnicalDataPoint?>())
            .ToList();

        InitializeBreadcrumbs();
    }

    private void InitializeBreadcrumbs()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Search data point", href: "/financial-data/search", icon: Icons.Material.Filled.Search),
            new BreadcrumbItem(IsEditMode ? "Edit" : "Create", href: null, disabled: true, icon: IsEditMode ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)
        };
    }

    private MudTable<FinancialDataPointElementMetadata> metadataTableRef;


    private FinancialDataPointElementMetadata elementMetadata = new FinancialDataPointElementMetadata();

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            await LoadDataPoint();
            await LoadAllAvailableElements();
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task LoadDataPoint()
    {
        try
        {
            var result = await MindApi.GetFinancialDataPointAsync(Id!.Value);

            dataPoint = new CreateFinancialDataPointRequest()
            {
                Description = result.Data.Description,
                Elements = result.Data.Elements.Select(e => new FinancialDataPointElementRequest
                {
                    Id = e.Id,
                    FinancialDataPointId = e.FinancialDataPointId,
                    PropertyName = e.PropertyName,
                        ExternalName = e.ExternalName,
                    Description = e.Description,
                        Commentary = e.Commentary,
                    PotentialValues = e.PotentialValues.ToList(),
                    Position = e.Position,
                        MappingPrimitiveValue = e.MappingPrimitiveValue,
                        FinancialTechnicalDataPoint = e.FinancialTechnicalDataPoint,
                        ParentElementId = e.ParentElementId,
						Metadatas = e.Metadatas
                }).ToList(),
                FinancialType = result.Data.FinancialType,
                Id = result.Data.Id,
                Name = result.Data.Name
            };


            targetFinancialType = result.Data.FinancialType;
            _ = LoadDataAsync();
            
            // Update breadcrumbs now that we know we're in edit mode
            InitializeBreadcrumbs();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    // private async Task OnFinancialTypeChanged(FinancialType newFinancialType)
    // {
    //     dataPoint.FinancialType = newFinancialType;

    //     // Reload available elements when financial type changes
    //     try
    //     {
    //         await LoadAllAvailableElements();
    //     }
    //     catch (Exception ex)
    //     {
    //         Snackbar.Add($"Error loading available elements: {ex.Message}", Severity.Warning);
    //     }

    //     StateHasChanged();
    // }

    private async Task LoadAllAvailableElements()
    {
        // Check if FinancialType is set, if not, don't load elements yet
        if (dataPoint.FinancialType == FinancialType.Undefined)
        {
            allAvailableElements.Clear();
            return;
        }

        // Create a search request to get financial data points for the specific type
        var searchRequest = new SearchFinancialDataPointRequest
        {
            Pagination = new Pagination(1000, 1), // Get a large number to ensure we get all
            Sorting = new Sorting("Name", Core.Search.SortDirection.Asc),
            FinancialType = dataPoint.FinancialType
        };

        // Get data points for the specific financial type
        var response = await MindApi.SearchFinancialDataPointsAsync(searchRequest);
        var allDataPoints = response.Data ?? new List<FinancialDataPointSearchResponse>();

        // Extract all elements from all data points using SelectMany
        allAvailableElements = allDataPoints
            .Where(dp => dp.Elements != null)
            .SelectMany(dp => dp.Elements)
            .ToList();
    }

    private string GetLanguageName(int id)
    {
        languagesDictionary.TryGetValue(id, out string value);
        return value;
    }

    private string GetDocumentTypeName(int id)
    {
        documentTypesDictionary.TryGetValue(id, out string value);
        return value;
    }

    private async Task LoadDataAsync()
    {
        try
        {
            var languagesResponse = await MindApi.ListLanguagesAsync();

            languages = languagesResponse.Data.ToList();

            foreach (var language in languages.Where(s => s.IsActive))
            {
                languagesDictionary.TryAdd(language.Id, language.Name);
            }

            var documentTypesResponse = await MindApi.SearchDocumentTypesAsync(new API.Contracts.Requests.AiDataset.DocumentTypes.SearchDocumentTypeRequest
            {
                FinancialType = targetFinancialType,
                Pagination = Pagination.New(1, 50)
            });

            documentTypes = documentTypesResponse.Data.ToList();
            foreach (var documentType in documentTypes)
            {
                documentTypesDictionary.TryAdd(documentType.Id, documentType.Name);
            }

            if (documentTypes != null && documentTypes.Count > 0)
                metadataCreateDisabled = false;

            metadataEditDisabled = false;
        }
        catch (Refit.ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Error saving Language: {hillEx.Errors[0].Message}", Severity.Error);
        }
        catch (Exception ex)
        {

            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private void AddElement()
    {
        int nextPosition = dataPoint.Elements.Count > 0 ? dataPoint.Elements.Max(e => e.Position ?? 0) + 1 : 1;
        dataPoint.Elements.Add(new FinancialDataPointElementRequest
        {
            Position = nextPosition,
            MappingPrimitiveValue = MappingTypePrimitive.String // Valeur par défaut
        });

        containerRef.Refresh();
        StateHasChanged();
    }

    private void RemoveElement(FinancialDataPointElementRequest element)
    {
        dataPoint.Elements.Remove(element);
        UpdateElementPositions();

        containerRef.Refresh();
        StateHasChanged();
    }

    private void ItemDropped(MudItemDropInfo<FinancialDataPointElementRequest> dropInfo)
    {
        // Get the dropped item
        var item = dropInfo.Item;

        // Remove the item from its current position
        dataPoint.Elements.Remove(item);

        // Insert the item at the new position
        dataPoint.Elements.Insert(dropInfo.IndexInZone, item);

        // Update positions after reordering
        UpdateElementPositions();

        containerRef.Refresh();
        // Refresh UI
        StateHasChanged();
    }

    private void UpdateElementPositions()
    {
        for (int i = 0; i < dataPoint.Elements.Count; i++)
        {
            dataPoint.Elements[i].Position = i + 1;
        }
    }

    private bool CanSave()
    {
        if (string.IsNullOrWhiteSpace(dataPoint.Name))
            return false;

        if (dataPoint.Elements.Count == 0)
            return false;

        return dataPoint.Elements.All(e => !string.IsNullOrWhiteSpace(e.PropertyName));
    }

    private async Task<IEnumerable<FinancialTechnicalDataPoint?>> SearchTechnicalDataPoints(string value, CancellationToken token)
    {
        // Always return all items if search is empty or null
        if (string.IsNullOrWhiteSpace(value))
            return technicalDataPoints;

        // Filter based on the display name
        return technicalDataPoints.Where(x =>
        {
            var displayName = GetTechnicalDataPointDisplayName(x);
            return displayName.Contains(value, StringComparison.InvariantCultureIgnoreCase);
        });
    }

    private string GetTechnicalDataPointDisplayName(FinancialTechnicalDataPoint? technicalDataPoint)
    {
        return technicalDataPoint?.ToString() ?? "None";
    }

    private async Task<IEnumerable<int?>> SearchParentElements(string value, int currentElementId, CancellationToken token)
    {
        // Get all available elements from the database, excluding the current one to avoid self-reference
        var availableElements = allAvailableElements
            .Where(e => e.Id != currentElementId)
            .ToList();

        // Add null option for "No Parent" and element IDs
        var elementIds = new List<int?> { null };
        elementIds.AddRange(availableElements.Select(e => (int?)e.Id));

        // Filter based on search value
        if (string.IsNullOrWhiteSpace(value))
            return elementIds;

        return elementIds.Where(id =>
        {
            if (id == null) return "None".Contains(value, StringComparison.InvariantCultureIgnoreCase);
            var element = allAvailableElements.FirstOrDefault(e => e.Id == id);
            return element?.PropertyName?.Contains(value, StringComparison.InvariantCultureIgnoreCase) ?? false;
        });
    }

    private string GetElementDisplayNameById(int? elementId)
    {
        if (elementId == null) return "None";
        var element = allAvailableElements.FirstOrDefault(e => e.Id == elementId);

        if(element is null) return "Unknown";

        return $"[{element.FinancialDataPoint!.FinancialType} - {element.FinancialDataPoint!.Name}] {element.PropertyName}";
    }

    private async Task SaveDataPoint()
    {
        try
        {
            if (IsEditMode)
            {
                var result = await MindApi.UpdateFinancialDataPointAsync(dataPoint.Id, dataPoint);
                Snackbar.Add("Financial data point updated successfully", Severity.Success);
                NavigationManager.NavigateTo("/financial-data/search");
            }
            else
            {
                var result = await MindApi.CreateFinancialDataPointAsync(dataPoint);

                if (result.Data != null)
                {
                    Snackbar.Add("Financial data point created successfully", Severity.Success);
                    NavigationManager.NavigateTo("/financial-data/search");
                }
                else
                {
                    Snackbar.Add("Failed to create data point", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving data point: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowElementMetadataDialog(FinancialDataPointElementMetadata elementMetadata, UserActions action, FinancialDataPointElementRequest context)
    {
        try
        {
            var dialogParams = new DialogParameters<ElementMetadataDialogEdit>();
            dialogParams.Add(s => s.Context, new ElementMetadataDialogEdit.ElementMetadataDialogEditContext
            {
                Metadata = elementMetadata,
                LanguagesDictionary = languagesDictionary,
                DocumentTypesDictionary = documentTypesDictionary
            });

            dialogParams.Add(s => s.Action, action);

            var dialogOptions = new DialogOptions
            {
                BackdropClick = false,
                MaxWidth = MaxWidth.ExtraLarge,
                Position = DialogPosition.Center
            };


            IDialogReference dialog = await DialogService.ShowAsync<ElementMetadataDialogEdit>($"{action} metadata", dialogParams, dialogOptions);
            DialogResult? result = await dialog.Result;

            if (result != null && !result.Canceled)
            {
                var metadata = result.Data as FinancialDataPointElementMetadata;
                if(metadata != null && action == UserActions.Create)
                {
                    //append new item
                    context.Metadatas.Add(metadata);
                }

            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error while processing: {action}: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteElementMetadataAsync(FinancialDataPointElementMetadata elementMetadata, FinancialDataPointElementRequest context)
    {
        try
        {
            bool? dialog = await DialogService.ShowMessageBox(
            "Confirm Deletion",
                    "Are you sure you want to delete this metadata? This action cannot be undone.",
                    yesText: "Delete",
                    cancelText: "Cancel"
                );

            if (dialog != true)
                return;


            await MindApi.DeleteElementMetadataAsync(new API.Contracts.Requests.AiDataset.Metadatas.DeleteMetadataRequest()
            {
                DocumentTypeId = elementMetadata.DocumentTypeId,
                FinancialDataPointElementId = elementMetadata.ElementId,
                KeysToDelete = [FinancialDataPointElementMetadataKey.Question, FinancialDataPointElementMetadataKey.Context, FinancialDataPointElementMetadataKey.Description],
                LanguageId = elementMetadata.LanguageId
            });

            context.Metadatas.Remove(elementMetadata);

            if(metadataTableRef != null)
                await metadataTableRef.ReloadServerData();

            Snackbar.Add("Metadata removed.", Severity.Info);

            containerRef.Refresh();
            StateHasChanged();
        }
        catch (Refit.ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Error deleting metadata: {hillEx.Errors[0].Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting metadata: {ex.Message}", Severity.Error);
        }
    }
}

<style>
    .mud-drop-item-draghandle {
        cursor: move;
    }

    .drag-indicator {
        cursor: move;
    }

    .element-card {
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
        margin-bottom: 8px;
    }

        .element-card:hover {
            border-color: var(--mud-palette-primary);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

    .drag-item {
        opacity: 0.7;
        transform: scale(1.02);
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2) !important;
        border: 2px dashed var(--mud-palette-primary) !important;
    }

    .drop-zone {
        min-height: 80px;
        border: 2px dashed transparent;
        transition: all 0.3s ease;
        padding: 4px;
    }

    .drop-zone-active {
        border: 2px dashed var(--mud-palette-primary);
        background-color: rgba(var(--mud-palette-primary-rgb), 0.05);
    }
</style>