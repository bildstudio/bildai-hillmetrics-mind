@page "/financial-data/search"
@using HillMetrics.Core.Financial
@using HillMetrics.Core.Financial.DataPoint
@using HillMetrics.Core.Search
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.Normalized.Domain.Contracts.AI.Dataset
@using HillMetrics.Normalized.Domain.Contracts.Market.Cqrs.Rule
@using HillMetrics.Core.Rules
@using HillMetrics.MIND.FrontApp.Services
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject MappingExportService MappingExportService;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h4" Class="mb-4">Financial Data Points</MudText>
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       Href="/financial-data/create"
                       Class="align-self-start">
                Create New Data Point
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid Spacing="1">
                    <!-- Name -->
                    <MudItem xs="12" md="4">
                        <MudTextField @bind-Value="searchRequest.Name"
                                      Label="Data Point Name"
                                      Variant="Variant.Outlined"
                                      Placeholder="Search by name..."
                                      Immediate="true"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="Search"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" />
                    </MudItem>

                    <!-- Financial Type -->
                    <MudItem xs="12" md="4">
                        <MudSelect T="FinancialType?" @bind-Value="searchRequest.FinancialType"
                                   Label="Financial Type" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((FinancialType?)null)">All</MudSelectItem>
                            @foreach (var type in Enum.GetValues<FinancialType>())
                            {
                                <MudSelectItem T="FinancialType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search" Size="Size.Small">Search</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset" Size="Size.Small">Reset</MudButton>
        </MudCardActions>
    </MudCard>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else
    {
        <MudTable ServerData="@ServerReload"
                  Hover="true" Bordered="true" Striped="true"
                  Dense="true" @bind-SelectedItem="selectedItem"
                  T="FinancialDataPointSearchResponse"
                  RowStyleFunc="@RowStyleFunc"
                  Breakpoint="Breakpoint.Sm">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="ml-2">Data Points List</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Download"
                           OnClick="ShowExportDialog"
                           Class="mr-2"
                           Size="Size.Small">
                    Export by Type
                </MudButton>
                <MudTextField @bind-Value="searchString" Placeholder="Search"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0 mb-3" Margin="Margin.Dense" Dense="true" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="Id" T="FinancialDataPointSearchResponse">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Name" T="FinancialDataPointSearchResponse">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Description" T="FinancialDataPointSearchResponse">Description</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="FinancialType" T="FinancialDataPointSearchResponse">Financial Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="ElementsCount" T="FinancialDataPointSearchResponse">Elements Count</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Financial Type">
                    <MudChip T="FinancialType" Color="Color.Primary" Size="Size.Small">
                        @context.FinancialType
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Elements Count">
                    @if (context.Elements?.Any() == true)
                    {
                        <MudButton Size="Size.Small"
                                   OnClick="@(() => ToggleElementsExpanded(context))"
                                   StartIcon="@(IsExpanded(context) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)">
                            @context.ElementsCount
                        </MudButton>
                    }
                    else
                    {
                        <MudText>@context.ElementsCount</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem OnClick="@(() => EditDataPoint(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Size="Size.Small" /> Edit
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => DeleteDataPoint(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" Size="Size.Small" Color="Color.Error" /> Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (IsExpanded(context) && context.Elements?.Any() == true)
                {
                    <MudTr>
                        <MudTd colspan="6">
                            <MudTable Items="@GetSortedElements(context.Elements)"
                                      Hover="true" Dense="true" Class="ml-6"
                                      T="FinancialDataPointElement"
                                      Context="elementContext">
                                <HeaderContent>
                                    <MudTh>Position</MudTh>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Technical name</MudTh>
                                    <MudTh>External name</MudTh>
                                    <MudTh>Type</MudTh>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Commentary</MudTh>
                                    <MudTh>Rules</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Position">@(elementContext.Position?.ToString() ?? "N/A")</MudTd>
                                    <MudTd DataLabel="Name">@elementContext.PropertyName</MudTd>
                                    <MudTd DataLabel="Name">@elementContext.FinancialTechnicalDataPoint</MudTd>
                                    <MudTd DataLabel="Name">@elementContext.ExternalName</MudTd>
                                    <MudTd DataLabel="Type">@elementContext.MappingPrimitiveValue</MudTd>
                                    <MudTd DataLabel="Description">@elementContext.Description</MudTd>
                                    <MudTd DataLabel="Description">@elementContext.Commentary</MudTd>
                                    <MudTd DataLabel="Rules">
                                        @if (elementContext.FinancialTechnicalDataPoint != null)
                                        {
                                            var technicalDataPoint = elementContext.FinancialTechnicalDataPoint;
                                            var rulesCount = GetRulesCountForDataPoint(technicalDataPoint);
                                            string typo = rulesCount == 1 ? "rule" : "rules";

                                            @if (rulesCount > 0)
                                            {
                                                <MudButton Variant="Variant.Text"
                                                           Color="Color.Primary"
                                                           Size="Size.Small"
                                                           OnClick="@(() => ShowRulesDetails(technicalDataPoint))">
                                                    @rulesCount @typo
                                                </MudButton>
                                            }
                                            else
                                            {
                                                <MudText>No rules</MudText>
                                            }
                                        }
                                        else
                                        {
                                            <MudText>N/A</MudText>
                                        }
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudTd>
                    </MudTr>
                }
            </ChildRowContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <NoRecordsContent>
                <MudAlert Severity="Severity.Info" Class="my-2">No data points found matching your search criteria.</MudAlert>
            </NoRecordsContent>
        </MudTable>
    }
</MudContainer>

<MudDialog @bind-IsVisible="isExportDialogVisible" Options="exportDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Export Data Points by Financial Type</MudText>
    </TitleContent>
    <DialogContent>
        <MudCard Elevation="0">
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="mb-4">
                    Select a financial type to export all related data points and their elements:
                </MudText>

                <MudSelect T="FinancialType?" @bind-Value="selectedFinancialTypeForExport"
                           Label="Financial Type"
                           Variant="Variant.Outlined"
                           Dense="true"
                           Margin="Margin.Dense"
                           Class="mb-4">
                    @foreach (var type in Enum.GetValues<FinancialType>())
                    {
                        <MudSelectItem T="FinancialType?" Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>

                @if (selectedFinancialTypeForExport.HasValue)
                {
                    <MudAlert Severity="Severity.Info" Class="mt-2">
                        This will export all data points of type <strong>@selectedFinancialTypeForExport</strong>
                        including their elements, relationships, and metadata.
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseExportDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="ExportDataPointsByType"
                   Disabled="@(!selectedFinancialTypeForExport.HasValue || isExporting)"
                   StartIcon="@Icons.Material.Filled.Download">
            @if (isExporting)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-1" />
                @("Exporting...")
            }
            else
            {
                @("Export")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private SearchFinancialDataPointRequest searchRequest = new();
    private bool loading = false;
    private bool isValid = false;
    private MudForm form;
    private string searchString = "";
    private FinancialDataPointSearchResponse selectedItem = null;
    private TableState tableState;
    private HashSet<FinancialDataPointSearchResponse> _expandedItems = new();

    // Dictionary to cache rules for each data point
    private Dictionary<FinancialTechnicalDataPoint, List<RuleInfo>> _rulesCache = new();

    // Export dialog state
    private bool isExportDialogVisible = false;
    private bool isExporting = false;
    private FinancialType? selectedFinancialTypeForExport = null;
    private DialogOptions exportDialogOptions = new() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };

    [Parameter]
    [SupplyParameterFromQuery(Name = "dataPointId")]
    public int? DataPointIdParameter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    private IEnumerable<FinancialDataPointElement> GetSortedElements(IEnumerable<FinancialDataPointElement> elements)
    {
        return elements
            .OrderBy(e => e.Position ?? int.MaxValue) // Sort by Position, placing nulls at the end
            .ToList();
    }

    private string RowStyleFunc(FinancialDataPointSearchResponse item, int index)
    {
        return IsExpanded(item) ? "background-color: rgba(0,0,0,0.04)" : "";
    }

    private async Task<TableData<FinancialDataPointSearchResponse>> ServerReload(TableState state, CancellationToken token)
    {
        tableState = state;
        loading = true;

        try
        {
            ApplySearchCriteria();
            searchRequest.Pagination = new Pagination(state.PageSize, state.Page + 1);

            // Gestion du tri
            if (!string.IsNullOrEmpty(state.SortLabel))
            {
                var sortDirection = state.SortDirection == MudBlazor.SortDirection.Ascending
                    ? Core.Search.SortDirection.Asc
                    : Core.Search.SortDirection.Desc;

                searchRequest.Sorting = new Sorting(state.SortLabel, sortDirection);
            }
            else
            {
                // Tri par défaut
                searchRequest.Sorting = new Sorting("Name", Core.Search.SortDirection.Desc);
            }

            var response = await MindApi.SearchFinancialDataPointsAsync(searchRequest);

            return new TableData<FinancialDataPointSearchResponse>
                {
                    Items = response.Data,
                    TotalItems = (int)response.TotalRecords
                };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching data points: {ex.Message}", Severity.Error);
            return new TableData<FinancialDataPointSearchResponse>
                {
                    Items = new List<FinancialDataPointSearchResponse>(),
                    TotalItems = 0
                };
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void ApplySearchCriteria()
    {
        // No need to apply search criteria as we're using searchRequest.Name directly
    }

    private async Task Search()
    {
        await ServerReload(tableState ?? new TableState
            {
                Page = 0,
                PageSize = 10
            }, CancellationToken.None);
    }

    private async Task Reset()
    {
        searchRequest = new SearchFinancialDataPointRequest();
        searchString = "";

        if (tableState != null)
        {
            tableState.Page = 0;
            await ServerReload(tableState, CancellationToken.None);
        }
    }

    private void EditDataPoint(int id)
    {
        NavigationManager.NavigateTo($"/financial-data/edit/{id}");
    }

    private async Task DeleteDataPoint(int id)
    {
        var dialog = await DialogService.ShowMessageBox(
            "Confirm Deletion",
            "Are you sure you want to delete this financial data point? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel"
        );

        if (dialog == true)
        {
            try
            {
                var result = await MindApi.DeleteFinancialDataPointAsync(id);
                if (result.Data)
                {
                    Snackbar.Add("Financial data point deleted successfully", Severity.Success);
                    await Search();
                }
                else
                {
                    Snackbar.Add("Failed to delete data point", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting data point: {ex.Message}", Severity.Error);
            }
        }
    }

    private bool IsExpanded(FinancialDataPointSearchResponse item)
    {
        return _expandedItems.Contains(item);
    }

    private void ToggleElementsExpanded(FinancialDataPointSearchResponse item)
    {
        if (_expandedItems.Contains(item))
            _expandedItems.Remove(item);
        else
            _expandedItems.Add(item);
    }

    private int GetRulesCountForDataPoint(FinancialTechnicalDataPoint? dataPoint)
    {
        if (dataPoint == null)
            return 0;

        if (_rulesCache.TryGetValue(dataPoint.Value, out var rules))
            return rules.Count;

        // If not in cache, we'll load it asynchronously
        _ = LoadRulesForDataPoint(dataPoint.Value);
        return 0;
    }

    private async Task LoadRulesForDataPoint(FinancialTechnicalDataPoint dataPoint)
    {
        try
        {
            var result = await MindApi.SearchFinancialRulesAsync(dataPoint);

            if (result.Data != null && result.Data.RulesByDataPoint.TryGetValue(dataPoint, out var rules))
            {
                _rulesCache[dataPoint] = rules;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading rules: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowRulesDetails(FinancialTechnicalDataPoint? dataPoint)
    {
        if (dataPoint.HasValue)
        {
            var parameters = new DialogParameters
                {
                    ["DataPoint"] = dataPoint.Value
                };

            var options = new DialogOptions
                {
                    CloseButton = true,
                    MaxWidth = MaxWidth.Large,
                    FullWidth = true,
                    Position = DialogPosition.Center
                };

            var dialog = await DialogService.ShowAsync<DataPointRules>("Financial Rules", parameters, options);
            await dialog.Result;
        }
    }

    private void ShowExportDialog()
    {
        selectedFinancialTypeForExport = null;
        isExportDialogVisible = true;
    }

    private void CloseExportDialog()
    {
        isExportDialogVisible = false;
        selectedFinancialTypeForExport = null;
    }

    private async Task ExportDataPointsByType()
    {
        if (!selectedFinancialTypeForExport.HasValue)
        {
            Snackbar.Add("Please select a financial type", Severity.Warning);
            return;
        }

        isExporting = true;
        StateHasChanged();

        try
        {
            await MappingExportService.ExportAndDownloadDataPointsByFinancialTypeAsync(selectedFinancialTypeForExport.Value);
            Snackbar.Add($"Export for {selectedFinancialTypeForExport} started successfully. Check your downloads.", Severity.Success);
            CloseExportDialog();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error exporting data points: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }
}