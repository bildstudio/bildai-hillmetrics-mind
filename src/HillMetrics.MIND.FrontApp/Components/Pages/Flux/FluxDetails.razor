@page "/flux/details/{FluxId:int}"
@using HillMetrics.Core.Time.Trigger
@using HillMetrics.MIND.API.Contracts.Responses
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.Core.Financial
@using HillMetrics.Core
@using HillMetrics.MIND.FrontApp.Components.Flux
@using HillMetrics.MIND.FrontApp.Services
@using HillMetrics.Normalized.Domain.Contracts.Providing.Flux
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.MIND.API.Contracts.Requests
@using HillMetrics.MIND.API.Contracts.Requests.Flux
@using HillMetrics.Core.Common
@using System.Text.Json
@using HillMetrics.MIND.FrontApp.Components.Flux.Metadata
@using HillMetrics.Core.Workflow
@using HillMetrics.Core.Workflow.Models
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
        <MudText Typo="Typo.h5" Class="ml-2 mb-4 d-flex justify-center">Loading flux details...</MudText>
    }
    else if (flux == null)
    {
        <MudAlert Severity="Severity.Error" Class="my-4">Flux not found or error loading data.</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/flux/search"))">
            Back to Search
        </MudButton>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <div>
                    <MudText Typo="Typo.h4">Flux Details: @flux.FluxName</MudText>
                    <MudText Typo="Typo.subtitle1" Class="mt-1">ID: @flux.Id</MudText>
                </div>
                <div>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/flux/edit/{FluxId}"))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" /> Edit
                        </MudButton>
                        <MudButton OnClick="@ForceFetch" Disabled="@(loading || flux.FluxState != FluxState.Active)">
                            <MudIcon Icon="@Icons.Material.Filled.Download" Class="mr-2" /> Force Fetch
                        </MudButton>
                        <MudButton OnClick="@ForceProcess" Disabled="@(loading || flux.FluxState != FluxState.Active)">
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="mr-2" /> Force Process all fetching
                        </MudButton>
                        <MudButton OnClick="@ShowMetadataDialog">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" /> Metadata
                        </MudButton>
                        <MudButton
                            OnClick="@(async () => await ShowDeleteConfirmDialog())"
                            Color="Color.Error">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" /> Delete
                        </MudButton>
                    </MudButtonGroup>
                </div>
            </MudItem>

            <!-- General Information -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">General Information</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField Label="Name" Value="@flux.FluxName" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField Label="Description" Value="@(flux.Description ?? "-")" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" Lines="3" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Comment" Value="@(flux.Comment ?? "-")" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Source ID" Value="@(flux.Source.Id.ToString() ?? "-")" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                <!-- Status Information -->
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Status Information</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Primary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="6" md="4">
                                <MudField Label="Financial Type" Variant="Variant.Outlined">
                                    @if (flux.FinancialType.HasValue)
                                    {
                                        <MudChip T="FinancialType" Color="@Color.Primary" Size="Size.Small">
                                            @flux.FinancialType.Value
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" md="4">
                                <MudField Label="Flux Type" Variant="Variant.Outlined">
                                    <MudChip T="FluxType" Color="@Color.Primary" Size="Size.Small">
                                        @flux.FluxType
                                    </MudChip>
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" md="4">
                                <MudField Label="Flux State" Variant="Variant.Outlined">
                                    <MudChip T="FluxState" Color="@GetFluxStateColor(flux.FluxState)" Size="Size.Small">
                                        @flux.FluxState
                                    </MudChip>
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" md="4">
                                <MudField Label="Fetching Status" Variant="Variant.Outlined">
                                    @if (flux.FluxIdentificationHistory.Count > 0)
                                    {
                                        <MudTooltip Text="@flux.FluxIdentificationHistory[^1].IdentificationContentHistories[^1].IdentifiedAt.ToString()">
                                            <MudIcon Icon="@GetStatusIcon(flux.FluxIdentificationHistory[^1].IdentificationContentHistories[^1].ContentStatus)"
                                                     Color="@GetStatusColor(flux.FluxIdentificationHistory[^1].IdentificationContentHistories[^1].ContentStatus)" />
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" md="4">
                                <MudField Label="Processing Status" Variant="Variant.Outlined">
                                    @if (flux.FluxProcessingHistory.Count > 0 && flux.FluxProcessingHistory[^1].FluxProcessingContentHistory.Count > 0)
                                    {
                                        <MudTooltip Text="@flux.FluxProcessingHistory[^1].FluxProcessingContentHistory[^1].EndedAt.ToString()">
                                            <MudIcon Icon="@GetStatusIcon(@flux.FluxProcessingHistory[^1].FluxProcessingContentHistory[^1].Status)"
                                                    Color="@GetStatusColor(@flux.FluxProcessingHistory[^1].FluxProcessingContentHistory[^1].Status)" />
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" md="4">
                                <MudField Label="Custom Fetching" Variant="Variant.Outlined">
                                    <MudChip T="Color" Color="@(flux.HasCustomFetching ? Color.Success : Color.Error)" Size="Size.Small">
                                        @(flux.HasCustomFetching ? "Yes" : "No")
                                    </MudChip>
                                </MudField>
                            </MudItem>
                            <MudItem xs="6" md="4">
                                <MudField Label="Custom Processing" Variant="Variant.Outlined">
                                    <MudChip T="Color" Color="@(flux.HasCustomProcessing ? Color.Success : Color.Error)" Size="Size.Small">
                                        @(flux.HasCustomProcessing ? "Yes" : "No")
                                    </MudChip>
                                </MudField>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Scheduling and Configuration -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Scheduling</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Color="Color.Primary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (flux.FetchTriggerPeriod != null)
                        {
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Fetch Schedule</MudText>
                            <TriggerPeriodEditor TriggerPeriod="@fetchTriggerPeriod" ReadOnly="true" />
                        }

                        @if (flux.ProcessTriggerPeriod != null)
                        {
                            <MudText Typo="Typo.subtitle1" Class="mb-2 mt-4">Process Schedule</MudText>
                            <TriggerPeriodEditor TriggerPeriod="@processTriggerPeriod" ReadOnly="true" />
                        }
                    </MudCardContent>
                </MudCard>

                <!-- Flux-specific Metadata -->
                @if (flux.EmailMetadata != null && flux.FluxType == FluxType.Email)
                {
                    <MudCard Elevation="3" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Email Configuration</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Primary" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudField Label="Content Location" Variant="Variant.Outlined">
                                        @flux.EmailMetadata.ContentLocation
                                    </MudField>
                                </MudItem>

                                @if (flux.EmailMetadata.Metadata != null && flux.EmailMetadata.Metadata.Count > 0)
                                {
                                    <MudItem xs="12">
                                        <FluxMetadataDictionaryComponent MetadataDictionary="@flux.EmailMetadata.Metadata" ReadOnly="true" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
                @if (flux.FileLocationMetadata != null && flux.FluxType == FluxType.Sftp)
                {
                    <MudCard Elevation="3" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">SFTP Configuration</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIcon Icon="@Icons.Material.Filled.Folder" Color="Color.Primary" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                @if (flux.FileLocationMetadata.Metadata.TryGetValue("Host", out var host))
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="Host" Variant="Variant.Outlined">@host</MudField>
                                    </MudItem>
                                }

                                @if (flux.FileLocationMetadata.Metadata.TryGetValue("Port", out var port))
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="Port" Variant="Variant.Outlined">@port</MudField>
                                    </MudItem>
                                }

                                @if (flux.FileLocationMetadata.Metadata.TryGetValue("Username", out var username))
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="Username" Variant="Variant.Outlined">@username</MudField>
                                    </MudItem>
                                }

                                @if (flux.FileLocationMetadata.Metadata.TryGetValue("RemoteDirectory", out var remoteDir))
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="Remote Directory" Variant="Variant.Outlined">@remoteDir</MudField>
                                    </MudItem>
                                }

                                @if (flux.FileLocationMetadata.Metadata.TryGetValue("FilePattern", out var filePattern))
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="File Pattern" Variant="Variant.Outlined">@filePattern</MudField>
                                    </MudItem>
                                }

                                @if (flux.FileLocationMetadata.Metadata.TryGetValue("Protocol", out var protocol))
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="Protocol" Variant="Variant.Outlined">@protocol</MudField>
                                    </MudItem>
                                }

                                @if (flux.FileLocationMetadata.Metadata != null && flux.FileLocationMetadata.Metadata.Count > 0)
                                {
                                    <MudItem xs="12">
                                        <FluxMetadataDictionaryComponent MetadataDictionary="@flux.FileLocationMetadata.Metadata" ReadOnly="true" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
                @if (flux.ApiMetadata != null && flux.FluxType == FluxType.Api)
                {
                    <MudCard Elevation="3" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">API Configuration</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIcon Icon="@Icons.Material.Filled.Api" Color="Color.Primary" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudField Label="Endpoint" Variant="Variant.Outlined">@flux.ApiMetadata.Endpoint</MudField>
                                </MudItem>

                                @if (!string.IsNullOrEmpty(flux.ApiMetadata.ApiKey))
                                {
                                    <MudItem xs="12">
                                        <MudField Label="API Key" Variant="Variant.Outlined">
                                            <MudText Style="word-break: break-all;">@flux.ApiMetadata.ApiKey</MudText>
                                        </MudField>
                                    </MudItem>
                                }

                                @if (flux.ApiMetadata.Metadata != null && flux.ApiMetadata.Metadata.Count > 0)
                                {
                                    <MudItem xs="12">
                                        <FluxMetadataDictionaryComponent MetadataDictionary="@flux.ApiMetadata.Metadata" ReadOnly="true" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
                @if (flux.DownloadMetadata != null && flux.FluxType == FluxType.HttpDownload)
                {
                    <MudCard Elevation="3" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Download Configuration</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIcon Icon="@Icons.Material.Filled.CloudDownload" Color="Color.Primary" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudField Label="Download URL" Variant="Variant.Outlined">@flux.DownloadMetadata.DownloadUrl</MudField>
                                </MudItem>

                                <MudItem xs="6">
                                    <MudField Label="Content Type" Variant="Variant.Outlined">@flux.DownloadMetadata.ContentType</MudField>
                                </MudItem>

                                @if (flux.DownloadMetadata.Metadata != null && flux.DownloadMetadata.Metadata.Count > 0)
                                {
                                    <MudItem xs="12">
                                        <FluxMetadataDictionaryComponent MetadataDictionary="@flux.DownloadMetadata.Metadata" ReadOnly="true" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
            </MudItem>

            <!-- Fetching History -->
            <MudItem xs="12">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Recent Fetching History</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudTooltip Text="View full history">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Primary"
                                             OnClick="@(() => NavigationManager.NavigateTo($"/flux/fetching-history?fluxId={FluxId}"))" />
                            </MudTooltip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <FluxFetchingHistoryTable
                            ServerReload="@LoadFetchingHistory"
                            ShowFluxId="false"
                            Loading="@loadingFetchingHistory"
                            OnForceProcess="@ForceProcess" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Processing History -->
            <MudItem xs="12">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Recent Processing History</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudTooltip Text="View full history">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Primary"
                                             OnClick="@(() => NavigationManager.NavigateTo($"/flux/processing-history?fluxId={FluxId}"))" />
                            </MudTooltip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <FluxProcessingHistoryTable
                            ServerReload="@LoadProcessingHistory"
                            ShowFluxId="false"
                            Loading="@loadingProcessingHistory" />
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Financial Data Points -->
            <MudItem xs="12">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Financial Data Points</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudTooltip Text="View full data points page">
                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Primary"
                                             OnClick="@(() => NavigationManager.NavigateTo($"/flux/financial-data-points?fluxId={FluxId}"))" />
                            </MudTooltip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (flux?.FinancialDataPoints == null || !flux.FinancialDataPoints.Any())
                        {
                            <MudText>No financial data points found for this flux.</MudText>
                        }
                        else
                        {
                            <MudTable Items="@flux.FinancialDataPoints" Dense="true" Hover="true" Bordered="true" Striped="true">
                                <HeaderContent>
                                    <MudTh>ID</MudTh>
                                    <MudTh>Data Point ID</MudTh>
                                    <MudTh>Data Point Name</MudTh>
                                    <MudTh>Approved</MudTh>
                                    <MudTh>Provider</MudTh>
                                    <MudTh>From</MudTh>
                                    <MudTh>To</MudTh>
                                    <MudTh>Mapping Metadata</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="ID">@context.Id</MudTd>
                                    <MudTd DataLabel="Data Point ID">@context.DataPoint?.Id</MudTd>
                                    <MudTd DataLabel="Data Point Name">@context.DataPoint?.Name</MudTd>
                                    <MudTd DataLabel="Approved">
                                        <MudIcon Icon="@(context.HasBeenApproved ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)"
                                                 Color="@(context.HasBeenApproved ? Color.Success : Color.Error)" />
                                    </MudTd>
                                    <MudTd DataLabel="Provider">@context.Provider</MudTd>
                                    <MudTd DataLabel="From">@context.From.ToString("yyyy-MM-dd")</MudTd>
                                    <MudTd DataLabel="To">@context.To?.ToString("yyyy-MM-dd")</MudTd>
                                    <MudTd DataLabel="Mapping Metadata">
                                        <MudTooltip Text="@context.MappingMetadata">
                                            <MudChip T="Color" Size="Size.Small" Color="Color.Primary">View</MudChip>
                                        </MudTooltip>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Quick Links and History -->
            <MudItem xs="12">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Quick Links</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Icon="@Icons.Material.Filled.Link" Color="Color.Primary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                         OnClick="@(() => NavigationManager.NavigateTo($"/flux/processing-history?fluxId={FluxId}"))">
                                    <MudIcon Icon="@Icons.Material.Filled.History" Class="mr-2" /> Processing History
                                </MudButton>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                         OnClick="@(() => NavigationManager.NavigateTo($"/flux/fetching-history?fluxId={FluxId}"))">
                                    <MudIcon Icon="@Icons.Material.Filled.Download" Class="mr-2" /> Fetching History
                                </MudButton>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                         OnClick="@(() => NavigationManager.NavigateTo($"/flux/errors?fluxId={FluxId}"))">
                                    <MudIcon Icon="@Icons.Material.Filled.Error" Class="mr-2" /> Error Log
                                </MudButton>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                         OnClick="@(() => NavigationManager.NavigateTo($"/flux/financial-data-points?fluxId={FluxId}"))">
                                    <MudIcon Icon="@Icons.Material.Filled.DataUsage" Class="mr-2" /> Data Points
                                </MudButton>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" Class="mt-4">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                         OnClick="@(() => NavigationManager.NavigateTo($"/flux/workflow-live/{FluxId}"))">
                                    <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="mr-2" /> Workflow Live
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int FluxId { get; set; }

    private FluxResponseWrapper? flux;
    private bool loading = true;
    private bool loadingFetchingHistory = false;
    private bool loadingProcessingHistory = false;
    private bool loadingWorkflowsHistory = false;
    private TriggerPeriod fetchTriggerPeriod;
    private TriggerPeriod processTriggerPeriod;
    private string _searchString = string.Empty;
    private MudTable<FluxWorkflowDetailsDto> _workflowsTable;

    protected override async Task OnInitializedAsync()
    {
        await LoadFluxData();
    }

    private async Task LoadFluxData()
    {
        try
        {
            loading = true;
            var response = await MindApi.GetFluxAsync(FluxId);
            flux = response;

            // Initialiser les trigger periods
            if (flux?.FetchTriggerPeriod != null)
            {
                fetchTriggerPeriod = new TriggerPeriod
                {
                    FrequencyType = flux.FetchTriggerPeriod.FrequencyType,
                    Interval = flux.FetchTriggerPeriod.Interval,
                    StartTime = flux.FetchTriggerPeriod.StartTime,
                    DayOfWeek = flux.FetchTriggerPeriod.DayOfWeek,
                    DayOfMonth = flux.FetchTriggerPeriod.DayOfMonth,
                    IsEnabled = flux.FetchTriggerPeriod.IsEnabled
                };
            }

            if (flux?.ProcessTriggerPeriod != null)
            {
                processTriggerPeriod = new TriggerPeriod
                {
                    FrequencyType = flux.ProcessTriggerPeriod.FrequencyType,
                    Interval = flux.ProcessTriggerPeriod.Interval,
                    StartTime = flux.ProcessTriggerPeriod.StartTime,
                    DayOfWeek = flux.ProcessTriggerPeriod.DayOfWeek,
                    DayOfMonth = flux.ProcessTriggerPeriod.DayOfMonth,
                    IsEnabled = flux.ProcessTriggerPeriod.IsEnabled
                };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading flux details: {ex.Message}", Severity.Error);
            flux = null;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task<TableData<FluxFetchingSearchResponse>> LoadFetchingHistory(TableState state, CancellationToken token)
    {
        loadingFetchingHistory = true;
        try
        {
            var request = new FluxFetchingSearchRequest
            {
                FluxId = new SearchCriteria<int> { Operator = Operator.Equal, Value = FluxId },
                Pagination = new Pagination(state.PageSize, state.Page + 1)
            };

            var response = await MindApi.SearchFetchingHistoryAsync(request);
            return new TableData<FluxFetchingSearchResponse>
            {
                Items = response.Data.ToList(),
                TotalItems = (int)response.TotalRecords
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading fetching history: {ex.Message}", Severity.Error);
            return new TableData<FluxFetchingSearchResponse>
            {
                Items = new List<FluxFetchingSearchResponse>(),
                TotalItems = 0
            };
        }
        finally
        {
            loadingFetchingHistory = false;
            StateHasChanged();
        }
    }

    private async Task<TableData<FluxProcessingSearchReponse>> LoadProcessingHistory(TableState state, CancellationToken token)
    {
        loadingProcessingHistory = true;
        try
        {
            var request = new FluxProcessingSearchRequest
            {
                FluxId = new SearchCriteria<int> { Operator = Operator.Equal, Value = FluxId },
                Pagination = new Pagination(state.PageSize, state.Page + 1)
            };

            var response = await MindApi.SearchProcessingHistoryAsync(request);
            return new TableData<FluxProcessingSearchReponse>
            {
                Items = response.Data.ToList(),
                TotalItems = (int)response.TotalRecords
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading processing history: {ex.Message}", Severity.Error);
            return new TableData<FluxProcessingSearchReponse>
            {
                Items = new List<FluxProcessingSearchReponse>(),
                TotalItems = 0
            };
        }
        finally
        {
            loadingProcessingHistory = false;
            StateHasChanged();
        }
    }

    private async Task ForceFetch()
    {
        try
        {
            loading = true;
            var result = await MindApi.ForceFetchBackgroundAsync(FluxId);
            Snackbar.Add("Force fetch started in the background", Severity.Success);
            await LoadFluxData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting force fetch: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ForceProcess()
    {
        try
        {
            loading = true;
            var result = await MindApi.ForceProcessBackgroundAsync(FluxId);
            Snackbar.Add("Force process started in the background", Severity.Success);
            await LoadFluxData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting force process: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ShowDeleteConfirmDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("ItemName", "flux");
        parameters.Add("ItemValue", flux?.FluxName ?? $"#{FluxId}");

        var options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                Position = DialogPosition.Center
            };

        var dialog = await DialogService.ShowAsync<ConfirmDeleteDialog>("Confirm Deletion", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteFlux();
        }
    }

    private async Task DeleteFlux()
    {
        try
        {
            var result = await MindApi.DeleteFluxAsync(FluxId);
            if (result)
            {
                Snackbar.Add($"Flux deleted successfully", Severity.Success);
                NavigationManager.NavigateTo("/flux/search");
            }
            else
            {
                Snackbar.Add($"Error deleting flux", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowMetadataDialog()
    {
        if (flux == null)
            return;

        var parameters = new DialogParameters();
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            Position = DialogPosition.Center
        };

        // Créez un composant personnalisé pour afficher les métadonnées
        if (flux.FluxType == FluxType.Email && flux.EmailMetadata?.Metadata != null)
        {
            parameters.Add("Metadata", flux.EmailMetadata.Metadata);
            parameters.Add("Title", "Email Flux Metadata");
            await DialogService.ShowAsync<FluxMetadataViewDialog>("Email Flux Metadata", parameters, options);
        }
        else if (flux.FluxType == FluxType.Api && flux.ApiMetadata?.Metadata != null)
        {
            parameters.Add("Metadata", flux.ApiMetadata.Metadata);
            parameters.Add("Title", "API Flux Metadata");
            await DialogService.ShowAsync<FluxMetadataViewDialog>("API Flux Metadata", parameters, options);
        }
        else if ((flux.FluxType == FluxType.HttpDownload || flux.FluxType == FluxType.Scraping) && flux.DownloadMetadata?.Metadata != null)
        {
            parameters.Add("Metadata", flux.DownloadMetadata.Metadata);
            parameters.Add("Title", "Download Flux Metadata");
            await DialogService.ShowAsync<FluxMetadataViewDialog>("Download Flux Metadata", parameters, options);
        }
        else if (flux.FluxType == FluxType.Sftp && flux.FileLocationMetadata?.Metadata != null)
        {
            parameters.Add("Metadata", flux.FileLocationMetadata.Metadata);
            parameters.Add("Title", "SFTP Flux Metadata");
            await DialogService.ShowAsync<FluxMetadataViewDialog>("SFTP Flux Metadata", parameters, options);
        }
        else
        {
            Snackbar.Add("No metadata available for this flux type", Severity.Info);
        }
    }

    // Helper methods for icons and colors
    private string GetStatusIcon(StatusProcess status)
    {
        return status switch
        {
            StatusProcess.Success => Icons.Material.Filled.CheckCircle,
            StatusProcess.Failure => Icons.Material.Filled.Error,
            StatusProcess.Warning => Icons.Material.Filled.Warning,
            StatusProcess.Processing => Icons.Material.Filled.Pending,
            StatusProcess.Paused => Icons.Material.Filled.Block,
            _ => Icons.Material.Filled.HelpOutline
        };
    }

    private Color GetStatusColor(StatusProcess status)
    {
        return status switch
        {
            StatusProcess.Success => Color.Success,
            StatusProcess.Failure => Color.Error,
            StatusProcess.Warning => Color.Warning,
            StatusProcess.Processing => Color.Info,
            StatusProcess.Paused => Color.Warning,
            _ => Color.Default
        };
    }

    private Color GetFluxStateColor(FluxState fluxState)
    {
        return fluxState switch
        {
            FluxState.Active => Color.Success,
            FluxState.Disabled => Color.Dark,
            FluxState.BackOfficeOnly => Color.Warning,
            FluxState.Obsolete => Color.Dark,
            _ => Color.Default
        };
    }

    private string FormatDateTime(DateTime dateTime)
    {
        var now = DateTime.Now;
        var diff = now - dateTime;

        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalHours < 1)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalDays < 1)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";

        return dateTime.ToString("MMM dd, HH:mm");
    }

    private Color GetWorkflowStageColor(string stage)
    {
        return stage switch
        {
            "Initializing" => Color.Primary,
            "Processing" => Color.Info,
            "Completed" => Color.Success,
            "Failed" => Color.Error,
            _ => Color.Default
        };
    }

    private Color GetProgressColor(string stage, bool isCompleted, bool isSuccessful)
    {
        if (isCompleted)
        {
            return isSuccessful ? Color.Success : Color.Error;
        }
        else
        {
            return stage switch
            {
                "Initializing" => Color.Primary,
                "Processing" => Color.Info,
                _ => Color.Default
            };
        }
    }
}