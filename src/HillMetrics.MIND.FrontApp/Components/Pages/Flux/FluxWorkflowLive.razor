@page "/flux/workflow-live/{FluxId:int}"
@page "/flux/workflow-live/{FluxId:int}/{WorkflowId:guid}"
@page "/flux/workflow-live/{FluxId:int}/{WorkflowId:guid}/{UseSignalR:bool}"
@using HillMetrics.Core.Blazor.AuthModule.Services
@using HillMetrics.Core.Monitoring.Workflow
@using HillMetrics.Core.Workflow
@using HillMetrics.Core.Workflow.Models
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.MIND.API.SDK.V1
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using HillMetrics.Core.Authentication.Contracts
@using System.Text.Json
@inject IMindAPI MindApi
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject IConfiguration Configuration
@inject ILogger<FluxWorkflowLive> Logger
@inject ISnackbar Snackbar
@* @inject IAuthenticationService AuthService *@
@inject IAuthService AuthService
@implements IAsyncDisposable
@attribute [Authorize]

<div class="workflow-container">
    <div class="d-flex align-center justify-space-between mb-4">
        <MudButton Variant="Variant.Text"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="@(() => NavigationManager.NavigateTo("/flux/search"))">
            Back to Search
        </MudButton>

        @if (availableWorkflows.Count > 1)
        {
            <MudSelect T="Guid?" Label="Select Workflow" Value="selectedWorkflowId" ValueChanged="OnWorkflowSelectionChanged"
            Class="ml-4" Style="min-width: 300px;">
                @foreach (var workflow in availableWorkflows)
                {
                    <MudSelectItem Value="@workflow.WorkflowId">
                        @($"Started: {workflow.StartTime.ToLocalTime():g}")
                    </MudSelectItem>
                }
            </MudSelect>
        }

        <div>
            <MudSwitch @bind-Checked="@UseSignalR" Color="Color.Primary" Label="Use SignalR"
                      Class="mr-2" Immediate="true" T="bool" Style="display: inline-flex" />
            <MudButton Variant="Variant.Text"
            Color="Color.Secondary"
            StartIcon="@Icons.Material.Filled.Refresh"
            OnClick="@RefreshData">
                Refresh
            </MudButton>
        </div>
    </div>

    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6">
                    Flux:
                    <MudLink Href="@($"/flux/details/{FluxId}")" Underline="Underline.Always">
                        @(WorkflowDetails?.FluxName ?? $"ID: {FluxId}")
                    </MudLink>
                </MudText>
                @if (WorkflowDetails != null)
                {
                    <MudText Typo="Typo.body2">Started: <strong>@WorkflowDetails.StartTime.ToLocalTime().ToString("g")</strong></MudText>
                    <MudText Typo="Typo.body2">Duration: <strong>@Math.Round(WorkflowDetails.DurationMinutes, 1) min</strong></MudText>
                    <MudText Typo="Typo.body2">WorkflowId: <strong>@WorkflowDetails.WorkflowId</strong></MudText>
                    <MudText Typo="Typo.body2">Updated via: <strong>@(UseSignalR && isSignalRConnected ? "SignalR" : "API")</strong></MudText>
                }
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    @(WorkflowDetails?.IsCompleted == true
                            ? "Completed"
                            : "In progress...")
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <div class="workflow-canvas" @ref="canvasRef">
        @if (WorkflowDetails != null)
        {
            <div class="workflow-diagram">
                @foreach (var step in rootSteps)
                {
                    @RenderWorkflowDiagram(step, 0)
                }
            </div>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </div>

    @if (SelectedStep != null)
    {
        <MudDrawer @bind-Open="isStepDetailOpen" Anchor="Anchor.Right" Elevation="1" Variant="@DrawerVariant.Persistent" Width="400px">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">Step Details</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="@(() => isStepDetailOpen = false)" />
            </MudDrawerHeader>
            <MudDrawerContainer>
                <MudList T="HistoryEntryDto" Dense="true">
                    <MudListItem>
                        <MudText><b>Stage:</b> @SelectedStep.Stage</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText><b>Description:</b> @SelectedStep.Description</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText><b>Timestamp:</b> @SelectedStep.Timestamp.ToLocalTime().ToString("g")</MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText><b>Time since start:</b> @Math.Round(SelectedStep.TimeSinceStart, 1) min</MudText>
                    </MudListItem>

                    <MudDivider Class="my-2" />
                    <MudListItem>
                        <MudText Typo="Typo.subtitle2">Data Metrics</MudText>
                    </MudListItem>

                    <MudListItem>
                        <MudChip Color="@(SelectedStep.RowsAdded > 0 ? Color.Success : Color.Default)"
                                Size="Size.Small" Class="mr-2">@SelectedStep.RowsAdded</MudChip>
                        <MudText>Records added</MudText>
                    </MudListItem>

                    <MudListItem>
                        <MudChip Color="@(SelectedStep.RowsModified > 0 ? Color.Primary : Color.Default)"
                                Size="Size.Small" Class="mr-2">@SelectedStep.RowsModified</MudChip>
                        <MudText>Records updated</MudText>
                    </MudListItem>

                    <MudListItem>
                        <MudChip Color="@(SelectedStep.RowsIgnored > 0 ? Color.Warning : Color.Default)"
                                Size="Size.Small" Class="mr-2">@SelectedStep.RowsIgnored</MudChip>
                        <MudText>Records ignored</MudText>
                    </MudListItem>

                    <MudListItem>
                        <MudChip Color="@(SelectedStep.RowsWithErrors > 0 ? Color.Error : Color.Default)"
                                Size="Size.Small" Class="mr-2">@SelectedStep.RowsWithErrors</MudChip>
                        <MudText>Records with errors</MudText>
                    </MudListItem>
                </MudList>
            </MudDrawerContainer>
        </MudDrawer>
    }
</div>

@code {
    [Parameter] public int FluxId { get; set; }
    [Parameter] public Guid? WorkflowId { get; set; }
    [Parameter] public bool UseSignalR { get; set; } = true;

    private ElementReference canvasRef;
    private FluxWorkflowDetailsDto? WorkflowDetails { get; set; }
    private HistoryEntryDto? SelectedStep { get; set; }
    private HubConnection? hubConnection;
    private List<FluxWorkflowDetailsDto> availableWorkflows = new();
    private Guid? selectedWorkflowId;
    private List<PositionedHistoryEntry> positionedSteps = new();
    private List<HistoryEntryDto> rootSteps = new();
    private string? signalRServiceUrl;
    private bool isSignalRConnected = false;
    private bool isStepDetailOpen = false;

    private class PositionedHistoryEntry : HistoryEntryDto
    {
        public double X { get; set; }
        public double Y { get; set; }

        public PositionedHistoryEntry(HistoryEntryDto entry, double x, double y)
        {
            // Copier toutes les propriétés
            Id = entry.Id;
            ParentId = entry.ParentId;
            Stage = entry.Stage;
            ActionId = entry.ActionId;
            Description = entry.Description;
            Timestamp = entry.Timestamp;
            TimeSinceStart = entry.TimeSinceStart;
            RowsAdded = entry.RowsAdded;
            RowsModified = entry.RowsModified;
            RowsIgnored = entry.RowsIgnored;
            RowsWithErrors = entry.RowsWithErrors;
            IsCompleted = entry.IsCompleted;
            CompletionTimestamp = entry.CompletionTimestamp;
            CompletionDescription = entry.CompletionDescription;
            DurationSeconds = entry.DurationSeconds;
            Children = entry.Children;
            X = x;
            Y = y;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        selectedWorkflowId = WorkflowId;

        if (UseSignalR)
        {
            await GetSignalRServiceUrl();
            await SetupSignalRConnection();
        }

        await RefreshData();
    }

    private async Task GetSignalRServiceUrl()
    {
        try
        {
            // Tenter de récupérer l'URL du service SignalR depuis la configuration
            signalRServiceUrl = Configuration["Services:SignalR:BaseUrl"];

            if (string.IsNullOrEmpty(signalRServiceUrl))
            {
                // Utiliser une URL par défaut si non trouvée dans la configuration
                signalRServiceUrl = "https://localhost:7228";
                Logger.LogInformation($"Using default SignalR service URL: {signalRServiceUrl}");
            }
            else
            {
                Logger.LogInformation($"Found SignalR service URL in configuration: {signalRServiceUrl}");
            }

            // Vérifier si l'URL se termine par un slash
            if (!signalRServiceUrl.EndsWith("/"))
            {
                signalRServiceUrl += "/";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error getting SignalR service URL: {ex.Message}");
            // Fallback sur une URL par défaut en cas d'erreur
            signalRServiceUrl = "https://localhost:8080/";
        }
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            if (!UseSignalR)
            {
                isSignalRConnected = false;
                return;
            }

            Logger.LogInformation($"Connecting to SignalR hub at: {signalRServiceUrl}notification-hub");

            // Récupérer un jeton d'accès pour l'authentification
            var accessToken = await GetAccessTokenAsync();

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{signalRServiceUrl}notification-hub", options =>
                {
                    // Ajouter le jeton d'accès comme en-tête d'autorisation
                    options.AccessTokenProvider = () => Task.FromResult(accessToken);

                    // Configurer d'autres options si nécessaire
                    options.SkipNegotiation = false;
                    options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                })
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
                .Build();

            // S'abonner aux messages de notification
            hubConnection.On<object>("onTopicNotification", (message) =>
            {
                // Cette méthode est appelée lorsqu'un message est reçu sur un topic
                ProcessWorkflowMessage(message);
            });

            // S'abonner à l'événement de reconnexion
            hubConnection.Reconnected += (connectionId) =>
            {
                isSignalRConnected = true;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            // S'abonner à l'événement de déconnexion
            hubConnection.Closed += (error) =>
            {
                isSignalRConnected = false;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            // Démarrer la connexion
            await hubConnection.StartAsync();
            isSignalRConnected = true;
            Logger.LogInformation("SignalR connection started successfully");

            // S'abonner au topic "workflow" pour recevoir les mises à jour de workflow
            await hubConnection.InvokeAsync("Subscribe", "workflow");
            Logger.LogInformation("Subscribed to 'workflow' topic");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error setting up SignalR connection: {ex.Message}");
            isSignalRConnected = false;
        }
    }

    private async Task<string> GetAccessTokenAsync()
    {
        try
        {
            // Utiliser le service d'authentification injecté pour obtenir le jeton
            var token = await AuthService.GetAccessTokenAsync();

            if (!string.IsNullOrEmpty(token))
            {
                Logger.LogInformation("Retrieved token from AuthenticationService");
                return token;
            }

            // Option de secours : Utiliser JSRuntime pour récupérer le jeton stocké côté client
            token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "auth_token");

            if (!string.IsNullOrEmpty(token))
            {
                Logger.LogInformation("Retrieved token from localStorage");
                return token;
            }

            // Si aucun jeton n'est trouvé, renvoyer null ou une chaîne vide
            Logger.LogError("No access token found");
            return string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error getting access token: {ex.Message}");
            return string.Empty;
        }
    }

    private void ProcessWorkflowMessage(object message)
    {
        try
        {
            // Convertir le message en JSON pour faciliter l'extraction des propriétés
            var json = System.Text.Json.JsonSerializer.Serialize(message);
            var jsonDoc = System.Text.Json.JsonDocument.Parse(json);

            // Tenter d'extraire les informations pertinentes du message
            if (jsonDoc.RootElement.TryGetProperty("Value", out var valueElement))
            {
                // Extraire les propriétés importantes
                if (valueElement.TryGetProperty("FluxId", out var fluxIdElement) &&
                    int.TryParse(fluxIdElement.ToString(), out var fluxId))
                {
                    // Vérifier si ce message concerne notre flux actuel
                    if (fluxId == FluxId)
                    {
                        Logger.LogInformation($"Received workflow update for flux {fluxId}");

                        // Si un WorkflowId est présent, l'extraire
                        Guid? workflowId = null;
                        if (valueElement.TryGetProperty("WorkflowId", out var workflowIdElement) &&
                            Guid.TryParse(workflowIdElement.ToString(), out var parsedWorkflowId))
                        {
                            workflowId = parsedWorkflowId;
                            Logger.LogInformation($"Message contains WorkflowId: {workflowId}");
                        }

                        // Si le message a un indicateur d'erreur
                        bool isError = false;
                        if (valueElement.TryGetProperty("IsError", out var isErrorElement))
                        {
                            isError = isErrorElement.GetBoolean();
                        }

                        // Déclencher un rafraîchissement des données basé sur le message reçu
                        InvokeAsync(async () =>
                        {
                            // Si le message contient un WorkflowId spécifique et qu'il correspond à notre sélection actuelle
                            if (workflowId.HasValue &&
                                (selectedWorkflowId == null || selectedWorkflowId.Value == workflowId.Value))
                            {
                                // Mettre à jour ce workflow spécifique
                                await RefreshDataFromApi();
                            }
                            else
                            {
                                // Sinon rafraîchir toutes les données
                                await RefreshDataFromApi();
                            }

                            StateHasChanged();
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error processing workflow message: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        try
        {
            if (UseSignalR && hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                Logger.LogInformation("Refreshing data via SignalR connection");

                // Demander les données via SignalR
                await hubConnection.InvokeAsync("getWorkflowsForFlux", FluxId);

                if (selectedWorkflowId.HasValue)
                {
                    await hubConnection.InvokeAsync("getWorkflowById", selectedWorkflowId.Value);
                }
                else
                {
                    await hubConnection.InvokeAsync("getFluxDetails", FluxId);
                }
                return;
            }

            // Fallback API si SignalR n'est pas disponible ou n'est pas utilisé
            Logger.LogInformation($"Refreshing data via API ({(UseSignalR ? "SignalR not available" : "SignalR disabled")})");
            await RefreshDataFromApi();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error refreshing workflow data: {ex.Message}");
            await RefreshDataFromApi();
        }
    }

    private async Task RefreshDataFromApi()
    {
        try
        {
            if (selectedWorkflowId.HasValue)
            {
                // Récupérer les détails du workflow spécifique
                var response = await MindApi.GetWorkflowByIdAsync(selectedWorkflowId.Value);
                if (response?.Data != null)
                {
                    Logger.LogInformation($"[API update] Received data from GetWorkflowByIdAsync({selectedWorkflowId.Value}), values : {System.Text.Json.JsonSerializer.Serialize(response)}");

                    WorkflowDetails = response.Data;
                    PositionWorkflowSteps();
                }
            }
            else
            {
                // Récupérer les détails globaux du flux
                var response = await MindApi.GetFluxWorkflowDetailsAsync(FluxId);
                if (response?.Data != null)
                {
                    WorkflowDetails = response.Data;
                    PositionWorkflowSteps();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error refreshing data from API: {ex.Message}");
        }
    }

    private void MapWorkflowStateToDetails(WorkflowStateModel state)
    {
        WorkflowDetails = MapToFluxWorkflowDetailsDto(state);
    }

    private FluxWorkflowDetailsDto MapToFluxWorkflowDetailsDto(WorkflowStateModel state)
    {
        // Convertir les étapes du workflow
        var historyEntries = MapHistoryEntries(state.Steps);

        // Convertir WorkflowStateModel en FluxWorkflowDetailsDto
        return new FluxWorkflowDetailsDto
            {
                WorkflowId = state.WorkflowId,
                FluxId = state.FluxId,
                FluxName = state.FluxName,
                StageDetails = state.Steps.LastOrDefault()?.Description,
                StartTime = state.StartTime,
                LastUpdateTime = state.LastUpdateTime,
                EndTime = state.EndTime,
                DurationMinutes = state.Duration.TotalMinutes,
                IsCompleted = state.IsCompleted,
                History = historyEntries
            };
    }

    private List<HistoryEntryDto> MapHistoryEntries(List<WorkflowStepModel> steps)
    {
        var entries = new List<HistoryEntryDto>();

        foreach (var step in steps)
        {
            var entry = new HistoryEntryDto
            {
                Id = step.Id,
                ParentId = step.ParentId,
                Stage = step.Stage,
                Description = step.Description,
                Timestamp = step.Timestamp,
                TimeSinceStart = step.TimeSinceStart,
                RowsAdded = step.LinesAdded,
                RowsModified = step.LinesModified,
                RowsIgnored = step.LinesIgnored,
                RowsWithErrors = step.LinesWithErrors,
                IsCompleted = step.IsCompleted,
                CompletionTimestamp = step.CompletionTimestamp,
                CompletionDescription = step.CompletionDescription,
                DurationSeconds = step.DurationSeconds,
                ActionId = step.ActionId,
                Children = MapHistoryEntries(step.Children)
            };

            entries.Add(entry);
        }

        return entries;
    }

    private void PositionWorkflowSteps()
    {
        if (WorkflowDetails?.History == null) return;

        // Utiliser directement la structure d'arbre pour les étapes du workflow
        rootSteps = WorkflowDetails.History.Where(h => h.ParentId == null).ToList();
    }

    private string GetStepStatusClass(WorkflowStage stage)
    {
        return stage switch
        {
            WorkflowStage.Failed => "status-error",

            // In-progress stages
            WorkflowStage.FetchingData => "status-info",
            WorkflowStage.Processing => "status-info",
            WorkflowStage.RefinedDataCopying => "status-info",
            WorkflowStage.CalcCurrencyExchangeRateStarting => "status-info",
            WorkflowStage.CalculationRiskStarting => "status-info",
            WorkflowStage.CalculationReturnStarting => "status-info",
            WorkflowStage.CalculationWeeklyReturnStarting => "status-info",

            // Default or NotStarted
            _ => "status-default"
        };
    }

    private void SelectStep(HistoryEntryDto step)
    {
        SelectedStep = step;
        isStepDetailOpen = true;
    }

    private async Task OnWorkflowSelectionChanged(Guid? workflowId)
    {
        selectedWorkflowId = workflowId;

        // Mettre à jour l'URL pour refléter le workflow sélectionné
        if (workflowId.HasValue)
        {
            NavigationManager.NavigateTo($"/flux/workflow-live/{FluxId}/{workflowId}/{UseSignalR}", false);

            // Mise à jour du paramètre WorkflowId
            WorkflowId = workflowId;

            // Rafraîchir les données pour ce workflow spécifique
            await RefreshSpecificWorkflow(workflowId.Value);
        }
        else
        {
            NavigationManager.NavigateTo($"/flux/workflow-live/{FluxId}/{UseSignalR}", false);
            WorkflowId = null;

            // Rafraîchir les données générales du flux
            await RefreshFluxData();
        }
    }

    private async Task RefreshSpecificWorkflow(Guid workflowId)
    {
        try
        {
            // Récupérer les détails du workflow spécifique
            var response = await MindApi.GetWorkflowByIdAsync(workflowId);
            if (response?.Data != null)
            {
                WorkflowDetails = response.Data;
                PositionWorkflowSteps();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error refreshing specific workflow {workflowId}: {ex.Message}");
        }
    }

    private async Task RefreshFluxData()
    {
        try
        {
            // Récupérer les détails globaux du flux
            var response = await MindApi.GetFluxWorkflowDetailsAsync(FluxId);
            if (response?.Data != null)
            {
                WorkflowDetails = response.Data;
                PositionWorkflowSteps();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error refreshing flux data for FluxId {FluxId}: {ex.Message}");
        }
    }

    // Method to handle UseSignalR property changes
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            // Se désabonner du topic avant de fermer la connexion
            try
            {
                if (hubConnection.State == HubConnectionState.Connected)
                {
                    await hubConnection.InvokeAsync("Unsubscribe", "workflow");
                    Logger.LogInformation("Unsubscribed from 'workflow' topic");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error unsubscribing from topic: {ex.Message}");
            }

            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize animations or other JS interop needed after first render
            // await JSRuntime.InvokeVoidAsync("initWorkflowAnimations");
        }
        else if (WorkflowDetails != null)
        {
            // Update animations when workflow data changes
            // await JSRuntime.InvokeVoidAsync("updateWorkflowAnimations");
        }
    }

    // Méthode pour gérer le clic sur le bouton de traitement sans propager l'événement au parent
    private async Task HandleProcessButtonClick(HistoryEntryDto step)
    {
        await ForceProcess(step);
    }

    // Méthode pour rendu récursif des étapes de workflow en forme de diagramme
    private RenderFragment RenderWorkflowDiagram(HistoryEntryDto step, int level) => builder =>
    {
        var statusClass = GetStepStatusClass(step.Stage);
        var completionClass = step.IsCompleted ? "node-completed" : "node-inprogress";

        // Calculate the node position based on level
        string nodePositionClass = level == 0 ? "node-center" : "";

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", $"workflow-node-container {nodePositionClass}");

        // Node element
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", $"workflow-node {statusClass} {completionClass}");
        builder.AddAttribute(4, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => SelectStep(step)));

        // Compute tooltip content
        var tooltipContent = step.IsCompleted && !string.IsNullOrEmpty(step.CompletionDescription)
            ? $"{step.Stage} → completed\n{step.Description}\n→ {step.CompletionDescription}"
            : $"{step.Stage}\n{step.Description}";

        if (step.RowsAdded > 0 || step.RowsModified > 0 || step.RowsIgnored > 0 || step.RowsWithErrors > 0)
        {
            var metrics = new List<string>();
            if (step.RowsAdded > 0) metrics.Add($"{step.RowsAdded} added");
            if (step.RowsModified > 0) metrics.Add($"{step.RowsModified} updated");
            if (step.RowsIgnored > 0) metrics.Add($"{step.RowsIgnored} ignored");
            if (step.RowsWithErrors > 0) metrics.Add($"{step.RowsWithErrors} errors");
            tooltipContent += $"\n{string.Join(", ", metrics)}";
        }

        if (step.DurationSeconds.HasValue)
        {
            tooltipContent += $"\nDuration: {FormatDuration(step.DurationSeconds.Value)}";
        }

        builder.AddAttribute(5, "title", tooltipContent);

        // Node content
        builder.OpenElement(6, "div");
        builder.AddAttribute(7, "class", "node-content");

        // Status icon
        builder.OpenElement(8, "div");
        builder.AddAttribute(9, "class", "node-header");

        builder.OpenElement(10, "i");
        if (step.IsCompleted)
        {
            builder.AddAttribute(11, "class", "mud-icon-root mud-icon-default mud-icon-size-small mud-color-success");
            builder.AddAttribute(12, "aria-hidden", "true");
            builder.AddMarkupContent(13, "<svg viewBox=\"0 0 24 24\" style=\"width: 18px; height: 18px;\"><path d=\"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z\" fill=\"currentColor\"></path></svg>");
        }
        else if (step.Stage == WorkflowStage.Failed)
        {
            builder.AddAttribute(11, "class", "mud-icon-root mud-icon-default mud-icon-size-small mud-color-error");
            builder.AddAttribute(12, "aria-hidden", "true");
            builder.AddMarkupContent(13, "<svg viewBox=\"0 0 24 24\" style=\"width: 18px; height: 18px;\"><path d=\"M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\" fill=\"currentColor\"></path></svg>");
        }
        else
        {
            builder.AddAttribute(11, "class", "mud-icon-root mud-icon-default mud-icon-size-small mud-color-info");
            builder.AddAttribute(12, "aria-hidden", "true");
            builder.AddMarkupContent(13, "<svg viewBox=\"0 0 24 24\" style=\"width: 18px; height: 18px;\"><path d=\"M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z\" fill=\"currentColor\"></path></svg>");
        }
        builder.CloseElement(); // i

        builder.CloseElement(); // node-header

        // Stage name
        builder.OpenElement(14, "div");
        builder.AddAttribute(15, "class", "node-title");
        builder.AddContent(16, GetWorkflowStageDisplayName(step.Stage));
        builder.CloseElement(); // node-title

        // Action buttons
        if (!string.IsNullOrEmpty(step.Metadata))
        {
            builder.OpenElement(17, "div");
            builder.AddAttribute(18, "class", "node-actions");

            if (step.Stage == WorkflowStage.FetchingData)
            {
                var fetchingId = TryGetFetchingId(step.Metadata);
                if (fetchingId > 0)
                {
                    // Quick action buttons
                    builder.OpenElement(19, "button");
                    builder.AddAttribute(20, "class", "btn-quick");
                    builder.AddAttribute(21, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => NavigateToFetchingDetails(fetchingId)));
                    builder.AddAttribute(22, "title", "View fetching details");
                    builder.AddMarkupContent(23, "<i class=\"mud-icon-root mud-icon-default\"><svg viewBox=\"0 0 24 24\" style=\"width: 16px; height: 16px;\"><path d=\"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z\" fill=\"currentColor\"></path></svg></i>");
                    builder.CloseElement(); // button

                    builder.OpenElement(24, "button");
                    builder.AddAttribute(25, "class", "btn-quick");
                    builder.AddAttribute(26, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => ForceProcessFetching(fetchingId)));
                    builder.AddAttribute(27, "title", "Force process this fetching data");
                    builder.AddMarkupContent(28, "<i class=\"mud-icon-root mud-icon-default\"><svg viewBox=\"0 0 24 24\" style=\"width: 16px; height: 16px;\"><path d=\"M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z\" fill=\"currentColor\"></path></svg></i>");
                    builder.CloseElement(); // button
                }
            }
            else if (step.Stage == WorkflowStage.Processing)
            {
                var processingId = TryGetProcessingId(step.Metadata);
                if (processingId > 0)
                {
                    builder.OpenElement(29, "button");
                    builder.AddAttribute(30, "class", "btn-quick");
                    builder.AddAttribute(31, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => NavigateToProcessingDetails(processingId)));
                    builder.AddAttribute(32, "title", "View processing details");
                    builder.AddMarkupContent(33, "<i class=\"mud-icon-root mud-icon-default\"><svg viewBox=\"0 0 24 24\" style=\"width: 16px; height: 16px;\"><path d=\"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z\" fill=\"currentColor\"></path></svg></i>");
                    builder.CloseElement(); // button
                }
            }

            builder.CloseElement(); // node-actions
        }

        // Metrics indicators
        if (step.RowsAdded > 0 || step.RowsModified > 0 || step.RowsIgnored > 0 || step.RowsWithErrors > 0)
        {
            builder.OpenElement(34, "div");
            builder.AddAttribute(35, "class", "node-metrics");

            if (step.RowsAdded > 0)
            {
                builder.OpenElement(36, "span");
                builder.AddAttribute(37, "class", "badge success");
                builder.AddAttribute(38, "title", $"{step.RowsAdded} records added");
                builder.AddContent(39, "+" + step.RowsAdded);
                builder.CloseElement(); // span
            }

            if (step.RowsModified > 0)
            {
                builder.OpenElement(40, "span");
                builder.AddAttribute(41, "class", "badge info");
                builder.AddAttribute(42, "title", $"{step.RowsModified} records modified");
                builder.AddContent(43, "~" + step.RowsModified);
                builder.CloseElement(); // span
            }

            if (step.RowsIgnored > 0)
            {
                builder.OpenElement(44, "span");
                builder.AddAttribute(45, "class", "badge warning");
                builder.AddAttribute(46, "title", $"{step.RowsIgnored} records ignored");
                builder.AddContent(47, step.RowsIgnored);
                builder.CloseElement(); // span
            }

            if (step.RowsWithErrors > 0)
            {
                builder.OpenElement(48, "span");
                builder.AddAttribute(49, "class", "badge error");
                builder.AddAttribute(50, "title", $"{step.RowsWithErrors} records with errors");
                builder.AddContent(51, "!" + step.RowsWithErrors);
                builder.CloseElement(); // span
            }

            builder.CloseElement(); // node-metrics
        }

        builder.CloseElement(); // node-content
        builder.CloseElement(); // workflow-node

        // Container for child nodes
        if (step.Children != null && step.Children.Any())
        {
            // Render children based on how many they are
            var childrenCount = step.Children.Count;

            if (childrenCount == 1)
            {
                // Single child - vertical connection
                builder.OpenElement(60, "div");
                builder.AddAttribute(61, "class", "arrow-down");
                builder.CloseElement(); // arrow-down

                builder.OpenElement(62, "div");
                builder.AddAttribute(63, "class", "node-children single-child");
                builder.AddContent(64, RenderWorkflowDiagram(step.Children[0], level + 1));
                builder.CloseElement(); // node-children
            }
            else
            {
                // Multiple children - branch out
                builder.OpenElement(65, "div");
                builder.AddAttribute(66, "class", "arrow-down");
                builder.CloseElement(); // arrow-down

                builder.OpenElement(67, "div");
                builder.AddAttribute(68, "class", "branch-container");
                builder.CloseElement(); // branch-container

                builder.OpenElement(69, "div");
                builder.AddAttribute(70, "class", "node-children multi-child");

                foreach (var child in step.Children)
                {
                    builder.OpenElement(71, "div");
                    builder.AddAttribute(72, "class", "child-branch");
                    builder.AddContent(73, RenderWorkflowDiagram(child, level + 1));
                    builder.CloseElement(); // child-branch
                }

                builder.CloseElement(); // node-children
            }
        }

        builder.CloseElement(); // workflow-node-container
    };

    // Helper function to get a friendlier display name for workflow stages
    private string GetWorkflowStageDisplayName(WorkflowStage stage)
    {
        return stage switch
        {
            WorkflowStage.FetchingData => "Fetch data",
            WorkflowStage.Processing => "Process data",
            WorkflowStage.NormalizedDataInserting => "Normalized insertion",
            WorkflowStage.RefinedDataCopying => "Refined insertion",
            WorkflowStage.RefinedDataCopied => "Refined data copied",
            WorkflowStage.CalculationReturnStarting => "Calcul 1",
            WorkflowStage.CalculationRiskStarting => "Calcul 2",
            WorkflowStage.CalculationWeeklyReturnStarting => "Calcul 3",
            WorkflowStage.CalcCurrencyExchangeRateStarting => "Calcul 4",
            WorkflowStage.Failed => "Error",
            _ => stage.ToString()
        };
    }

    // Helper method to extract FluxFetchingId from step metadata
    private int TryGetFetchingId(string metadata)
    {
        try
        {
            // Deserialize the metadata JSON string
            var metadataObj = JsonSerializer.Deserialize<JsonElement>(metadata);

            // Try to get FluxFetchingId
            if (metadataObj.TryGetProperty("FluxFetchingId", out JsonElement idElement) &&
                idElement.TryGetInt32(out int id))
            {
                return id;
            }

            return 0;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error parsing metadata for fetching ID: {ex.Message}");
            return 0;
        }
    }

    // Helper method to extract FluxProcessId from step metadata
    private int TryGetProcessingId(string metadata)
    {
        try
        {
            // Deserialize the metadata JSON string
            var metadataObj = JsonSerializer.Deserialize<JsonElement>(metadata);

            // Try to get FluxProcessId
            if (metadataObj.TryGetProperty("FluxProcessId", out JsonElement idElement) &&
                idElement.TryGetInt32(out int id))
            {
                return id;
            }

            return 0;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error parsing metadata for processing ID: {ex.Message}");
            return 0;
        }
    }

    // Navigate to fetching details page
    private void NavigateToFetchingDetails(int fetchingId)
    {
        if (fetchingId > 0)
        {
            NavigationManager.NavigateTo($"/flux/fetching-details/{fetchingId}");
        }
        else
        {
            Snackbar.Add("Unable to get fetching ID from metadata", Severity.Warning);
        }
    }

    // Navigate to processing details page
    private void NavigateToProcessingDetails(int processingId)
    {
        if (processingId > 0)
        {
            NavigationManager.NavigateTo($"/flux/processing-details/{processingId}");
        }
        else
        {
            Snackbar.Add("Unable to get processing ID from metadata", Severity.Warning);
        }
    }

    // Force process a specific fetching data
    private async Task ForceProcessFetching(int fetchingId)
    {
        try
        {
            // Afficher un message avant de démarrer
            Snackbar.Add($"Starting force process for fetching ID {fetchingId}", Severity.Info);

            // Appeler l'API pour traiter l'élément
            var result = await MindApi.ForceProcessElementFetchBackgroundAsync(FluxId, fetchingId);

            // Afficher une notification de succès
            Snackbar.Add("Force process started in the background", Severity.Success);

            // Rafraîchir les données
            await RefreshData();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error forcing process: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private string FormatDuration(double seconds)
    {
        if (seconds < 1)
        {
            return $"{seconds * 1000:0}ms";
        }
        else if (seconds < 60)
        {
            return $"{seconds:0.0}s";
        }
        else if (seconds < 3600)
        {
            var minutes = Math.Floor(seconds / 60);
            var remainingSeconds = seconds % 60;
            return $"{minutes}m {remainingSeconds:0}s";
        }
        else
        {
            var hours = Math.Floor(seconds / 3600);
            var remainingMinutes = Math.Floor((seconds % 3600) / 60);
            return $"{hours}h {remainingMinutes}m";
        }
    }

    private async Task ForceProcess(HistoryEntryDto step)
    {
        try
        {
            // Vérifier si l'étape a un ActionId et si c'est une étape de type FetchingData
            if (step.ActionId.HasValue &&
                step.Stage == WorkflowStage.FetchingData &&
                step.IsCompleted)
            {
                var fetchingHistoryId = step.ActionId.Value;

                // Afficher un message avant de démarrer
                Snackbar.Add($"Starting force process for fetching ID {fetchingHistoryId}", Severity.Info);

                // Appeler l'API pour traiter l'élément
                var result = await MindApi.ForceProcessElementFetchBackgroundAsync(FluxId, fetchingHistoryId);

                // Afficher une notification de succès
                Snackbar.Add("Force process started in the background", Severity.Success);

                // Rafraîchir les données
                await RefreshData();
            }
            else
            {
                // Afficher un message si l'action n'est pas possible
                Snackbar.Add("This step cannot be processed - Either not a fetching step, already completed, or missing action ID", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error forcing process: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}

<style>
    .workflow-container {
        position: relative;
        width: 100%;
        min-height: 600px;
        overflow: auto;
        background-color: #f5f5f5;
        border-radius: 8px;
        padding: 20px;
    }

    .workflow-canvas {
        position: relative;
        width: 100%;
        height: 100%;
        min-height: 100%;
    }

    /* Diagram styles */
    .workflow-diagram {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        width: 100%;
    }

    .workflow-node-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 30px;
        position: relative;
    }

    .workflow-node {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 180px;
        max-width: 250px;
        text-align: center;
        border-left: 4px solid #ccc;
    }

    .workflow-node:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .node-content {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .node-header {
        margin-bottom: 8px;
    }

    .node-title {
        font-weight: bold;
        font-size: 1rem;
        margin-bottom: 8px;
        color: #333;
    }

    .node-actions {
        display: flex;
        justify-content: center;
        gap: 5px;
        margin: 5px 0;
    }

    .btn-quick {
        background: none;
        border: none;
        cursor: pointer;
        padding: 2px;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .btn-quick:hover {
        background-color: rgba(0,0,0,0.1);
        transform: scale(1.2);
    }

    .node-metrics {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        justify-content: center;
        margin-top: 5px;
    }

    /* Arrow connecting nodes */
    .arrow-down {
        height: 30px;
        width: 2px;
        background-color: #2196F3;
        margin: 5px 0;
        position: relative;
    }

    .arrow-down:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: -4px;
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 8px solid #2196F3;
    }

    /* Node children containment */
    .node-children {
        display: flex;
        justify-content: center;
        position: relative;
    }

    .single-child {
        flex-direction: column;
        align-items: center;
    }

    .multi-child {
        flex-direction: row;
        gap: 30px;
        width: 100%;
    }

    .child-branch {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .branch-container {
        width: 100%;
        height: 2px;
        background-color: #2196F3;
        margin-bottom: 20px;
        max-width: 300px;
    }

    /* Status classes for workflow nodes */
    .status-default {
        border-left-color: #ccc;
    }

    .status-info {
        border-left-color: #2196F3;
    }

    .status-success {
        border-left-color: #4CAF50;
    }

    .status-warning {
        border-left-color: #FFC107;
    }

    .status-error {
        border-left-color: #F44336;
    }

    .status-secondary {
        border-left-color: #9C27B0;
    }

    /* Status modifiers for completed vs in-progress */
    .node-completed {
        background-color: rgba(76, 175, 80, 0.1);
    }

    .node-inprogress {
        background-color: rgba(33, 150, 243, 0.05);
        border-style: dashed;
        border-width: 1px;
        border-right-width: 1px;
        border-top-width: 1px;
        border-bottom-width: 1px;
    }

    /* Badge styles */
    .badge {
        display: inline-block;
        padding: 2px 6px;
        border-radius: 12px;
        font-size: 0.75em;
        font-weight: bold;
        color: white;
    }

    .badge.success {
        background-color: #4CAF50;
    }

    .badge.info {
        background-color: #2196F3;
    }

    .badge.warning {
        background-color: #FFC107;
    }

    .badge.error {
        background-color: #F44336;
    }

    .badge.duration {
        background-color: #9C27B0;
        opacity: 0.7;
    }

    /* Make badges a bit more prominent on hover */
    .workflow-node:hover .badge {
        transform: scale(1.1);
        transition: transform 0.2s ease;
    }

    /* Drawer styles */
    .step-details-panel {
        position: fixed;
        right: 20px;
        top: 20px;
        width: 300px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
    }
</style>
