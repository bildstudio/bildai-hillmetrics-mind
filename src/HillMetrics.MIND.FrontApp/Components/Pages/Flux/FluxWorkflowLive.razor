@page "/flux/workflow-live/{FluxId:int}"
@page "/flux/workflow-live/{FluxId:int}/{WorkflowId:guid}"
@using HillMetrics.Core.Monitoring.Workflow
@using HillMetrics.Core.Workflow
@using HillMetrics.Core.Workflow.Models
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.MIND.API.SDK.V1
@using Microsoft.AspNetCore.SignalR.Client
@inject IMindAPI MindApi
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@attribute [Authorize]

<div class="workflow-container">
    <div class="d-flex align-center justify-space-between mb-4">
        <MudButton Variant="Variant.Text"
                  Color="Color.Primary"
                  StartIcon="@Icons.Material.Filled.ArrowBack"
                  OnClick="@(() => NavigationManager.NavigateTo("/flux/search"))">
            Back to Search
        </MudButton>

        @if (availableWorkflows.Count > 1)
        {
            <MudSelect T="Guid?" Label="Select Workflow" Value="selectedWorkflowId" ValueChanged="OnWorkflowSelectionChanged"
                      Class="ml-4" Style="min-width: 300px;">
                @foreach (var workflow in availableWorkflows)
                {
                    <MudSelectItem Value="@workflow.WorkflowId">
                        @($"Started: {workflow.StartTime.ToLocalTime():g}, Status: {workflow.CurrentStage}")
                    </MudSelectItem>
                }
            </MudSelect>
        }

        <MudButton Variant="Variant.Text"
                  Color="Color.Secondary"
                  StartIcon="@Icons.Material.Filled.Refresh"
                  OnClick="@RefreshData">
            Refresh
        </MudButton>
    </div>

    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6">Flux: @(WorkflowDetails?.FluxName ?? $"ID: {FluxId}")</MudText>
                @if (WorkflowDetails != null)
                {
                    <MudText Typo="Typo.body2">Status: <strong>@WorkflowDetails.CurrentStage</strong></MudText>
                    <MudText Typo="Typo.body2">Started: <strong>@WorkflowDetails.StartTime.ToLocalTime().ToString("g")</strong></MudText>
                    <MudText Typo="Typo.body2">Duration: <strong>@Math.Round(WorkflowDetails.DurationMinutes, 1) min</strong></MudText>
                    <MudText Typo="Typo.body2">WorkflowId: <strong>@WorkflowDetails.WorkflowId</strong></MudText>
                }
            </MudItem>
            <MudItem xs="12" md="6">
                <MudProgressLinear Color="@GetProgressColor(WorkflowDetails?.CurrentStage)"
                                  Value="@(WorkflowDetails?.ProgressPercentage ?? 0)"
                                  Class="my-4"
                                  Size="Size.Large" />
                <MudText Typo="Typo.body2" Align="Align.Center">
                    @(WorkflowDetails?.IsCompleted == true
                        ? (WorkflowDetails?.IsSuccessful == true ? "Completed successfully" : "Failed")
                        : "In progress...")
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <div class="workflow-canvas" @ref="canvasRef">
        @if (WorkflowDetails != null)
        {
            @foreach (var step in positionedSteps)
            {
                <div class="workflow-step @GetStepStatusClass(step.Stage)"
                     style="left: @(step.X)px; top: @(step.Y)px; width: 200px;"
                     @onclick="@(() => SelectStep(step))">
                    <div class="step-header">@step.Stage</div>
                    <div class="step-content">@step.Description</div>
                    <div class="step-timestamp">@step.Timestamp.ToLocalTime().ToString("g")</div>
                </div>
            }

            <svg class="workflow-connections">
                @for (int i = 0; i < positionedSteps.Count - 1; i++)
                {
                    var currentStep = positionedSteps[i];
                    var nextStep = positionedSteps[i + 1];

                    var fromX = currentStep.X + 200;
                    var fromY = currentStep.Y + 40;
                    var toX = nextStep.X;
                    var toY = nextStep.Y + 40;

                    var controlPoint1X = fromX + 50;
                    var controlPoint1Y = fromY;
                    var controlPoint2X = toX - 50;
                    var controlPoint2Y = toY;

                    <path d="M @fromX,@fromY C @controlPoint1X,@controlPoint1Y @controlPoint2X,@controlPoint2Y @toX,@toY"
                          fill="none" stroke="#888" stroke-width="2" />
                    <circle cx="@toX" cy="@toY" r="5" fill="#888" />
                }
            </svg>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </div>

    @if (SelectedStep != null)
    {
        <MudPaper Class="mt-4 pa-4">
            <MudText Typo="Typo.h6">Step Details</MudText>
            <MudList T="HistoryEntryDto" Dense="true">
                <MudListItem>
                    <MudText><b>Stage:</b> @SelectedStep.Stage</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText><b>Description:</b> @SelectedStep.Description</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText><b>Timestamp:</b> @SelectedStep.Timestamp.ToLocalTime().ToString("g")</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText><b>Time since start:</b> @Math.Round(SelectedStep.TimeSinceStart, 1) min</MudText>
                </MudListItem>

                @if (SelectedStep.RowsAdded > 0 || SelectedStep.RowsModified > 0 || SelectedStep.RowsIgnored > 0 || SelectedStep.RowsWithErrors > 0)
                {
                    <MudDivider Class="my-2" />
                    <MudListItem>
                        <MudText Typo="Typo.subtitle2">Data Metrics</MudText>
                    </MudListItem>

                    @if (SelectedStep.RowsAdded > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Success" Size="Size.Small" Class="mr-2">@SelectedStep.RowsAdded</MudChip>
                            <MudText>Records added</MudText>
                        </MudListItem>
                    }

                    @if (SelectedStep.RowsModified > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Primary" Size="Size.Small" Class="mr-2">@SelectedStep.RowsModified</MudChip>
                            <MudText>Records updated</MudText>
                        </MudListItem>
                    }

                    @if (SelectedStep.RowsIgnored > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Warning" Size="Size.Small" Class="mr-2">@SelectedStep.RowsIgnored</MudChip>
                            <MudText>Records ignored</MudText>
                        </MudListItem>
                    }

                    @if (SelectedStep.RowsWithErrors > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Error" Size="Size.Small" Class="mr-2">@SelectedStep.RowsWithErrors</MudChip>
                            <MudText>Records with errors</MudText>
                        </MudListItem>
                    }
                }
            </MudList>
        </MudPaper>
    }
</div>

@code {
    [Parameter] public int FluxId { get; set; }
    [Parameter] public Guid? WorkflowId { get; set; }

    private ElementReference canvasRef;
    private FluxWorkflowDetailsDto? WorkflowDetails { get; set; }
    private HistoryEntryDto? SelectedStep { get; set; }
    private HubConnection? hubConnection;
    private List<FluxWorkflowDetailsDto> availableWorkflows = new();
    private Guid? selectedWorkflowId;
    private List<PositionedHistoryEntry> positionedSteps = new();

    private class PositionedHistoryEntry : HistoryEntryDto
    {
        public double X { get; set; }
        public double Y { get; set; }

        public PositionedHistoryEntry(HistoryEntryDto entry, double x, double y)
        {
            // Copier toutes les propriétés
            Stage = entry.Stage;
            Description = entry.Description;
            Timestamp = entry.Timestamp;
            TimeSinceStart = entry.TimeSinceStart;
            RowsAdded = entry.RowsAdded;
            RowsModified = entry.RowsModified;
            RowsIgnored = entry.RowsIgnored;
            RowsWithErrors = entry.RowsWithErrors;
            X = x;
            Y = y;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        selectedWorkflowId = WorkflowId;
        await SetupSignalRConnection();
        await RefreshData();
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/workflow-hub"))
                .WithAutomaticReconnect()
                .Build();

            // Enregistrement des handlers pour les notifications reçues du hub
            hubConnection.On<WorkflowStateModel>("ReceiveFluxDetails", OnWorkflowUpdated);
            hubConnection.On<List<WorkflowStateModel>>("ReceiveActiveFluxes", OnActiveFluxesUpdated);
            hubConnection.On<List<WorkflowStateModel>>("ReceiveCompletedFluxes", OnCompletedFluxesUpdated);
            hubConnection.On<int, string, WorkflowStage, string>("ReceiveFluxStageUpdate", OnFluxStageUpdated);
            hubConnection.On<int, string, string>("ReceiveFluxError", OnFluxErrorReceived);

            // Démarrer la connexion
            await hubConnection.StartAsync();
            Console.WriteLine($"SignalR connection started for flux {FluxId}");

            // S'abonner aux mises à jour pour ce flux spécifique
            await hubConnection.InvokeAsync("subscribeToFlux", FluxId);
            Console.WriteLine($"Subscribed to flux {FluxId}");

            // Si un WorkflowId est spécifié, s'abonner également à ce workflow
            if (WorkflowId.HasValue)
            {
                await hubConnection.InvokeAsync("subscribeToWorkflow", WorkflowId.Value);
                Console.WriteLine($"Subscribed to workflow {WorkflowId.Value}");

                // Récupérer immédiatement les détails du workflow
                await hubConnection.InvokeAsync("getWorkflowById", WorkflowId.Value);
            }

            // Récupérer la liste des workflows disponibles pour ce flux
            await hubConnection.InvokeAsync("getWorkflowsForFlux", FluxId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up SignalR connection: {ex.Message}");
            // Fallback à l'API REST en cas d'erreur de connexion SignalR
            await RefreshDataFromApi();
        }
    }

    private void OnWorkflowUpdated(WorkflowStateModel workflowState)
    {
        // Only update if this is the currently selected workflow or we're looking at the flux broadly
        if (!selectedWorkflowId.HasValue || (workflowState.WorkflowId == selectedWorkflowId))
        {
            MapWorkflowStateToDetails(workflowState);
            PositionWorkflowSteps();
            StateHasChanged();
        }
    }

    private void OnActiveFluxesUpdated(List<WorkflowStateModel> fluxes)
    {
        // Filter to get workflows related to our FluxId
        var relevantWorkflows = fluxes.Where(f => f.FluxId == FluxId).ToList();
        UpdateAvailableWorkflows(relevantWorkflows);
    }

    private void OnCompletedFluxesUpdated(List<WorkflowStateModel> fluxes)
    {
        // Filter to get workflows related to our FluxId
        var relevantWorkflows = fluxes.Where(f => f.FluxId == FluxId).ToList();
        UpdateAvailableWorkflows(relevantWorkflows);
    }

    private void OnFluxStageUpdated(int fluxId, string fluxName, WorkflowStage stage, string description)
    {
        // Si cette mise à jour concerne notre flux en cours de visualisation
        if (fluxId == FluxId)
        {
            Console.WriteLine($"Flux {fluxId} stage updated: {stage} - {description}");

            // Si nous suivons un workflow spécifique
            if (selectedWorkflowId.HasValue)
            {
                // Requête pour obtenir les détails à jour du workflow spécifique
                _ = hubConnection?.InvokeAsync("getWorkflowById", selectedWorkflowId.Value);
            }
            else
            {
                // Sinon, demander les détails du flux globalement
                _ = hubConnection?.InvokeAsync("getFluxDetails", FluxId);
            }

            // Rafraîchir la liste des workflows disponibles
            _ = hubConnection?.InvokeAsync("getWorkflowsForFlux", FluxId);

            // Forcer le rafraîchissement de l'interface
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnFluxErrorReceived(int fluxId, string fluxName, string errorMessage)
    {
        // If this error is for our specific flux, show some notification or update the UI
        if (fluxId == FluxId)
        {
            // Request updated details
            if (selectedWorkflowId.HasValue)
            {
                _ = hubConnection?.InvokeAsync("getWorkflowById", selectedWorkflowId.Value);
            }
            else
            {
                _ = hubConnection?.InvokeAsync("getFluxDetails", FluxId);
            }
        }
    }

    private void UpdateAvailableWorkflows(List<WorkflowStateModel> newWorkflows)
    {
        // Convertir les WorkflowStateModel en FluxWorkflowDetailsDto
        foreach (var workflowState in newWorkflows)
        {
            var workflowDto = MapToFluxWorkflowDetailsDto(workflowState);

            // Vérifier si ce workflow existe déjà dans notre liste
            var existingIndex = availableWorkflows.FindIndex(w => w.WorkflowId == workflowDto.WorkflowId);
            if (existingIndex >= 0)
            {
                // Remplacer l'existant
                availableWorkflows[existingIndex] = workflowDto;
            }
            else
            {
                // Ajouter le nouveau
                availableWorkflows.Add(workflowDto);
            }
        }

        // Trier par date de début (le plus récent en premier)
        availableWorkflows = availableWorkflows
            .OrderByDescending(w => w.StartTime)
            .ToList();

        // Si aucun workflow n'est sélectionné, sélectionner le plus récent
        if ((!selectedWorkflowId.HasValue || !availableWorkflows.Any(w => w.WorkflowId == selectedWorkflowId))
            && availableWorkflows.Any())
        {
            selectedWorkflowId = availableWorkflows.First().WorkflowId;
            OnWorkflowSelectionChanged(selectedWorkflowId);
        }

        StateHasChanged();
    }

    private async Task OnWorkflowSelectionChanged(Guid? workflowId)
    {
        selectedWorkflowId = workflowId;

        // Mettre à jour l'URL pour refléter le workflow sélectionné
        if (workflowId.HasValue)
        {
            NavigationManager.NavigateTo($"/flux/workflow-live/{FluxId}/{workflowId}", false);

            // Se désabonner du workflow précédent si nécessaire
            if (WorkflowId.HasValue && WorkflowId.Value != workflowId.Value)
            {
                await hubConnection?.InvokeAsync("unsubscribeFromWorkflow", WorkflowId.Value);
                Console.WriteLine($"Unsubscribed from workflow {WorkflowId.Value}");
            }

            // S'abonner au nouveau workflow
            await hubConnection?.InvokeAsync("subscribeToWorkflow", workflowId.Value);
            Console.WriteLine($"Subscribed to workflow {workflowId.Value}");

            // Demander les détails de ce workflow
            await hubConnection?.InvokeAsync("getWorkflowById", workflowId.Value);
        }
        else
        {
            NavigationManager.NavigateTo($"/flux/workflow-live/{FluxId}", false);

            // Si on désélectionne un workflow spécifique, récupérer les détails généraux du flux
            await hubConnection?.InvokeAsync("getFluxDetails", FluxId);
        }

        WorkflowId = workflowId;
    }

    private async Task RefreshData()
    {
        try
        {
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                Console.WriteLine("Refreshing data via SignalR connection");

                // Demander les données via SignalR
                await hubConnection.InvokeAsync("getWorkflowsForFlux", FluxId);

                if (selectedWorkflowId.HasValue)
                {
                    await hubConnection.InvokeAsync("getWorkflowById", selectedWorkflowId.Value);
                }
                else
                {
                    await hubConnection.InvokeAsync("getFluxDetails", FluxId);
                }
                return;
            }

            // Fallback API si SignalR n'est pas disponible
            Console.WriteLine("Refreshing data via API (SignalR not available)");
            await RefreshDataFromApi();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing workflow data: {ex.Message}");
            await RefreshDataFromApi();
        }
    }

    private async Task RefreshDataFromApi()
    {
        try
        {
            if (selectedWorkflowId.HasValue)
            {
                // Récupérer les détails du workflow spécifique
                var response = await MindApi.GetWorkflowByIdAsync(selectedWorkflowId.Value);
                if (response?.Data != null)
                {
                    WorkflowDetails = response.Data;
                    PositionWorkflowSteps();
                }
            }
            else
            {
                // Récupérer les détails globaux du flux
                var response = await MindApi.GetFluxWorkflowDetailsAsync(FluxId);
                if (response?.Data != null)
                {
                    WorkflowDetails = response.Data;
                    PositionWorkflowSteps();
                }
            }

            // Récupérer aussi les workflows actifs et complétés
            var activeResponse = await MindApi.GetActiveFluxesAsync();
            if (activeResponse?.Data != null)
            {
                var relevantWorkflows = activeResponse.Data
                    .Where(f => f.FluxId == FluxId)
                    .ToList();

                // Convertir en FluxWorkflowDetailsDto et mettre à jour la liste
                foreach (var flux in relevantWorkflows)
                {
                    var dto = new FluxWorkflowDetailsDto
                    {
                        FluxId = flux.FluxId,
                        FluxName = flux.FluxName,
                        CurrentStage = flux.Stage,
                        StartTime = flux.StartTime,
                        LastUpdateTime = flux.LastUpdateTime,
                        DurationMinutes = flux.DurationMinutes,
                        ProgressPercentage = flux.ProgressPercentage
                    };

                    // Ajouter ou mettre à jour dans la liste
                    var existingIndex = availableWorkflows.FindIndex(w => w.WorkflowId == dto.WorkflowId);
                    if (existingIndex >= 0)
                    {
                        availableWorkflows[existingIndex] = dto;
                    }
                    else
                    {
                        availableWorkflows.Add(dto);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing data from API: {ex.Message}");
        }
    }

    private void MapWorkflowStateToDetails(WorkflowStateModel state)
    {
        WorkflowDetails = MapToFluxWorkflowDetailsDto(state);
    }

    private FluxWorkflowDetailsDto MapToFluxWorkflowDetailsDto(WorkflowStateModel state)
    {
        // Convertir WorkflowStateModel en FluxWorkflowDetailsDto
        return new FluxWorkflowDetailsDto
        {
            WorkflowId = state.WorkflowId,
            FluxId = state.FluxId,
            FluxName = state.FluxName,
            CurrentStage = state.CurrentStage.ToString(),
            StageDetails = state.Steps.LastOrDefault()?.Description,
            StartTime = state.StartTime,
            LastUpdateTime = state.LastUpdateTime,
            EndTime = state.EndTime,
            DurationMinutes = state.Duration.TotalMinutes,
            ProgressPercentage = state.ProgressPercentage,
            IsCompleted = state.IsCompleted,
            IsSuccessful = state.IsSuccessful,
            History = state.Steps.Select(s => new HistoryEntryDto
            {
                Stage = s.Stage.ToString(),
                Description = s.Description,
                Timestamp = s.Timestamp,
                TimeSinceStart = (s.Timestamp - state.StartTime).TotalMinutes,
                RowsAdded = s.LinesAdded,
                RowsModified = s.LinesModified,
                RowsIgnored = s.LinesIgnored,
                RowsWithErrors = s.LinesWithErrors
            }).ToList()
        };
    }

    private void PositionWorkflowSteps()
    {
        if (WorkflowDetails?.History == null) return;

        // Calculer la position de chaque étape du workflow
        var horizontalSpacing = 250;
        var verticalSpacing = 150;
        var steps = WorkflowDetails.History.OrderBy(h => h.Timestamp).ToList();

        positionedSteps.Clear();
        for (int i = 0; i < steps.Count; i++)
        {
            positionedSteps.Add(new PositionedHistoryEntry(
                steps[i],
                i * horizontalSpacing,
                (i % 2) * verticalSpacing
            ));
        }
    }

    private string GetStepStatusClass(string stage)
    {
        return stage.ToLowerInvariant() switch
        {
            var s when s.Contains("fail") => "status-error",
            var s when s.Contains("completed") => "status-success",
            var s when s.Contains("processing") => "status-warning",
            var s when s.Contains("fetching") => "status-info",
            var s when s.Contains("insert") => "status-secondary",
            var s when s.Contains("calculation") => "status-tertiary",
            _ => "status-default"
        };
    }

    private Color GetProgressColor(string? stage)
    {
        if (string.IsNullOrEmpty(stage)) return Color.Default;

        return stage.ToLowerInvariant() switch
        {
            var s when s.Contains("fail") => Color.Error,
            var s when s.Contains("completed") => Color.Success,
            var s when s.Contains("processing") => Color.Info,
            _ => Color.Primary
        };
    }

    private void SelectStep(HistoryEntryDto step)
    {
        SelectedStep = step;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
    .workflow-container {
        position: relative;
        width: 100%;
        height: 600px;
        overflow: auto;
        background-color: #f5f5f5;
        border-radius: 8px;
        padding: 20px;
    }

    .workflow-canvas {
        position: relative;
        width: 100%;
        height: 100%;
        min-height: 100%;
    }

    .workflow-step {
        position: absolute;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .workflow-step:hover {
        transform: scale(1.02);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .step-header {
        font-weight: bold;
        margin-bottom: 8px;
        color: #333;
    }

    .step-content {
        font-size: 0.9em;
        color: #666;
        margin-bottom: 8px;
    }

    .step-timestamp {
        font-size: 0.8em;
        color: #999;
    }

    .workflow-connections {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }

    .step-details-panel {
        position: fixed;
        right: 20px;
        top: 20px;
        width: 300px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
    }

    .status-default { border-left: 4px solid #ccc; }
    .status-info { border-left: 4px solid #2196F3; }
    .status-success { border-left: 4px solid #4CAF50; }
    .status-warning { border-left: 4px solid #FFC107; }
    .status-error { border-left: 4px solid #F44336; }
    .status-secondary { border-left: 4px solid #9C27B0; }
    .status-tertiary { border-left: 4px solid #FF9800; }
</style>