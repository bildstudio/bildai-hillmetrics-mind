@page "/flux/workflow-live/{FluxId:int}"
@page "/flux/workflow-live/{FluxId:int}/{WorkflowId:guid}"
@using HillMetrics.Core.Monitoring.Workflow
@using HillMetrics.Core.Workflow
@using HillMetrics.Core.Workflow.Models
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.MIND.API.SDK.V1
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using HillMetrics.Core.Authentication.Contracts
@inject IMindAPI MindApi
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject IConfiguration Configuration
@inject IAuthenticationService AuthService
@implements IAsyncDisposable
@attribute [Authorize]

<div class="workflow-container">
    <div class="d-flex align-center justify-space-between mb-4">
        <MudButton Variant="Variant.Text"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="@(() => NavigationManager.NavigateTo("/flux/search"))">
            Back to Search
        </MudButton>

        @if (availableWorkflows.Count > 1)
        {
            <MudSelect T="Guid?" Label="Select Workflow" Value="selectedWorkflowId" ValueChanged="OnWorkflowSelectionChanged"
                       Class="ml-4" Style="min-width: 300px;">
                @foreach (var workflow in availableWorkflows)
                {
                    <MudSelectItem Value="@workflow.WorkflowId">
                        @($"Started: {workflow.StartTime.ToLocalTime():g}, Status: {workflow.CurrentStage}")
                    </MudSelectItem>
                }
            </MudSelect>
        }

        <MudButton Variant="Variant.Text"
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.Refresh"
                   OnClick="@RefreshData">
            Refresh
        </MudButton>
    </div>

    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6">Flux: @(WorkflowDetails?.FluxName ?? $"ID: {FluxId}")</MudText>
                @if (WorkflowDetails != null)
                {
                    <MudText Typo="Typo.body2">Status: <strong>@WorkflowDetails.CurrentStage</strong></MudText>
                    <MudText Typo="Typo.body2">Started: <strong>@WorkflowDetails.StartTime.ToLocalTime().ToString("g")</strong></MudText>
                    <MudText Typo="Typo.body2">Duration: <strong>@Math.Round(WorkflowDetails.DurationMinutes, 1) min</strong></MudText>
                    <MudText Typo="Typo.body2">WorkflowId: <strong>@WorkflowDetails.WorkflowId</strong></MudText>
                }
            </MudItem>
            <MudItem xs="12" md="6">
                <MudProgressLinear Color="@GetProgressColor(WorkflowDetails?.CurrentStage)"
                                   Value="@(WorkflowDetails?.ProgressPercentage ?? 0)"
                                   Class="my-4"
                                   Size="Size.Large" />
                <MudText Typo="Typo.body2" Align="Align.Center">
                    @(WorkflowDetails?.IsCompleted == true
                        ? (WorkflowDetails?.IsSuccessful == true ? "Completed successfully" : "Failed")
                        : "In progress...")
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <div class="workflow-canvas" @ref="canvasRef">
        @if (WorkflowDetails != null)
        {
            @foreach (var step in positionedSteps)
            {
                <div class="workflow-step @GetStepStatusClass(step.Stage)"
                     style="left: @(step.X)px; top: @(step.Y)px; width: 200px;"
                     @onclick="@(() => SelectStep(step))">
                    <div class="step-header">@step.Stage</div>
                    <div class="step-content">@step.Description</div>
                    <div class="step-timestamp">@step.Timestamp.ToLocalTime().ToString("g")</div>
                </div>
            }

            <svg class="workflow-connections">
                @for (int i = 0; i < positionedSteps.Count - 1; i++)
                {
                    var currentStep = positionedSteps[i];
                    var nextStep = positionedSteps[i + 1];

                    var fromX = currentStep.X + 200;
                    var fromY = currentStep.Y + 40;
                    var toX = nextStep.X;
                    var toY = nextStep.Y + 40;

                    var controlPoint1X = fromX + 50;
                    var controlPoint1Y = fromY;
                    var controlPoint2X = toX - 50;
                    var controlPoint2Y = toY;

                    <path d="M @fromX,@fromY C @controlPoint1X,@controlPoint1Y @controlPoint2X,@controlPoint2Y @toX,@toY"
                          fill="none" stroke="#888" stroke-width="2" />
                    <circle cx="@toX" cy="@toY" r="5" fill="#888" />
                }
            </svg>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </div>

    @if (SelectedStep != null)
    {
        <MudPaper Class="mt-4 pa-4">
            <MudText Typo="Typo.h6">Step Details</MudText>
            <MudList T="HistoryEntryDto" Dense="true">
                <MudListItem>
                    <MudText><b>Stage:</b> @SelectedStep.Stage</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText><b>Description:</b> @SelectedStep.Description</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText><b>Timestamp:</b> @SelectedStep.Timestamp.ToLocalTime().ToString("g")</MudText>
                </MudListItem>
                <MudListItem>
                    <MudText><b>Time since start:</b> @Math.Round(SelectedStep.TimeSinceStart, 1) min</MudText>
                </MudListItem>

                @if (SelectedStep.RowsAdded > 0 || SelectedStep.RowsModified > 0 || SelectedStep.RowsIgnored > 0 || SelectedStep.RowsWithErrors > 0)
                {
                    <MudDivider Class="my-2" />
                    <MudListItem>
                        <MudText Typo="Typo.subtitle2">Data Metrics</MudText>
                    </MudListItem>

                    @if (SelectedStep.RowsAdded > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Success" Size="Size.Small" Class="mr-2">@SelectedStep.RowsAdded</MudChip>
                            <MudText>Records added</MudText>
                        </MudListItem>
                    }

                    @if (SelectedStep.RowsModified > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Primary" Size="Size.Small" Class="mr-2">@SelectedStep.RowsModified</MudChip>
                            <MudText>Records updated</MudText>
                        </MudListItem>
                    }

                    @if (SelectedStep.RowsIgnored > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Warning" Size="Size.Small" Class="mr-2">@SelectedStep.RowsIgnored</MudChip>
                            <MudText>Records ignored</MudText>
                        </MudListItem>
                    }

                    @if (SelectedStep.RowsWithErrors > 0)
                    {
                        <MudListItem>
                            <MudChip Color="Color.Error" Size="Size.Small" Class="mr-2">@SelectedStep.RowsWithErrors</MudChip>
                            <MudText>Records with errors</MudText>
                        </MudListItem>
                    }
                }
            </MudList>
        </MudPaper>
    }
</div>

@code {
    [Parameter] public int FluxId { get; set; }
    [Parameter] public Guid? WorkflowId { get; set; }

    private ElementReference canvasRef;
    private FluxWorkflowDetailsDto? WorkflowDetails { get; set; }
    private HistoryEntryDto? SelectedStep { get; set; }
    private HubConnection? hubConnection;
    private List<FluxWorkflowDetailsDto> availableWorkflows = new();
    private Guid? selectedWorkflowId;
    private List<PositionedHistoryEntry> positionedSteps = new();
    private string? signalRServiceUrl;

    private class PositionedHistoryEntry : HistoryEntryDto
    {
        public double X { get; set; }
        public double Y { get; set; }

        public PositionedHistoryEntry(HistoryEntryDto entry, double x, double y)
        {
            // Copier toutes les propriétés
            Stage = entry.Stage;
            Description = entry.Description;
            Timestamp = entry.Timestamp;
            TimeSinceStart = entry.TimeSinceStart;
            RowsAdded = entry.RowsAdded;
            RowsModified = entry.RowsModified;
            RowsIgnored = entry.RowsIgnored;
            RowsWithErrors = entry.RowsWithErrors;
            X = x;
            Y = y;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        selectedWorkflowId = WorkflowId;

        // Récupérer l'URL du service SignalR depuis la configuration ou service discovery
        await GetSignalRServiceUrl();

        await SetupSignalRConnection();
        await RefreshData();
    }

    private async Task GetSignalRServiceUrl()
    {
        try
        {
            // Tenter de récupérer l'URL du service SignalR depuis la configuration
            signalRServiceUrl = Configuration["Services:SignalR:BaseUrl"];

            if (string.IsNullOrEmpty(signalRServiceUrl))
            {
                // Utiliser une URL par défaut si non trouvée dans la configuration
                signalRServiceUrl = "https://localhost:8080";
                Console.WriteLine($"Using default SignalR service URL: {signalRServiceUrl}");
            }
            else
            {
                Console.WriteLine($"Found SignalR service URL in configuration: {signalRServiceUrl}");
            }

            // Vérifier si l'URL se termine par un slash
            if (!signalRServiceUrl.EndsWith("/"))
            {
                signalRServiceUrl += "/";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting SignalR service URL: {ex.Message}");
            // Fallback sur une URL par défaut en cas d'erreur
            signalRServiceUrl = "https://localhost:8080/";
        }
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            Console.WriteLine($"Connecting to SignalR hub at: {signalRServiceUrl}notification-hub");

            // Récupérer un jeton d'accès pour l'authentification
            var accessToken = await GetAccessTokenAsync();

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{signalRServiceUrl}notification-hub", options =>
                {
                    // Ajouter le jeton d'accès comme en-tête d'autorisation
                    options.AccessTokenProvider = () => Task.FromResult(accessToken);

                    // Configurer d'autres options si nécessaire
                    options.SkipNegotiation = false;
                    options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
                })
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) })
                .Build();

            // S'abonner aux messages de notification
            hubConnection.On<object>("onTopicNotification", (message) =>
            {
                // Cette méthode est appelée lorsqu'un message est reçu sur un topic
                ProcessWorkflowMessage(message);
            });

            // Démarrer la connexion
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started successfully");

            // S'abonner au topic "workflow" pour recevoir les mises à jour de workflow
            await hubConnection.InvokeAsync("Subscribe", "workflow");
            Console.WriteLine("Subscribed to 'workflow' topic");

            // Forcer le rafraîchissement initial des données via l'API
            await RefreshDataFromApi();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up SignalR connection: {ex.Message}");
            // Fallback à l'API REST en cas d'erreur de connexion SignalR
            await RefreshDataFromApi();
        }
    }

    private async Task<string> GetAccessTokenAsync()
    {
        try
        {
            // Utiliser le service d'authentification injecté pour obtenir le jeton
            var token = ""; // await AuthService.GetAccessTokenAsync();

            if (!string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Retrieved token from AuthenticationService");
                return token;
            }

            // Option de secours : Utiliser JSRuntime pour récupérer le jeton stocké côté client
            token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "auth_token");

            if (!string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Retrieved token from localStorage");
                return token;
            }

            // Si aucun jeton n'est trouvé, renvoyer null ou une chaîne vide
            Console.WriteLine("No access token found");
            return string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting access token: {ex.Message}");
            return string.Empty;
        }
    }

    private void ProcessWorkflowMessage(object message)
    {
        try
        {
            // Convertir le message en JSON pour faciliter l'extraction des propriétés
            var json = System.Text.Json.JsonSerializer.Serialize(message);
            var jsonDoc = System.Text.Json.JsonDocument.Parse(json);

            // Tenter d'extraire les informations pertinentes du message
            if (jsonDoc.RootElement.TryGetProperty("Value", out var valueElement))
            {
                // Extraire les propriétés importantes
                if (valueElement.TryGetProperty("FluxId", out var fluxIdElement) &&
                    int.TryParse(fluxIdElement.ToString(), out var fluxId))
                {
                    // Vérifier si ce message concerne notre flux actuel
                    if (fluxId == FluxId)
                    {
                        Console.WriteLine($"Received workflow update for flux {fluxId}");

                        // Si un WorkflowId est présent, l'extraire
                        Guid? workflowId = null;
                        if (valueElement.TryGetProperty("WorkflowId", out var workflowIdElement) &&
                            Guid.TryParse(workflowIdElement.ToString(), out var parsedWorkflowId))
                        {
                            workflowId = parsedWorkflowId;
                            Console.WriteLine($"Message contains WorkflowId: {workflowId}");
                        }

                        // Si le message a un indicateur d'erreur
                        bool isError = false;
                        if (valueElement.TryGetProperty("IsError", out var isErrorElement))
                        {
                            isError = isErrorElement.GetBoolean();
                        }

                        // Déclencher un rafraîchissement des données basé sur le message reçu
                        InvokeAsync(async () =>
                        {
                            // Si le message contient un WorkflowId spécifique et qu'il correspond à notre sélection actuelle
                            if (workflowId.HasValue &&
                                (selectedWorkflowId == null || selectedWorkflowId.Value == workflowId.Value))
                            {
                                // Mettre à jour ce workflow spécifique
                                await RefreshDataFromApi();
                            }
                            else
                            {
                                // Sinon rafraîchir toutes les données
                                await RefreshDataFromApi();
                            }

                            StateHasChanged();
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing workflow message: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        try
        {
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                Console.WriteLine("Refreshing data via SignalR connection");

                // Demander les données via SignalR
                await hubConnection.InvokeAsync("getWorkflowsForFlux", FluxId);

                if (selectedWorkflowId.HasValue)
                {
                    await hubConnection.InvokeAsync("getWorkflowById", selectedWorkflowId.Value);
                }
                else
                {
                    await hubConnection.InvokeAsync("getFluxDetails", FluxId);
                }
                return;
            }

            // Fallback API si SignalR n'est pas disponible
            Console.WriteLine("Refreshing data via API (SignalR not available)");
            await RefreshDataFromApi();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing workflow data: {ex.Message}");
            await RefreshDataFromApi();
        }
    }

    private async Task RefreshDataFromApi()
    {
        try
        {
            if (selectedWorkflowId.HasValue)
            {
                // Récupérer les détails du workflow spécifique
                var response = await MindApi.GetWorkflowByIdAsync(selectedWorkflowId.Value);
                if (response?.Data != null)
                {
                    WorkflowDetails = response.Data;
                    PositionWorkflowSteps();
                }
            }
            else
            {
                // Récupérer les détails globaux du flux
                var response = await MindApi.GetFluxWorkflowDetailsAsync(FluxId);
                if (response?.Data != null)
                {
                    WorkflowDetails = response.Data;
                    PositionWorkflowSteps();
                }
            }

            // Récupérer aussi les workflows actifs et complétés
            var activeResponse = await MindApi.GetActiveFluxesAsync();
            if (activeResponse?.Data != null)
            {
                var relevantWorkflows = activeResponse.Data
                    .Where(f => f.FluxId == FluxId)
                    .ToList();

                // Convertir en FluxWorkflowDetailsDto et mettre à jour la liste
                foreach (var flux in relevantWorkflows)
                {
                    var dto = new FluxWorkflowDetailsDto
                        {
                            FluxId = flux.FluxId,
                            FluxName = flux.FluxName,
                            CurrentStage = flux.Stage,
                            StartTime = flux.StartTime,
                            LastUpdateTime = flux.LastUpdateTime,
                            DurationMinutes = flux.DurationMinutes,
                            ProgressPercentage = flux.ProgressPercentage
                        };

                    // Ajouter ou mettre à jour dans la liste
                    var existingIndex = availableWorkflows.FindIndex(w => w.WorkflowId == dto.WorkflowId);
                    if (existingIndex >= 0)
                    {
                        availableWorkflows[existingIndex] = dto;
                    }
                    else
                    {
                        availableWorkflows.Add(dto);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing data from API: {ex.Message}");
        }
    }

    private void MapWorkflowStateToDetails(WorkflowStateModel state)
    {
        WorkflowDetails = MapToFluxWorkflowDetailsDto(state);
    }

    private FluxWorkflowDetailsDto MapToFluxWorkflowDetailsDto(WorkflowStateModel state)
    {
        // Convertir WorkflowStateModel en FluxWorkflowDetailsDto
        return new FluxWorkflowDetailsDto
            {
                WorkflowId = state.WorkflowId,
                FluxId = state.FluxId,
                FluxName = state.FluxName,
                CurrentStage = state.CurrentStage.ToString(),
                StageDetails = state.Steps.LastOrDefault()?.Description,
                StartTime = state.StartTime,
                LastUpdateTime = state.LastUpdateTime,
                EndTime = state.EndTime,
                DurationMinutes = state.Duration.TotalMinutes,
                ProgressPercentage = state.ProgressPercentage,
                IsCompleted = state.IsCompleted,
                IsSuccessful = state.IsSuccessful,
                History = state.Steps.Select(s => new HistoryEntryDto
                {
                    Stage = s.Stage.ToString(),
                    Description = s.Description,
                    Timestamp = s.Timestamp,
                    TimeSinceStart = (s.Timestamp - state.StartTime).TotalMinutes,
                    RowsAdded = s.LinesAdded,
                    RowsModified = s.LinesModified,
                    RowsIgnored = s.LinesIgnored,
                    RowsWithErrors = s.LinesWithErrors
                }).ToList()
            };
    }

    private void PositionWorkflowSteps()
    {
        if (WorkflowDetails?.History == null) return;

        // Calculer la position de chaque étape du workflow
        var horizontalSpacing = 250;
        var verticalSpacing = 150;
        var steps = WorkflowDetails.History.OrderBy(h => h.Timestamp).ToList();

        positionedSteps.Clear();
        for (int i = 0; i < steps.Count; i++)
        {
            positionedSteps.Add(new PositionedHistoryEntry(
                steps[i],
                i * horizontalSpacing,
                (i % 2) * verticalSpacing
            ));
        }
    }

    private string GetStepStatusClass(string stage)
    {
        return stage.ToLowerInvariant() switch
        {
            var s when s.Contains("fail") => "status-error",
            var s when s.Contains("completed") => "status-success",
            var s when s.Contains("processing") => "status-warning",
            var s when s.Contains("fetching") => "status-info",
            var s when s.Contains("insert") => "status-secondary",
            var s when s.Contains("calculation") => "status-tertiary",
            _ => "status-default"
        };
    }

    private Color GetProgressColor(string? stage)
    {
        if (string.IsNullOrEmpty(stage)) return Color.Default;

        return stage.ToLowerInvariant() switch
        {
            var s when s.Contains("fail") => Color.Error,
            var s when s.Contains("completed") => Color.Success,
            var s when s.Contains("processing") => Color.Info,
            _ => Color.Primary
        };
    }

    private void SelectStep(HistoryEntryDto step)
    {
        SelectedStep = step;
    }

    private async Task OnWorkflowSelectionChanged(Guid? workflowId)
    {
        selectedWorkflowId = workflowId;

        // Mettre à jour l'URL pour refléter le workflow sélectionné
        if (workflowId.HasValue)
        {
            NavigationManager.NavigateTo($"/flux/workflow-live/{FluxId}/{workflowId}", false);

            // Mise à jour du paramètre WorkflowId
            WorkflowId = workflowId;

            // Rafraîchir les données pour ce workflow spécifique
            await RefreshSpecificWorkflow(workflowId.Value);
        }
        else
        {
            NavigationManager.NavigateTo($"/flux/workflow-live/{FluxId}", false);
            WorkflowId = null;

            // Rafraîchir les données générales du flux
            await RefreshFluxData();
        }
    }

    private async Task RefreshSpecificWorkflow(Guid workflowId)
    {
        try
        {
            // Récupérer les détails du workflow spécifique
            var response = await MindApi.GetWorkflowByIdAsync(workflowId);
            if (response?.Data != null)
            {
                WorkflowDetails = response.Data;
                PositionWorkflowSteps();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing specific workflow {workflowId}: {ex.Message}");
        }
    }

    private async Task RefreshFluxData()
    {
        try
        {
            // Récupérer les détails globaux du flux
            var response = await MindApi.GetFluxWorkflowDetailsAsync(FluxId);
            if (response?.Data != null)
            {
                WorkflowDetails = response.Data;
                PositionWorkflowSteps();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing flux data for FluxId {FluxId}: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            // Se désabonner du topic avant de fermer la connexion
            try
            {
                if (hubConnection.State == HubConnectionState.Connected)
                {
                    await hubConnection.InvokeAsync("Unsubscribe", "workflow");
                    Console.WriteLine("Unsubscribed from 'workflow' topic");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error unsubscribing from topic: {ex.Message}");
            }

            await hubConnection.DisposeAsync();
        }
    }
}

<style>
    .workflow-container {
        position: relative;
        width: 100%;
        height: 600px;
        overflow: auto;
        background-color: #f5f5f5;
        border-radius: 8px;
        padding: 20px;
    }

    .workflow-canvas {
        position: relative;
        width: 100%;
        height: 100%;
        min-height: 100%;
    }

    .workflow-step {
        position: absolute;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .workflow-step:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

    .step-header {
        font-weight: bold;
        margin-bottom: 8px;
        color: #333;
    }

    .step-content {
        font-size: 0.9em;
        color: #666;
        margin-bottom: 8px;
    }

    .step-timestamp {
        font-size: 0.8em;
        color: #999;
    }

    .workflow-connections {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }

    .step-details-panel {
        position: fixed;
        right: 20px;
        top: 20px;
        width: 300px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
    }

    .status-default {
        border-left: 4px solid #ccc;
    }

    .status-info {
        border-left: 4px solid #2196F3;
    }

    .status-success {
        border-left: 4px solid #4CAF50;
    }

    .status-warning {
        border-left: 4px solid #FFC107;
    }

    .status-error {
        border-left: 4px solid #F44336;
    }

    .status-secondary {
        border-left: 4px solid #9C27B0;
    }

    .status-tertiary {
        border-left: 4px solid #FF9800;
    }
</style>
