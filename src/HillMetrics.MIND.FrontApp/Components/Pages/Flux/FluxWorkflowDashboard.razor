@page "/flux/workflow-dashboard"
@using System.Net.Http.Json
@using HillMetrics.Core.Monitoring.Workflow
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.MIND.API.SDK.V1
@inject IMindAPI MindApi
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Financial Workflow Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Financial Workflow Dashboard</MudText>

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               OnClick="RefreshData"
               StartIcon="@Icons.Material.Filled.Refresh"
               Class="mb-4">
        Refresh
    </MudButton>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.HourglassTop" Color="Color.Info" Size="Size.Large" />
                        <MudText Typo="Typo.h5">Active Fluxes</MudText>
                        <MudText Typo="Typo.h3" Align="Align.Center">@(summary?.ActiveFluxCount ?? 0)</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                        <MudText Typo="Typo.h5">Successful</MudText>
                        <MudText Typo="Typo.h3" Align="Align.Center">@(summary?.SuccessfulCompletions ?? 0)</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" />
                        <MudText Typo="Typo.h5">Failed</MudText>
                        <MudText Typo="Typo.h3" Align="Align.Center">@(summary?.FailedCompletions ?? 0)</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudStack>
                        <MudIcon Icon="@Icons.Material.Filled.Timer" Color="Color.Warning" Size="Size.Large" />
                        <MudText Typo="Typo.h5">Avg. Time (min)</MudText>
                        <MudText Typo="Typo.h3" Align="Align.Center">@(Math.Round(summary?.AverageCompletionTimeMinutes ?? 0, 1))</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4" Class="mt-6">
            <MudTabPanel Text="Active Fluxes">
                <MudTable Items="@activeFluxes" Hover="true" Striped="true" Elevation="0" Loading="@isLoading" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Stage</MudTh>
                        <MudTh>Progress</MudTh>
                        <MudTh>Start Time</MudTh>
                        <MudTh>Duration (min)</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.FluxId</MudTd>
                        <MudTd>@context.FluxName</MudTd>
                        <MudTd>
                            <MudChip T="Color" Color="Color.Info" Size="Size.Small">@context.Stage</MudChip>
                        </MudTd>
                        <MudTd>
                            <MudProgressLinear Color="Color.Info"
                                              Value="@context.ProgressPercentage"
                                              Class="my-0"
                                              Striped="true">
                                @context.ProgressPercentage%
                            </MudProgressLinear>
                        </MudTd>
                        <MudTd>@context.StartTime.ToLocalTime().ToString("g")</MudTd>
                        <MudTd>@Math.Round(context.DurationMinutes, 1)</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       OnClick="@(() => ShowFluxDetails(context.FluxId))">
                                Details
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 5, 10, 25 }" />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>

            <MudTabPanel Text="Completed Fluxes">
                <MudTable Items="@completedFluxes" Hover="true" Striped="true" Elevation="0" Loading="@isLoading" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Completed At</MudTh>
                        <MudTh>Duration (min)</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.FluxId</MudTd>
                        <MudTd>@context.FluxName</MudTd>
                        <MudTd>
                            <MudChip T="Color" Color="@(context.Status == "Success" ? Color.Success : Color.Error)"
                                     Size="Size.Small">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd>@(context.CompletedAt?.ToLocalTime().ToString("g") ?? "-")</MudTd>
                        <MudTd>@Math.Round(context.DurationMinutes, 1)</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       OnClick="@(() => ShowFluxDetails(context.FluxId))">
                                Details
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 5, 10, 25 }" />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private List<ActiveFluxDto> activeFluxes = new();
    private List<CompletedFluxDto> completedFluxes = new();
    private WorkflowSummaryDto summary;
    private System.Threading.Timer refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();

        // Set up automatic refresh every 30 seconds
        refreshTimer = new System.Threading.Timer(
            async _ => await InvokeAsync(RefreshData),
            null,
            TimeSpan.FromSeconds(30),
            TimeSpan.FromSeconds(30));
    }

    private async Task RefreshData()
    {
        isLoading = true;
        try
        {
            var activeTask = MindApi.GetActiveFluxesAsync();
            var completedTask = MindApi.GetCompletedFluxesAsync();
            var summaryTask = MindApi.GetFluxWorkflowSummaryAsync();

            await Task.WhenAll(activeTask, completedTask, summaryTask);

            activeFluxes = (await activeTask).Data;
            completedFluxes = (await completedTask).Data;
            summary = (await summaryTask).Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ShowFluxDetails(int fluxId)
    {
        try
        {
            isLoading = true;
            var response = await MindApi.GetFluxWorkflowDetailsAsync(fluxId);
            var fluxDetails = response.Data;

            if (fluxDetails != null)
            {
                var parameters = new DialogParameters
                {
                    ["FluxDetails"] = fluxDetails
                };

                var dialog = DialogService.Show<FluxWorkflowDetailsDialog>("Flux Details", parameters,
                    new DialogOptions
                    {
                        MaxWidth = MaxWidth.Large,
                        FullWidth = true,
                        CloseButton = true,
                        BackdropClick = false
                    });

                await dialog.Result;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading flux details: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
} 