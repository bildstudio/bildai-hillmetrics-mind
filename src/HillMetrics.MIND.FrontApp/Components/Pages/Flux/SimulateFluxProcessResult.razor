@page "/flux/simulate-result/{fetchingHistoryId:int}"
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.Core.Financial.DataPoint
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<SimulateFluxProcessResult> Logger

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Class="mb-4">
                <MudIcon Icon="@Icons.Material.Filled.Science" Class="mr-2" />
                Flux Simulation Results
            </MudText>
        </MudItem>
    </MudGrid>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else if (simulationResult != null)
    {
        <!-- Status and Basic Information -->
        <MudCard Class="mb-4">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="2">
                        <MudText Typo="Typo.h6">Status</MudText>
                        <MudChip T="Color" Color="@GetStatusColor(simulationResult.Status)" Size="Size.Medium">
                            @simulationResult.Status
                        </MudChip>
                    </MudItem>
                    <MudItem xs="12" md="2">
                        <MudText Typo="Typo.h6">Flux ID</MudText>
                        <MudLink Href="@($"/flux/details/{simulationResult.FluxId}")">@simulationResult.FluxId</MudLink>
                    </MudItem>
                    <MudItem xs="12" md="2">
                        <MudText Typo="Typo.h6">Processing Time</MudText>
                        <MudText>@(Math.Round(simulationResult.ProcessingTimeMs / 1000.0, 2)) s</MudText>
                    </MudItem>
                    <MudItem xs="12" md="2">
                        <MudText Typo="Typo.h6">Fetching History ID</MudText>
                        <MudLink Href="@($"/flux/fetching-details/{FetchingHistoryId}")">@FetchingHistoryId</MudLink>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>

        @if (simulationResult.SimulationSummary != null)
        {
            <!-- Comprehensive Summary -->
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Analytics" Class="mr-2" />
                            Simulation Summary
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4 text-center" Style="background-color: var(--mud-palette-success-lighten);">
                                <MudText Typo="Typo.h4" Style="color: white;">@simulationResult.SimulationSummary.CommandsToExecute</MudText>
                                <MudText Typo="Typo.subtitle1">Commands to Execute</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4 text-center" Style="background-color: var(--mud-palette-primary-lighten);">
                                <MudText Typo="Typo.h4" Style="color: white;">@simulationResult.SimulationSummary.FinancialIdsAffected</MudText>
                                <MudText Typo="Typo.subtitle1">Financial IDs Affected</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudPaper Class="pa-4 text-center" Style="@rowValidation(simulationResult)">
                                <MudText Typo="Typo.h4" Style="color: white;" Color="@(simulationResult.SimulationSummary.HasValidationErrors ? Color.Error : Color.Success)">
                                    @simulationResult.SimulationSummary.ValidationSummary.FailedValidations
                                </MudText>
                                <MudText Typo="Typo.subtitle1">Validation Errors</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                    @if (simulationResult.SimulationSummary.ValidationSummary.TotalRulesExecuted > 0)
                    {
                        <MudGrid Class="mt-4">
                            <MudItem xs="12" md="6">
                                <MudText Typo="Typo.subtitle1" Class="mb-2">Validation Statistics</MudText>
                                <MudProgressLinear Color="Color.Success"
                                                   Value="@(simulationResult.SimulationSummary.ValidationSummary.SuccessRate * 100)"
                                                   Size="Size.Large"
                                                   Class="mb-2" />
                                <MudText Typo="Typo.body2">
                                    Success Rate: @(simulationResult.SimulationSummary.ValidationSummary.SuccessRate.ToString("N2"))%
                                    (@simulationResult.SimulationSummary.ValidationSummary.SuccessfulValidations.ToString("N0") / @simulationResult.SimulationSummary.ValidationSummary.TotalRulesExecuted.ToString("N0"))
                                </MudText>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudText Typo="Typo.subtitle1" Class="mb-2">Processing Readiness</MudText>
                                @if (simulationResult.SimulationSummary.CanProceedWithProcessing)
                                {
                                    <MudAlert Severity="Severity.Success" Dense="true">
                                        ✅ Ready to proceed with processing
                                    </MudAlert>
                                }
                                else
                                {
                                    <MudAlert Severity="Severity.Warning" Dense="true">
                                        ⚠️ Issues found - review before processing
                                    </MudAlert>
                                }
                            </MudItem>
                        </MudGrid>
                    }
                </MudCardContent>
            </MudCard>

            <!-- Process Button -->
            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.h6">Ready to Process?</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Click the button below to start processing this fetching history with the simulated configuration.
                            </MudText>
                        </MudStack>
                        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Size="Size.Large"
                                       StartIcon="@Icons.Material.Filled.PlayArrow"
                                       OnClick="@(() => ProcessFetchingHistory())"
                                       Disabled="@processing">
                                @if (processing)
                                {
                                    <MudProgressCircular Color="Color.Inherit" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <span>Process</span>
                                }
                            </MudButton>

                            @if (workflowId.HasValue && simulationResult != null)
                            {
                                <MudTooltip Text="View Workflow Live">
                                    <MudLink Href="@($"/flux/workflow-live/{simulationResult.FluxId}/{workflowId.Value}")">
                                        <MudIcon Icon="@Icons.Material.Filled.Timeline" Color="Color.Primary" Size="Size.Large" />
                                    </MudLink>
                                </MudTooltip>
                            }
                        </MudStack>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        }

        @if (simulationResult.ProcessingIssues.Any())
        {
            <!-- Processing Issues -->
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Color="Color.Warning">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
                            Processing Issues (@simulationResult.ProcessingIssues.Count)
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (var issue in simulationResult.ProcessingIssues)
                    {
                        <MudAlert Severity="Severity.Warning" Dense="true" Class="mb-2">
                            @issue
                        </MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        }

        @if (simulationResult.FinancialsToCreate?.Any() == true)
        {
            <!-- Financial Instruments to Create -->
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.AccountBalanceWallet" Class="mr-2" />
                            Financial Instruments to Create (@simulationResult.FinancialsToCreate.Count)
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (var (financial, index) in simulationResult.FinancialsToCreate.Select((f, i) => (f, i + 1)))
                    {
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div style="display: flex; align-items: center;">
                                        <MudIcon Icon="@Icons.Material.Filled.Add" class="mr-3" Color="Color.Success"></MudIcon>
                                        <MudText>Financial Instrument #@index</MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <MudGrid>
                                        @foreach (var kvp in financial.DataPoints)
                                        {
                                            <MudItem xs="12" md="6">
                                                <MudText Typo="Typo.subtitle2">@kvp.Key:</MudText>
                                                <MudText Typo="Typo.body2" Class="ml-2">@kvp.Value</MudText>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    }
                </MudCardContent>
            </MudCard>
        }

        @if (simulationResult.SimulationSummary?.ValidationSummary.ValidationErrors.Any() == true)
        {
            <!-- Validation Errors Detail -->
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Color="Color.Error">
                            <MudIcon Icon="@Icons.Material.Filled.Error" Class="mr-2" />
                            Validation Errors (@simulationResult.SimulationSummary.ValidationSummary.ValidationErrors.Count)
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudDataGrid T="ValidationErrorDto"
                                 Items="@simulationResult.SimulationSummary.ValidationSummary.ValidationErrors"
                                 Dense="true"
                                 Hover="true"
                                 Striped="true"
                                 Virtualize="true"
                                 Height="400px"
                                 FixedHeader="true"
                                 Bordered="true"
                                 Class="mud-elevation-1">
                        <Columns>
                            <PropertyColumn Property="x => x.DataPoint" Title="Data Point" Sortable="true" />
                            <PropertyColumn Property="x => x.OriginalValue" Title="Original Value" Sortable="true">
                                <CellTemplate>
                                    <div class="text-truncate" style="max-width: 200px;" title="@context.Item.OriginalValue">
                                        @context.Item.OriginalValue
                                    </div>
                                </CellTemplate>
                            </PropertyColumn>
                            <PropertyColumn Property="x => x.ErrorMessage" Title="Error Message" Sortable="true">
                                <CellTemplate>
                                    <div class="text-truncate" style="max-width: 300px;" title="@context.Item.ErrorMessage">
                                        @context.Item.ErrorMessage
                                    </div>
                                </CellTemplate>
                            </PropertyColumn>
                        </Columns>
                    </MudDataGrid>
                </MudCardContent>
            </MudCard>
        }

        @if (simulationResult.ExtractedData != null && simulationResult.ExtractedData.ExecutorResults.Any())
        {
            <!-- Detailed Processing Results -->
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.DataArray" Class="mr-2" />
                            Detailed Processing Results
                        </MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">
                            Total: @GetTotalRowsCount() rows across @simulationResult.ExtractedData.ExecutorResults.Count() executor(s)
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                                        <MudGrid Class="mb-3" AlignItems="Center">
                        <MudItem xs="12" md="4" Class="d-flex align-center">
                            <MudTextField @bind-Value="searchFilter"
                                          Placeholder="Filter results..."
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          Immediate="true"
                                          DebounceInterval="300"
                                          OnDebounceIntervalElapsed="@((string filter) => ApplyFilter())"
                                          Clearable="true"
                                          Variant="Variant.Outlined"
                                          Dense="true"
                                          Style="width: 100%;" />
                        </MudItem>
                        <MudItem xs="12" md="6" Class="d-flex align-center">
                            <MudSelect T="string"
                                       Label="Financial Data Points Filter"
                                       MultiSelection="true"
                                       Variant="Variant.Outlined"
                                       Dense="true"
                                       SelectAllText="All Data Points"
                                       SelectedValuesChanged="OnDataPointFilterChanged"
                                       Adornment="Adornment.Start"
                                       AdornmentIcon="@Icons.Material.Filled.FilterList"
                                       Style="width: 100%;">
                                @foreach (var dataPoint in availableDataPoints)
                                {
                                    <MudSelectItem T="string" Value="@dataPoint">@dataPoint</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="2" Class="d-flex align-center">
                            <MudCheckBox T="bool"
                                         Label="Unique values only"
                                         Color="Color.Primary"
                                         Dense="true"
                                         ValueChanged="OnUniqueFilterChanged" />
                        </MudItem>
                        <MudItem xs="12" md="2" Class="d-flex align-center">
                            <MudCheckBox T="bool"
                                         Label="Rows in error"
                                         Color="Color.Error"
                                         Dense="true"
                                         ValueChanged="OnErrorFilterChanged" />
                        </MudItem>
                    </MudGrid>

                    @if (filteredRows.Any())
                    {
                        <MudDataGrid T="RowData"
                                     Items="@filteredRows"
                                     Dense="true"
                                     Hover="true"
                                     Striped="true"
                                     Virtualize="true"
                                     Height="600px"
                                     FixedHeader="true"
                                     Bordered="true"
                                     Class="mud-elevation-1">

                            <Columns>
                                <PropertyColumn Property="x => x.RowIndex" Title="@(showUniqueOnly ? "Count" : "Row #")" Sortable="true">
                                    <CellTemplate>
                                        <div class="d-flex align-center">
                                            @if (showUniqueOnly)
                                            {
                                                <MudChip Size="Size.Small" Color="Color.Success" Variant="Variant.Filled">
                                                    x @context.Item.UniqueCount
                                                </MudChip>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.body2">@context.Item.RowIndex</MudText>
                                                <MudChip Size="Size.Small" Color="Color.Primary" Class="ml-2">
                                                    E@(context.Item.ExecutorIndex + 1)
                                                </MudChip>
                                            }
                                        </div>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.FinancialDataPointName" Title="Financial Data Point" Sortable="true">
                                    <CellTemplate>
                                        @if (context.Item.HasValidationMessages)
                                        {
                                            <MudTooltip Text="@context.Item.ValidationTooltip">
                                                <MudChip T="string" Size="Size.Small" Color="Color.Info">
                                                    @context.Item.FinancialDataPointName
                                                </MudChip>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info">
                                                @context.Item.FinancialDataPointName
                                            </MudChip>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.IsSuccess" Title="Status" Sortable="true">
                                    <CellTemplate>
                                        @if (context.Item.HasValidationMessages)
                                        {
                                            <MudTooltip Text="@context.Item.ValidationTooltip">
                                                <MudIcon Icon="@GetRuleStatusIcon(context.Item.IsSuccess)"
                                                         Color="@GetRuleStatusColor(context.Item.IsSuccess)" />
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@GetRuleStatusIcon(context.Item.IsSuccess)"
                                                     Color="@GetRuleStatusColor(context.Item.IsSuccess)" />
                                        }
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.OriginalDataFormatted" Title="Original Data" Sortable="true">
                                    <CellTemplate>
                                        @if (context.Item.HasValidationMessages)
                                        {
                                            <MudTooltip Text="@context.Item.ValidationTooltip">
                                                <div class="text-truncate" style="max-width: 200px;" title="@context.Item.OriginalDataFormatted">
                                                    @context.Item.OriginalDataFormatted
                                                </div>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <div class="text-truncate" style="max-width: 200px;" title="@context.Item.OriginalDataFormatted">
                                                @context.Item.OriginalDataFormatted
                                            </div>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.ProcessedDataFormatted" Title="Processed Data" Sortable="true">
                                    <CellTemplate>
                                        @if (context.Item.HasValidationMessages)
                                        {
                                            <MudTooltip Text="@context.Item.ValidationTooltip">
                                                <div class="text-truncate" style="max-width: 200px;" title="@context.Item.ProcessedDataFormatted">
                                                    @context.Item.ProcessedDataFormatted
                                                </div>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <div class="text-truncate" style="max-width: 200px;" title="@context.Item.ProcessedDataFormatted">
                                                @context.Item.ProcessedDataFormatted
                                            </div>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.ErrorMessage" Title="Error Message" Sortable="true">
                                    <CellTemplate>
                                        @if (!string.IsNullOrEmpty(context.Item.ErrorMessage))
                                        {
                                            @if (context.Item.HasValidationMessages)
                                            {
                                                <MudTooltip Text="@context.Item.ValidationTooltip">
                                                    <MudAlert Severity="Severity.Error" Dense="true" Class="my-1">
                                                        @context.Item.ErrorMessage
                                                    </MudAlert>
                                                </MudTooltip>
                                            }
                                            else
                                            {
                                                <MudAlert Severity="Severity.Error" Dense="true" Class="my-1">
                                                    @context.Item.ErrorMessage
                                                </MudAlert>
                                            }
                                        }
                                        else
                                        {
                                            @if (context.Item.HasValidationMessages)
                                            {
                                                <MudTooltip Text="@context.Item.ValidationTooltip">
                                                    <span>-</span>
                                                </MudTooltip>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                        </MudDataGrid>

                        <div class="mt-2">
                            <MudText Typo="Typo.caption">
                                Showing @filteredRows.Count of @GetTotalRowsCount() rows
                            </MudText>
                        </div>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="my-4">
                            No rows match the current filter criteria.
                        </MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        }

        @if (simulationResult.CommandExecution != null)
        {
            <!-- Command Execution Results -->
            <MudCard Class="mt-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="mr-2" />
                            Actions Execution Results
                        </MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">
                            Total: @GetTotalCommandsCount() commands across @simulationResult.CommandExecution.ExecutableCommandsByFinancialId.Count financial product(s)
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @if (commandExecutionRows.Any())
                    {
                        <MudGrid Class="mb-3" AlignItems="Center">
                            <MudItem xs="12" md="6" Class="d-flex align-center">
                                <MudTextField @bind-Value="commandSearchFilter"
                                              Placeholder="Filter by command name..."
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Search"
                                              Immediate="true"
                                              DebounceInterval="300"
                                              OnDebounceIntervalElapsed="@((string filter) => ApplyCommandFilter())"
                                              Clearable="true"
                                              Variant="Variant.Outlined"
                                              Dense="true"
                                              Style="width: 100%;" />
                            </MudItem>
                            <MudItem xs="12" md="6" Class="d-flex align-center">
                                <MudCheckBox T="bool"
                                             Label="Unique commands only"
                                             Color="Color.Primary"
                                             Dense="true"
                                             ValueChanged="OnCommandUniqueFilterChanged" />
                            </MudItem>
                        </MudGrid>

                        <MudDataGrid T="CommandExecutionRowData"
                                     Items="@filteredCommandRows"
                                     Dense="true"
                                     Hover="true"
                                     Striped="true"
                                     Virtualize="true"
                                     Height="500px"
                                     FixedHeader="true"
                                     Bordered="true"
                                     Class="mud-elevation-1">
                            <Columns>
                                <PropertyColumn Property="x => x.FinancialIdDisplay" Title="@(showCommandUniqueOnly ? "Count" : "Financial ID")" Sortable="true">
                                    <CellTemplate>
                                        @if (showCommandUniqueOnly)
                                        {
                                            <MudChip Size="Size.Small" Color="Color.Success" Variant="Variant.Filled">
                                                x @context.Item.UniqueCount
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                                                @context.Item.FinancialIdDisplay
                                            </MudChip>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.CommandName" Title="Command" Sortable="true">
                                    <CellTemplate>
                                        <MudChip Size="Size.Small" Color="Color.Info" Variant="Variant.Outlined">
                                            @context.Item.CommandName
                                        </MudChip>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.CommandCount" Title="Count" Sortable="true">
                                    <CellTemplate>
                                        <MudChip Size="Size.Small" Color="Color.Secondary" Variant="Variant.Filled">
                                            x @context.Item.CommandCount
                                        </MudChip>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.IsList" Title="Type" Sortable="true">
                                    <CellTemplate>
                                        @if (context.Item.IsList)
                                        {
                                            <MudChip Size="Size.Small" Color="Color.Success" Variant="Variant.Outlined">
                                                List
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip Size="Size.Small" Color="Color.Default" Variant="Variant.Outlined">
                                                Single
                                            </MudChip>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.ElementsCount" Title="Elements" Sortable="true">
                                    <CellTemplate>
                                        @if (context.Item.IsList && context.Item.ElementsCount > 0)
                                        {
                                            <MudText Typo="Typo.body2">@context.Item.ElementsCount elements</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">-</MudText>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.ElementsPreview" Title="Elements Preview" Sortable="false">
                                    <CellTemplate>
                                        @if (!string.IsNullOrEmpty(context.Item.ElementsPreview))
                                        {
                                            <MudTooltip Text="@context.Item.ElementsPreview">
                                                <div class="text-truncate" style="max-width: 250px;">
                                                    @context.Item.ElementsPreview
                                                </div>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">-</MudText>
                                        }
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                        </MudDataGrid>

                        <div class="mt-2">
                            <MudText Typo="Typo.caption">
                                Showing @filteredCommandRows.Count of @commandExecutionRows.Count commands
                            </MudText>
                        </div>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="my-4">
                            No executable commands found.
                        </MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        }

        @if (!string.IsNullOrEmpty(simulationResult.CompleteReport))
        {
            <!-- Complete Report -->
            <MudCard Class="mt-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Class="mr-2" />
                            Complete Simulation Report
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-background-grey);">
                        <pre style="white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 0.875rem;">@simulationResult.CompleteReport</pre>
                    </MudPaper>
                </MudCardContent>
            </MudCard>
        }

        <!-- Back Button -->
        <MudGrid Class="mt-4">
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Primary"
                           OnClick="GoBack"
                           StartIcon="@Icons.Material.Filled.ArrowBack">
                    Back to Fetching History
                </MudButton>
            </MudItem>
        </MudGrid>
    }
    else if (!loading)
    {
        <MudAlert Severity="Severity.Error" Class="my-2">
            Failed to load simulation results or no data available.
        </MudAlert>
    }
</MudContainer>

@code {
    [Parameter] public int FetchingHistoryId { get; set; }

    private SimulateProcessElementResponse? simulationResult;
    private bool loading = true;
    private string searchFilter = string.Empty;
    private List<RowData> filteredRows = new();
    private bool processing = false;
    private List<string> availableDataPoints = new();
    private IEnumerable<string> selectedDataPoints = new List<string>();
    private Guid? workflowId = null;
    private bool showUniqueOnly = false;
    private bool showErrorsOnly = false;
    private string commandSearchFilter = string.Empty;
    private List<CommandExecutionRowData> commandExecutionRows = new();
    private List<CommandExecutionRowData> filteredCommandRows = new();
    private bool showCommandUniqueOnly = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSimulationResult();
    }

    private async Task LoadSimulationResult()
    {
        try
        {
            loading = true;
            var response = await MindApi.SimulateProcessElementAsync(FetchingHistoryId);

            if (response?.Data != null)
            {
                simulationResult = response.Data;

                // Initialize available data points
                InitializeDataPointFilter();

                // Initialize filtered rows after loading data
                ApplyFilter();

                // Initialize command execution data
                InitializeCommandExecutionData();

                if (simulationResult.Status != SimulateProcessElementResponse.SimulationStatus.Success &&
                    simulationResult.Status != SimulateProcessElementResponse.SimulationStatus.PartialSuccess)
                {
                    Snackbar.Add($"Simulation completed with status: {simulationResult.Status}", Severity.Warning);
                }
                else
                {
                    Snackbar.Add("Simulation completed successfully!", Severity.Success);
                }
            }
            else
            {
                Snackbar.Add("Failed to load simulation results.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading simulation results for FetchingHistoryId: {FetchingHistoryId}", FetchingHistoryId);
            Snackbar.Add($"Error loading simulation results: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/flux/fetching-history");
    }

    private Color GetStatusColor(SimulateProcessElementResponse.SimulationStatus status)
    {
        return status switch
        {
            SimulateProcessElementResponse.SimulationStatus.Success => Color.Success,
            SimulateProcessElementResponse.SimulationStatus.PartialSuccess => Color.Info,
            SimulateProcessElementResponse.SimulationStatus.Fail => Color.Error,
            SimulateProcessElementResponse.SimulationStatus.NoRawId => Color.Warning,
            SimulateProcessElementResponse.SimulationStatus.ContentNull => Color.Warning,
            SimulateProcessElementResponse.SimulationStatus.NoCustomProcessingImplementation => Color.Info,
            SimulateProcessElementResponse.SimulationStatus.JsonConversionFailed => Color.Error,
            SimulateProcessElementResponse.SimulationStatus.DataExtractionFailed => Color.Error,
            SimulateProcessElementResponse.SimulationStatus.ValidationErrors => Color.Error,
            SimulateProcessElementResponse.SimulationStatus.NoExecutableCommands => Color.Warning,
            _ => Color.Default
        };
    }

    private Color GetRuleStatusColor(bool isSuccess)
    {
        return isSuccess ? Color.Success : Color.Error;
    }

    private string GetRuleStatusIcon(bool isSuccess)
    {
        return isSuccess ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error;
    }

    private string FormatData(object? data)
    {
        if (data == null) return "-";

        if (data is string str && str.Length > 50)
        {
            return str.Substring(0, 50) + "...";
        }

        return data.ToString() ?? "-";
    }

    private int GetTotalRowsCount()
    {
        return simulationResult?.ExtractedData?.ExecutorResults.Sum(er => er.Rows.Count) ?? 0;
    }

    private int GetTotalCommandsCount()
    {
        return simulationResult?.CommandExecution?.ExecutableCommandsByFinancialId.Sum(kvp => kvp.Value.Count) ?? 0;
    }

    private void ApplyFilter()
    {
        filteredRows.Clear();

        if (simulationResult?.ExtractedData?.ExecutorResults == null)
            return;

        var allRows = new List<RowData>();
        int globalRowIndex = 1;

        foreach (var (executorResult, executorIndex) in simulationResult.ExtractedData.ExecutorResults.Select((er, i) => (er, i)))
        {
            foreach (var row in executorResult.Rows)
            {
                var hasValidationMessages = row.RuleResult.ValidationMessages?.Any() == true;
                var validationTooltip = hasValidationMessages ?
                    string.Join("\n", row.RuleResult.ValidationMessages.Select(vm => $"[{vm.Level}] {vm.Message}")) :
                    string.Empty;

                allRows.Add(new RowData
                    {
                        Row = row,
                        ExecutorIndex = executorIndex,
                        RowIndex = globalRowIndex,
                        HasValidationMessages = hasValidationMessages,
                        ValidationTooltip = validationTooltip,
                        FinancialDataPointName = row.FinancialTechnicalDataPoint.ToString(),
                        IsSuccess = row.RuleResult.IsSuccess,
                        OriginalDataFormatted = FormatData(row.RuleResult.OriginalData),
                        ProcessedDataFormatted = FormatData(row.RuleResult.ProcessedData),
                        ErrorMessage = row.RuleResult.ErrorMessage ?? string.Empty
                    });
                globalRowIndex++;
            }
        }

        // Apply data point filter
        if (selectedDataPoints.Any())
        {
            allRows = allRows.Where(rowData => selectedDataPoints.Contains(rowData.FinancialDataPointName)).ToList();
        }

        // Apply search filter
        if (!string.IsNullOrEmpty(searchFilter))
        {
            var searchTerms = searchFilter.Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(t => t.Trim().ToLower()).ToList();

            allRows = allRows.Where(rowData =>
                searchTerms.All(term =>
                    rowData.FinancialDataPointName.ToLower().Contains(term) ||
                    rowData.OriginalDataFormatted.ToLower().Contains(term) ||
                    rowData.ProcessedDataFormatted.ToLower().Contains(term) ||
                    rowData.ErrorMessage.ToLower().Contains(term)
                )).ToList();
        }

        // Apply error filter
        if (showErrorsOnly)
        {
            allRows = allRows.Where(rowData => !string.IsNullOrEmpty(rowData.ErrorMessage)).ToList();
        }

        // Apply unique filter
        if (showUniqueOnly)
        {
            var uniqueRows = allRows
                .GroupBy(row => new {
                    row.FinancialDataPointName,
                    row.OriginalDataFormatted,
                    row.ProcessedDataFormatted,
                    row.IsSuccess,
                    row.ErrorMessage
                })
                .Select(group => {
                    var firstRow = group.First();
                    return new RowData
                    {
                        Row = firstRow.Row,
                        ExecutorIndex = firstRow.ExecutorIndex,
                        RowIndex = firstRow.RowIndex,
                        HasValidationMessages = firstRow.HasValidationMessages,
                        ValidationTooltip = firstRow.ValidationTooltip,
                        FinancialDataPointName = firstRow.FinancialDataPointName,
                        IsSuccess = firstRow.IsSuccess,
                        OriginalDataFormatted = firstRow.OriginalDataFormatted,
                        ProcessedDataFormatted = firstRow.ProcessedDataFormatted,
                        ErrorMessage = firstRow.ErrorMessage,
                        UniqueCount = group.Count() // Store count of duplicates
                    };
                })
                .OrderBy(row => row.FinancialDataPointName)
                .ThenBy(row => row.OriginalDataFormatted)
                .ToList();

            filteredRows.AddRange(uniqueRows);
        }
        else
        {
            filteredRows.AddRange(allRows);
        }
        StateHasChanged();
    }

    private string rowValidation(SimulateProcessElementResponse simulationResult)
    {
        return $"background-color: {(simulationResult.SimulationSummary.HasValidationErrors ? "var(--mud-palette-error-lighten)" : "var(--mud-palette-success-lighten)")}";
    }

    private void InitializeDataPointFilter()
    {
        if (simulationResult?.ExtractedData?.ExecutorResults == null) return;

        availableDataPoints = simulationResult.ExtractedData.ExecutorResults
            .SelectMany(er => er.Rows)
            .Select(row => row.FinancialTechnicalDataPoint.ToString())
            .Distinct()
            .OrderBy(dp => dp)
            .ToList();

        // Select all by default
        selectedDataPoints = availableDataPoints;
    }

    private void OnDataPointFilterChanged(IEnumerable<string> values)
    {
        selectedDataPoints = values;
        ApplyFilter();
    }

    private void OnUniqueFilterChanged(bool value)
    {
        showUniqueOnly = value;
        ApplyFilter();
    }

    private void OnErrorFilterChanged(bool value)
    {
        showErrorsOnly = value;
        ApplyFilter();
    }

    private void InitializeCommandExecutionData()
    {
        commandExecutionRows.Clear();

        if (simulationResult?.CommandExecution?.ExecutableCommandsByFinancialId == null)
            return;

        foreach (var kvp in simulationResult.CommandExecution.ExecutableCommandsByFinancialId)
        {
            var financialIdDisplay = kvp.Key == 0 ? "Unknown" : kvp.Key.ToString();

            var groupedCommands = kvp.Value.GroupBy(c => c.CommandName);
            
            foreach (var commandGroup in groupedCommands)
            {
                var firstCommand = commandGroup.First();
                var elementsPreview = firstCommand.IsList && firstCommand.Elements?.Any() == true
                    ? string.Join(", ", firstCommand.Elements.Take(3)) + (firstCommand.Elements.Count > 3 ? "..." : "")
                    : string.Empty;

                commandExecutionRows.Add(new CommandExecutionRowData
                {
                    FinancialIdDisplay = financialIdDisplay,
                    CommandName = commandGroup.Key,
                    CommandCount = commandGroup.Count(),
                    IsList = firstCommand.IsList,
                    ElementsCount = firstCommand.Elements?.Count ?? 0,
                    ElementsPreview = elementsPreview
                });
            }
        }

        ApplyCommandFilter();
    }

    private async Task ProcessFetchingHistory()
    {
        try
        {
            if(simulationResult is null)
                return;

            processing = true;

            // Same logic as in FluxFetchingHistoryTable for processing
            var response = await MindApi.ForceProcessElementFetchBackgroundAsync(simulationResult.FluxId, FetchingHistoryId);

            // Store the workflow ID for displaying the link
            if (response?.Data?.WorkflowId != null)
            {
                workflowId = response.Data.WorkflowId;
            }

            Snackbar.Add("Processing started successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting process for FetchingHistoryId: {FetchingHistoryId}", FetchingHistoryId);
            Snackbar.Add($"Error starting process: {ex.Message}", Severity.Error);
        }
        finally
        {
            processing = false;
        }
    }

    private void ApplyCommandFilter()
    {
        ApplyCommandFilter(commandSearchFilter);
    }

    private void ApplyCommandFilter(string filter)
    {
        filteredCommandRows.Clear();

        var rowsToFilter = commandExecutionRows.AsEnumerable();

        // Apply search filter (focus on command name)
        if (!string.IsNullOrEmpty(filter))
        {
            var searchTerms = filter.Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(t => t.Trim().ToLower()).ToList();

            rowsToFilter = rowsToFilter.Where(row =>
                searchTerms.All(term =>
                    row.CommandName.ToLower().Contains(term)
                ));
        }

        // Apply unique filter
        if (showCommandUniqueOnly)
        {
            var uniqueCommands = rowsToFilter
                .GroupBy(row => new {
                    row.CommandName,
                    row.IsList,
                    row.ElementsCount,
                    row.ElementsPreview
                })
                .Select(group => {
                    var firstRow = group.First();
                    return new CommandExecutionRowData
                    {
                        FinancialIdDisplay = firstRow.FinancialIdDisplay,
                        CommandName = firstRow.CommandName,
                        CommandCount = firstRow.CommandCount,
                        IsList = firstRow.IsList,
                        ElementsCount = firstRow.ElementsCount,
                        ElementsPreview = firstRow.ElementsPreview,
                        UniqueCount = group.Count() // Store count of duplicates
                    };
                })
                .OrderBy(row => row.CommandName)
                .ToList();

            filteredCommandRows.AddRange(uniqueCommands);
        }
        else
        {
            filteredCommandRows.AddRange(rowsToFilter);
        }
        
        StateHasChanged();
    }

    private void OnCommandUniqueFilterChanged(bool value)
    {
        showCommandUniqueOnly = value;
        ApplyCommandFilter();
    }

    public class RowData
    {
        public dynamic Row { get; set; }
        public int ExecutorIndex { get; set; }
        public int RowIndex { get; set; }
        public bool HasValidationMessages { get; set; }
        public string ValidationTooltip { get; set; } = string.Empty;
        public string FinancialDataPointName { get; set; } = string.Empty;
        public bool IsSuccess { get; set; }
        public string OriginalDataFormatted { get; set; } = string.Empty;
        public string ProcessedDataFormatted { get; set; } = string.Empty;
        public string ErrorMessage { get; set; } = string.Empty;
        public int UniqueCount { get; set; } = 1;
    }

    public class CommandExecutionRowData
    {
        public string FinancialIdDisplay { get; set; }
        public string CommandName { get; set; }
        public int CommandCount { get; set; }
        public bool IsList { get; set; }
        public int ElementsCount { get; set; }
        public string ElementsPreview { get; set; }
        public int UniqueCount { get; set; } = 1;
    }
}

