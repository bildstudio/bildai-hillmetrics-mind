@using HillMetrics.Core.Monitoring.Workflow
@using HillMetrics.Core.Workflow
@using HillMetrics.MIND.API.Contracts.Responses.Flux

<MudDialog>
    <DialogContent>
        @if (FluxDetails == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Workflow Information</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudList T="FluxWorkflowDetailsDto" Dense="true">
                                <MudListItem>
                                    <MudText><b>Details:</b> @FluxDetails.StageDetails</MudText>
                                </MudListItem>
                                <MudListItem>
                                    <MudText><b>Started:</b> @FluxDetails.StartTime.ToLocalTime().ToString("g")</MudText>
                                </MudListItem>
                                @if (FluxDetails.EndTime.HasValue)
                                {
                                    <MudListItem>
                                        <MudText><b>Completed:</b> @FluxDetails.EndTime.Value.ToLocalTime().ToString("g")</MudText>
                                    </MudListItem>
                                }
                                <MudListItem>
                                    <MudText><b>Duration:</b> @Math.Round(FluxDetails.DurationMinutes, 1) minutes</MudText>
                                </MudListItem>
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Status</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex flex-column align-center justify-center">
                                @if (FluxDetails.IsCompleted)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                             Color="Color.Success"
                                             Size="Size.Large"
                                             Style="font-size: 64px;" />
                                    <MudText Typo="Typo.body1" Class="mt-2">Completed</MudText>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.HourglassBottom"
                                             Color="Color.Info"
                                             Size="Size.Large"
                                             Style="font-size: 64px;" />
                                    <MudText Typo="Typo.body1" Class="mt-2">In Progress</MudText>
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-6" />

            <MudText Typo="Typo.h6" Class="mb-4">Workflow History</MudText>

            <MudTimeline TimelinePosition="TimelinePosition.Start">
                @foreach (var item in FluxDetails.History.OrderBy(h => h.Timestamp))
                {
                    <MudTimelineItem Color="@GetStageColor(item.Stage)">
                        <ItemOpposite>
                            <MudText Typo="Typo.body2">@item.Timestamp.ToLocalTime().ToString("g")</MudText>
                            <MudText Typo="Typo.caption">@Math.Round(item.TimeSinceStart, 1) min from start</MudText>
                        </ItemOpposite>
                        <ItemContent>
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@item.Stage</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudText>@item.Description</MudText>
                                </MudCardContent>
                            </MudCard>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public FluxWorkflowDetailsDto FluxDetails { get; set; }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private Color GetStageColor(WorkflowStage stage)
    {
        return stage switch
        {
            WorkflowStage.Failed => Color.Error,
            WorkflowStage.Processing => Color.Warning,
            WorkflowStage.FetchingData => Color.Info,
            WorkflowStage.FetchingDataMail => Color.Info,
            WorkflowStage.CalcCurrencyExchangeRateStarting => Color.Tertiary,
            WorkflowStage.CalculationRiskStarting => Color.Tertiary,
            WorkflowStage.CalculationReturnStarting => Color.Tertiary,
            WorkflowStage.CalculationWeeklyReturnStarting => Color.Tertiary,
            _ => Color.Default
        };
    }
}