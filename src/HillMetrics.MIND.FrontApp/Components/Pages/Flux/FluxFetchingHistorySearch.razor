@page "/flux/fetching-history"
@using HillMetrics.MIND.API.Contracts.Requests.Flux
@using HillMetrics.MIND.API.Contracts.Responses
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.Core.Search
@using HillMetrics.Core
@using HillMetrics.MIND.FrontApp.Services
@using HillMetrics.Normalized.Domain.Contracts.Providing.Flux
@using HillMetrics.MIND.FrontApp.Components.Shared
@using HillMetrics.MIND.FrontApp.Components.Flux
@using HillMetrics.MIND.API.SDK.V1
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Flux Fetching History</MudText>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid Spacing="1">
                    <!-- Flux ID -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="int"
                        SearchCriteria="@fluxIdSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => fluxIdSearchCriteria = criteria)"
                        Label="Flux ID" />
                    </MudItem>

                    <!-- Number of Contents -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="int"
                        SearchCriteria="@nbContentSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => nbContentSearchCriteria = criteria)"
                        Label="Number of Contents" />
                    </MudItem>

                    <!-- Number of Processings -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="int"
                        SearchCriteria="@nbProcessingSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => nbProcessingSearchCriteria = criteria)"
                        Label="Number of Processings" />
                    </MudItem>

                    <!-- External Data ID -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="string"
                        SearchCriteria="@externalDataIdSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => externalDataIdSearchCriteria = criteria)"
                        Label="External Data ID" />
                    </MudItem>

                    <!-- Content Name -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="string"
                        SearchCriteria="@contentNameSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => contentNameSearchCriteria = criteria)"
                        Label="Content Name" />
                    </MudItem>

                    <!-- Raw ID -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="string"
                        SearchCriteria="@rawIdSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => rawIdSearchCriteria = criteria)"
                        Label="Raw ID" />
                    </MudItem>

                    <!-- Metadata -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="string"
                        SearchCriteria="@metadataSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => metadataSearchCriteria = criteria)"
                        Label="Metadata" />
                    </MudItem>

                    <!-- Fetching Date -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="DateTime"
                        SearchCriteria="@fetchingDateSearchCriteria"
                        SearchCriteriaChanged="@((criteria) => fetchingDateSearchCriteria = criteria)"
                        Label="Fetching Date" />
                    </MudItem>

                    <!-- Content Status -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="StatusProcess?" @bind-Value="searchRequest.ContentStatus"
                        Label="Content Status" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((StatusProcess?)null)">All</MudSelectItem>
                            @foreach (var status in Enum.GetValues<StatusProcess>())
                            {
                                <MudSelectItem T="StatusProcess?" Value="@status">@status</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search" Size="Size.Small">Search</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset" Size="Size.Small">Reset</MudButton>
        </MudCardActions>
    </MudCard>

    <FluxFetchingHistoryTable
        ServerReload="@ServerReload"
        Loading="@loading"
        OnForceProcess="@ForceProcess" />
</MudContainer>

@code {
    private FluxFetchingSearchRequest searchRequest = new();
    private List<FluxFetchingSearchResponse>? fetchingHistories;
    private bool loading = false;
    private bool isValid = false;
    private TableState tableState;
    private MudForm form;
    private string searchString = "";
    private FluxFetchingSearchResponse selectedItem = null;

    // SearchCriteria for each field
    private SearchCriteria<int> fluxIdSearchCriteria = new();
    private SearchCriteria<int> nbContentSearchCriteria = new();
    private SearchCriteria<int> nbProcessingSearchCriteria = new();
    private SearchCriteria<string> externalDataIdSearchCriteria = new();
    private SearchCriteria<string> contentNameSearchCriteria = new();
    private SearchCriteria<string> rawIdSearchCriteria = new();
    private SearchCriteria<string> metadataSearchCriteria = new();
    private SearchCriteria<DateTime> fetchingDateSearchCriteria = new();

    [Parameter]
    [SupplyParameterFromQuery(Name = "fluxId")]
    public string FluxIdParameter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Vérifier si le paramètre FluxId est fourni
        if (!string.IsNullOrEmpty(FluxIdParameter) && int.TryParse(FluxIdParameter, out int fluxId))
        {
            // Initialiser le critère de recherche pour FluxId
            fluxIdSearchCriteria = new SearchCriteria<int>
            {
                Operator = Operator.Equal,
                Value = fluxId
            };
        }

        await Search();
    }

    private async Task<TableData<FluxFetchingSearchResponse>> ServerReload(TableState state, CancellationToken token)
    {
        tableState = state;
        loading = true;

        try
        {
            // Apply search criteria
            ApplySearchCriteria();

            // Configurer la pagination
            searchRequest.Pagination = new Pagination(state.PageSize, state.Page + 1);

            var response = await MindApi.SearchFetchingHistoryAsync(searchRequest);
            fetchingHistories = response.Data.ToList();

            return new TableData<FluxFetchingSearchResponse>
            {
                Items = fetchingHistories,
                TotalItems = (int)response.TotalRecords
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching fetching history: {ex.Message}", Severity.Error);
            return new TableData<FluxFetchingSearchResponse>
            {
                Items = new List<FluxFetchingSearchResponse>(),
                TotalItems = 0
            };
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void ApplySearchCriteria()
    {
        // Apply numerical SearchCriteria
        searchRequest.FluxId = fluxIdSearchCriteria.IsSet() ? fluxIdSearchCriteria : null;
        searchRequest.NbContent = nbContentSearchCriteria.IsSet() ? nbContentSearchCriteria : null;
        searchRequest.NbProcessing = nbProcessingSearchCriteria.IsSet() ? nbProcessingSearchCriteria : null;

        // Apply string criteria only if they are set
        if (externalDataIdSearchCriteria.IsSet())
        {
            searchRequest.ExternalDataId = externalDataIdSearchCriteria.Value;
        }
        else
        {
            searchRequest.ExternalDataId = null;
        }

        if (contentNameSearchCriteria.IsSet())
        {
            searchRequest.ContentName = contentNameSearchCriteria.Value;
        }
        else
        {
            searchRequest.ContentName = null;
        }

        if (rawIdSearchCriteria.IsSet())
        {
            searchRequest.RawId = rawIdSearchCriteria.Value;
        }
        else
        {
            searchRequest.RawId = null;
        }

        if (metadataSearchCriteria.IsSet())
        {
            searchRequest.Metadata = metadataSearchCriteria.Value;
        }
        else
        {
            searchRequest.Metadata = null;
        }

        // Apply datetime SearchCriteria
        searchRequest.FetchingDate = fetchingDateSearchCriteria.IsSet() ? fetchingDateSearchCriteria : null;

        searchRequest.Sorting.Field = "Id";
        searchRequest.Sorting.Direction = Core.Search.SortDirection.Descending;
    }

    private async Task Search()
    {
        // Utiliser le state actuel pour recharger les données
        await ServerReload(tableState ?? new TableState
        {
            Page = 0,
            PageSize = 10
        }, CancellationToken.None);
    }

    private async Task Reset()
    {
        searchRequest = new FluxFetchingSearchRequest();
        fluxIdSearchCriteria = new SearchCriteria<int>();
        nbContentSearchCriteria = new SearchCriteria<int>();
        nbProcessingSearchCriteria = new SearchCriteria<int>();
        externalDataIdSearchCriteria = new SearchCriteria<string>();
        contentNameSearchCriteria = new SearchCriteria<string>();
        rawIdSearchCriteria = new SearchCriteria<string>();
        metadataSearchCriteria = new SearchCriteria<string>();
        fetchingDateSearchCriteria = new SearchCriteria<DateTime>();
        searchString = "";

        if (tableState != null)
        {
            tableState.Page = 0;
            await ServerReload(tableState, CancellationToken.None);
        }
    }

    private async Task ForceProcess(int fetchingHistoryId)
    {
        try
        {
            loading = true;
            var f = await MindApi.GetFetchingHistoryAsync(fetchingHistoryId);
            var result = await MindApi.ForceProcessElementFetchBackgroundAsync(f.Data.FluxFetching.FluxId, fetchingHistoryId);
            Snackbar.Add("Force process started in the background", Severity.Success);
            await Search();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting force process: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }
}