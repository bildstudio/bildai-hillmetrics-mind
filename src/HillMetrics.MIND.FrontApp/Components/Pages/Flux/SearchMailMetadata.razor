@page "/email/search"
@using HillMetrics.MIND.API.Contracts.Requests.Email
@using HillMetrics.MIND.API.Contracts.Responses.Email
@using HillMetrics.Core.Search
@using HillMetrics.MIND.FrontApp.Services
@using HillMetrics.MIND.FrontApp.Components.Shared
@using HillMetrics.MIND.API.SDK.V1
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ILogger<SearchMailMetadata> Logger

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard Class="mb-4">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid Spacing="1">
                    <!-- Email Basic Fields -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchRequest.Subject"
                                      Label="Subject"
                                      Variant="Variant.Outlined"
                                      Placeholder="Search by subject..."
                                      Immediate="true"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="Search"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Subject" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchRequest.FromAddress"
                                      Label="From Address"
                                      Variant="Variant.Outlined"
                                      Placeholder="Search by sender..."
                                      Immediate="true"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="Search"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.PersonSearch" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchRequest.Folder"
                                      Label="Folder"
                                      Variant="Variant.Outlined"
                                      Placeholder="Search by folder..."
                                      Immediate="true"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="Search"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Folder" />
                    </MudItem>

                    <!-- Has Attachments Filter -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="bool?" @bind-Value="searchRequest.HasAttachments"
                                   Label="Has Attachments" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((bool?)null)">All</MudSelectItem>
                            <MudSelectItem T="bool?" Value="true">With Attachments</MudSelectItem>
                            <MudSelectItem T="bool?" Value="false">Without Attachments</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <!-- Processed Filter -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="bool?" @bind-Value="searchRequest.IsProcessed"
                                   Label="Processed ?" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((bool?)null)">All</MudSelectItem>
                            <MudSelectItem T="bool?" Value="true">Processed by Flux</MudSelectItem>
                            <MudSelectItem T="bool?" Value="false">Not Processed</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <!-- Attachment Name Filter -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchRequest.AttachmentName"
                                      Label="Attachment Name"
                                      Variant="Variant.Outlined"
                                      Placeholder="Search by attachment name..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Attachment" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchRequest.AttachmentContentType"
                                      Label="Attachment Content Type"
                                      Variant="Variant.Outlined"
                                      Placeholder="e.g., Csv, Xlsx, Pdf..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Description" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search" Size="Size.Small">Search</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset" Size="Size.Small">Reset</MudButton>
        </MudCardActions>
    </MudCard>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else
    {
        <MudTable ServerData="@ServerReload"
                  Hover="true" Bordered="true" Striped="true"
                  Dense="true" @bind-SelectedItem="selectedItem" T="AttachmentDisplayItem"
                  Breakpoint="Breakpoint.Sm" SortLabel="Subject" Sortable="true" RowsPerPage="100">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="ml-2">Email Attachments</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              Class="mt-0 mb-3" Margin="Margin.Dense" Dense="true"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="Subject" T="AttachmentDisplayItem">Subject</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="FromAddress" T="AttachmentDisplayItem">From</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="ReceivedDateTime" T="AttachmentDisplayItem">Received</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Folder" T="AttachmentDisplayItem">Folder</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="AttachmentName" T="AttachmentDisplayItem">Attachment Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="ContentType" T="AttachmentDisplayItem">Content Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Size" T="AttachmentDisplayItem">Size</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="IsProcessed" T="AttachmentDisplayItem">Processed</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="FetchingHistoryId" T="AttachmentDisplayItem">Flux Fetching</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Subject">
                    <MudTooltip Text="@(context.Subject ?? "No subject")">
                        <MudText Style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                            @(context.Subject ?? "No subject")
                        </MudText>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="From">
                    <MudTooltip Text="@(context.FromAddress ?? "Unknown")">
                        <MudText Style="max-width: 150px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                            @(context.FromAddress ?? "Unknown")
                        </MudText>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Received">
                    @if (context.ReceivedDateTime.HasValue)
                    {
                        <MudTooltip Text="@context.ReceivedDateTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")">
                            @FormatDateTime(context.ReceivedDateTime.Value.ToLocalTime())
                        </MudTooltip>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </MudTd>
                <MudTd DataLabel="Folder">
                    <MudChip T="string" Color="Color.Info" Size="Size.Small">
                        @(context.Folder ?? "Unknown")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Attachment Name">
                    <MudTooltip Text="@(context.AttachmentName ?? "Unknown")">
                        <MudText Style="max-width: 150px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                            @(context.AttachmentName ?? "Unknown")
                        </MudText>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Content Type">
                    <MudChip T="string" Color="Color.Secondary" Size="Size.Small">
                        @context.ContentType
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Size">
                    @FormatFileSize(context.Size)
                </MudTd>
                <MudTd DataLabel="Processed">
                    @if (context.IsProcessed)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" Title="Processed" />
                        @if (context.ProcessedAt.HasValue)
                        {
                            <MudText Typo="Typo.caption" Class="ml-1">
                                @FormatDateTime(context.ProcessedAt.Value.ToLocalTime())
                            </MudText>
                        }
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Pending" Color="Color.Warning" Size="Size.Small" Title="Not processed" />
                    }
                </MudTd>
                <MudTd DataLabel="Flux Fetching">
                    @if (context.IsProcessed && context.FetchingHistoryId.HasValue)
                    {
                        <MudChip T="string" 
                                 Color="Color.Success" 
                                 Size="Size.Small" 
                                 OnClick="@(() => NavigationManager.NavigateTo($"/flux/fetching-details/{context.FetchingHistoryId}"))"
                                 Style="cursor: pointer;">
                            #@context.FetchingHistoryId
                        </MudChip>
                    }
                    else
                    {
                        <MudText Typo="Typo.caption" Class="text-muted">Not processed</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem OnClick="@(() => ViewEmailDetails(context.EmailMetadataId))">
                            <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-2" Size="Size.Small" /> View Email
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => ViewAttachmentDetails(context))">
                            <MudIcon Icon="@Icons.Material.Filled.Attachment" Class="mr-2" Size="Size.Small" /> View Attachment
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <NoRecordsContent>
                <MudAlert Severity="Severity.Info" Class="my-2">No attachments found matching your search criteria.</MudAlert>
            </NoRecordsContent>
        </MudTable>
    }
</MudContainer>

@code {
    private EmailMetadataSearchRequest searchRequest = new();

    private List<AttachmentDisplayItem>? attachments;
    private bool loading = false;
    private bool isValid = false;
    private MudForm form;
    private string searchString = "";
    private AttachmentDisplayItem selectedItem = null;

    private TableState tableState;

    public class AttachmentDisplayItem
    {
        public int EmailMetadataId { get; set; }
        public string EmailId { get; set; } = string.Empty;
        public string? Subject { get; set; }
        public string? FromAddress { get; set; }
        public DateTime? ReceivedDateTime { get; set; }
        public string? Folder { get; set; }

        // Attachment properties
        public int AttachmentId { get; set; }
        public string AttachmentUniqueId { get; set; } = string.Empty;
        public string? AttachmentName { get; set; }
        public string ContentType { get; set; } = string.Empty;
        public string? MimeContentType { get; set; }
        public long Size { get; set; }
        public bool IsProcessed { get; set; }
        public DateTime? ProcessedAt { get; set; }
        public int? FetchingHistoryId { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // Initial load can be performed here if needed
    }

    private async Task<TableData<AttachmentDisplayItem>> ServerReload(TableState state, CancellationToken token)
    {
        tableState = state;
        loading = true;

        try
        {
            // Configure pagination
            searchRequest.Pagination = new HillMetrics.Core.Search.Pagination(state.PageSize, state.Page + 1);

            var response = await MindApi.SearchEmailMetadataAsync(searchRequest);

            // Transform emails to flat attachment list
            var flatAttachments = response.Data
                .Where(email => email.HasAttachments && email.Attachments.Any())
                .SelectMany(email => email.Attachments.Select(attachment => new AttachmentDisplayItem
                {
                    EmailMetadataId = email.Id,
                    EmailId = email.EmailId,
                    Subject = email.Subject,
                    FromAddress = email.FromAddress,
                    ReceivedDateTime = email.ReceivedDateTime,
                    Folder = email.Folder,

                    AttachmentId = attachment.Id,
                    AttachmentUniqueId = attachment.AttachmentId,
                    AttachmentName = attachment.Name,
                    ContentType = attachment.ContentType,
                    MimeContentType = attachment.MimeContentType,
                    Size = attachment.Size,
                    IsProcessed = attachment.IsProcessed,
                    ProcessedAt = attachment.ProcessedAt,
                    FetchingHistoryId = attachment.FetchingHistoryId
                }))
                .ToList();

            // Apply sorting
            flatAttachments = ApplySort(flatAttachments, state.SortLabel, state.SortDirection == MudBlazor.SortDirection.Ascending ? Core.Search.SortDirection.Asc : Core.Search.SortDirection.Desc);

            attachments = flatAttachments;

            return new TableData<AttachmentDisplayItem>
                {
                    Items = flatAttachments,
                    TotalItems = flatAttachments.Count
                };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching attachments: {ex.Message}", Severity.Error);
            return new TableData<AttachmentDisplayItem>
                {
                    Items = new List<AttachmentDisplayItem>(),
                    TotalItems = 0
                };
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task Search()
    {
        // Use current state to reload data
        await ServerReload(tableState ?? new TableState
            {
                Page = 0,
                PageSize = 100
            }, CancellationToken.None);
    }

    private async Task Reset()
    {
        searchRequest = new EmailMetadataSearchRequest();
        searchString = "";

        if (tableState != null)
        {
            tableState.Page = 0;
            await ServerReload(tableState, CancellationToken.None);
        }
    }

    private void ViewEmailDetails(int emailId)
    {
        NavigationManager.NavigateTo($"/email/details/{emailId}");
    }

    private async Task ViewAttachmentDetails(AttachmentDisplayItem attachment)
    {
        var parameters = new DialogParameters
        {
            ["Attachment"] = attachment
        };

        Snackbar.Add($"Viewing attachment: {attachment.AttachmentName ?? "Unknown"}", Severity.Info);
    }

    // Helper method for sorting
    private List<AttachmentDisplayItem> ApplySort(List<AttachmentDisplayItem> items, string sortLabel, Core.Search.SortDirection sortDirection)
    {
        if (string.IsNullOrEmpty(sortLabel))
            return items;

        var sortedQuery = sortLabel switch
        {
            "Subject" => sortDirection == Core.Search.SortDirection.Asc 
                ? items.OrderBy(x => x.Subject ?? string.Empty) 
                : items.OrderByDescending(x => x.Subject ?? string.Empty),
            "FromAddress" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.FromAddress ?? string.Empty) 
                : items.OrderByDescending(x => x.FromAddress ?? string.Empty),
            "ReceivedDateTime" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.ReceivedDateTime ?? DateTime.MinValue) 
                : items.OrderByDescending(x => x.ReceivedDateTime ?? DateTime.MinValue),
            "Folder" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.Folder ?? string.Empty) 
                : items.OrderByDescending(x => x.Folder ?? string.Empty),
            "AttachmentName" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.AttachmentName ?? string.Empty) 
                : items.OrderByDescending(x => x.AttachmentName ?? string.Empty),
            "ContentType" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.ContentType) 
                : items.OrderByDescending(x => x.ContentType),
            "Size" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.Size) 
                : items.OrderByDescending(x => x.Size),
            "IsProcessed" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.IsProcessed) 
                : items.OrderByDescending(x => x.IsProcessed),
            "FetchingHistoryId" => sortDirection == Core.Search.SortDirection.Asc
                ? items.OrderBy(x => x.FetchingHistoryId ?? int.MaxValue) 
                : items.OrderByDescending(x => x.FetchingHistoryId ?? int.MinValue),
            _ => items.AsEnumerable()
        };

        return sortedQuery.ToList();
    }

    // Helper methods for formatting
    private string FormatDateTime(DateTime dateTime)
    {
        var now = DateTime.Now;
        var diff = now - dateTime;

        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalHours < 1)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalDays < 1)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";

        return dateTime.ToString("MMM dd, HH:mm");
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}

@* Simple dialog component for viewing attachments *@
<style>
    .workflow-active-row {
        background-color: rgba(33, 150, 243, 0.1) !important;
    }
</style> 