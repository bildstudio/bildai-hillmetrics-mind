@page "/flux/search"
@using HillMetrics.Core.Workflow
@using HillMetrics.MIND.API.Contracts.Requests.Flux
@using HillMetrics.MIND.API.Contracts.Requests.Source
@using HillMetrics.MIND.API.Contracts.Responses
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.Core.Search
@using HillMetrics.Core
@using HillMetrics.Core.Financial
@using HillMetrics.MIND.API.Contracts.Responses.Source
@using HillMetrics.MIND.FrontApp.Services
@using HillMetrics.Normalized.Domain.Contracts.Providing.Flux
@using HillMetrics.MIND.FrontApp.Components.Shared
@using HillMetrics.MIND.API.SDK.V1
@using System.Collections.Concurrent
@using HillMetrics.Core.Monitoring.Workflow
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ISignalRNotificationService SignalRService
@inject ILogger<FluxSearch> Logger

@implements IAsyncDisposable
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h4" Class="mb-4">Flux Search</MudText>
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Dashboard"
                       Href="/flux/workflow-dashboard"
                       Class="align-self-start">
                Workflow Dashboard
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid Spacing="1">
                    <!-- Flux Name -->
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchRequest.Name"
                                      Label="Flux Name"
                                      Variant="Variant.Outlined"
                                      Placeholder="Search by name..."
                                      Immediate="true"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="Search"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" />
                    </MudItem>

                    <!-- Flux ID -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="int"
                                                 SearchCriteria="@idSearchCriteria"
                                                 SearchCriteriaChanged="@((criteria) => idSearchCriteria = criteria)"
                                                 Label="Flux ID" />
                    </MudItem>

                    <!-- Last Fetching Date -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="DateTime"
                                                 SearchCriteria="@lastFetchingDateSearchCriteria"
                                                 SearchCriteriaChanged="@((criteria) => lastFetchingDateSearchCriteria = criteria)"
                                                 Label="Last Fetching Date" />
                    </MudItem>

                    <!-- Last Processing Date -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="DateTime"
                                                 SearchCriteria="@lastProcessingDateSearchCriteria"
                                                 SearchCriteriaChanged="@((criteria) => lastProcessingDateSearchCriteria = criteria)"
                                                 Label="Last Processing Date" />
                    </MudItem>

                    <!-- Fetching Error Count -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="int"
                                                 SearchCriteria="@fetchingErrorCountSearchCriteria"
                                                 SearchCriteriaChanged="@((criteria) => fetchingErrorCountSearchCriteria = criteria)"
                                                 Label="Fetching Error Count" />
                    </MudItem>

                    <!-- Processing Error Count -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="int"
                                                 SearchCriteria="@processingErrorCountSearchCriteria"
                                                 SearchCriteriaChanged="@((criteria) => processingErrorCountSearchCriteria = criteria)"
                                                 Label="Processing Error Count" />
                    </MudItem>

                    <!-- Financial Type -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="FinancialType?" @bind-Value="searchRequest.FinancialType"
                                   Label="Financial Type" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((FinancialType?)null)">All</MudSelectItem>
                            @foreach (var type in Enum.GetValues<FinancialType>())
                            {
                                <MudSelectItem T="FinancialType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Flux Type -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="FluxType?" @bind-Value="searchRequest.FluxType"
                                   Label="Flux Type" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((FluxType?)null)">All</MudSelectItem>
                            @foreach (var type in Enum.GetValues<FluxType>())
                            {
                                <MudSelectItem T="FluxType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Flux State -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="FluxState?" @bind-Value="searchRequest.FluxState"
                                   Label="Flux State" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((FluxState?)null)">All</MudSelectItem>
                            @foreach (var state in Enum.GetValues<FluxState>())
                            {
                                <MudSelectItem T="FluxState?" Value="@state">@state</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Last Fetching Status -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="StatusProcess?" @bind-Value="searchRequest.LastFetchingStatus"
                                   Label="Last Fetching Status" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((StatusProcess?)null)">All</MudSelectItem>
                            @foreach (var status in Enum.GetValues<StatusProcess>())
                            {
                                <MudSelectItem T="StatusProcess?" Value="@status">@status</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Last Processing Status -->
                    <MudItem xs="12" md="6">
                        <MudSelect T="StatusProcess?" @bind-Value="searchRequest.LastProcessingStatus"
                                   Label="Last Processing Status" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((StatusProcess?)null)">All</MudSelectItem>
                            @foreach (var status in Enum.GetValues<StatusProcess>())
                            {
                                <MudSelectItem T="StatusProcess?" Value="@status">@status</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Nouveau filtre pour le nombre de mappings -->
                    <MudItem xs="12" md="6">
                        <SearchCriteriaComponent T="int"
                                                 SearchCriteria="@mappingsCountSearchCriteria"
                                                 SearchCriteriaChanged="@((criteria) => mappingsCountSearchCriteria = criteria)"
                                                 Label="Mappings Count" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search" Size="Size.Small">Search</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset" Size="Size.Small">Reset</MudButton>
        </MudCardActions>
    </MudCard>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else
    {
        <MudTable ServerData="@ServerReload"
                  Hover="true" Bordered="true" Striped="true"
                  Dense="true" @bind-SelectedItem="selectedItem" T="FluxSearchResponse"
                  Breakpoint="Breakpoint.Sm" RowClassFunc="SelectedRowClassFunc">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="ml-2">Flux List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                              Class="mt-0 mb-3" Margin="Margin.Dense" Dense="true"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Financial Type</MudTh>
                <MudTh>Flux Type</MudTh>
                <MudTh>Last Fetching</MudTh>
                <MudTh>Fetching Status</MudTh>
                <MudTh>Fetch Errors</MudTh>
                <MudTh>Last Processing</MudTh>
                <MudTh>Processing Status</MudTh>
                <MudTh>Process Errors</MudTh>
                <MudTh>Mappings</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.FluxId</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="FluxState" Color="GetFluxStateColor(context.FluxState)" Size="Size.Small">
                        @context.FluxState
                    </MudChip>
                    @if (activeWorkflows.TryGetValue(context.FluxId, out var workflowInfo))
                    {
                        <MudTooltip Text="@GetWorkflowTooltip(workflowInfo)">
                            <MudIcon Icon="@GetWorkflowIcon(workflowInfo.Stage)"
                                     Color="Color.Info"
                                     Size="Size.Small"
                                     Class="ml-2 workflow-status-icon" />
                        </MudTooltip>
                    }
                </MudTd>
                <MudTd DataLabel="Financial Type">
                    @if (context.FinancialType.HasValue)
                    {
                        <MudChip T="FinancialType" Color="GetFinancialTypeColor(context.FinancialType.Value)" Size="Size.Small">
                            @context.FinancialType.Value
                        </MudChip>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </MudTd>
                <MudTd DataLabel="Flux Type">
                    <MudChip T="FluxType" Color="GetFluxTypeColor(context.FluxType)" Size="Size.Small">
                        @context.FluxType
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Last Fetching">
                    @if (context.LastFetching.HasValue)
                    {
                        <MudTooltip Text="@context.LastFetching.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")">
                            <div style="cursor: pointer;"
                                 @onclick="@(() => NavigateToFetchingHistoryPage(context.FluxId))">
                                @FormatDateTime(context.LastFetching.Value.ToLocalTime())
                            </div>
                        </MudTooltip>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </MudTd>
                <MudTd DataLabel="Fetching Status">
                    @if (context.LastFetchingStatus.HasValue)
                    {
                        <MudTooltip Text="@($"{context.LastFetchingStatus.Value} - Click to view fetching history")">
                            <div style="cursor: pointer;" @onclick="@(() => NavigateToFetchingHistoryPage(context.FluxId))">
                                <MudIcon Icon="@GetStatusIcon(context.LastFetchingStatus.Value)"
                                         Color="@GetStatusColor(context.LastFetchingStatus.Value)" />
                            </div>
                        </MudTooltip>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </MudTd>
                <MudTd DataLabel="Fetch Errors">
                    @if (context.LastFetchingId.HasValue && context.LastFetchingErrorCount > 0)
                    {
                        <MudChip T="int"
                                 Color="Color.Error"
                                 Size="Size.Small"
                                 OnClick="@(() => NavigateToErrorsPage(context.FluxId, FluxActionType.Fetching, fetchingId: context.LastFetchingId.Value))"
                                 Style="cursor: pointer;">
                            @context.LastFetchingErrorCount
                        </MudChip>
                    }
                    else
                    {
                        <span>@context.LastFetchingErrorCount</span>
                    }
                </MudTd>
                <MudTd DataLabel="Last Processing">
                    @if (context.LastProcessing.HasValue)
                    {
                        <MudTooltip Text="@context.LastProcessing.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")">
                            <div style="cursor: pointer;"
                                 @onclick="@(() => NavigateToProcessingHistoryPage(context.FluxId))">
                                @FormatDateTime(context.LastProcessing.Value.ToLocalTime())
                            </div>
                        </MudTooltip>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </MudTd>
                <MudTd DataLabel="Processing Status">
                    @if (context.LastProcessingStatus.HasValue)
                    {
                        <MudTooltip Text="@($"{context.LastProcessingStatus.Value} - Click to view processing history")">
                            <div style="cursor: pointer;" @onclick="@(() => NavigateToProcessingHistoryPage(context.FluxId))">
                                <MudIcon Icon="@GetStatusIcon(context.LastProcessingStatus.Value)"
                                         Color="@GetStatusColor(context.LastProcessingStatus.Value)" />
                            </div>
                        </MudTooltip>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </MudTd>
                <MudTd DataLabel="Process Errors">
                    @if (context.LastProcessingId.HasValue && context.LastProcessingErrorCount > 0)
                    {
                        <MudChip T="int"
                                 Color="Color.Error"
                                 Size="Size.Small"
                                 OnClick="@(() => NavigateToErrorsPage(context.FluxId, FluxActionType.ProcessFlux, processingId: context.LastProcessingId.Value))"
                                 Style="cursor: pointer;">
                            @context.LastProcessingErrorCount
                        </MudChip>
                    }
                    else
                    {
                        <span>@context.LastProcessingErrorCount</span>
                    }
                </MudTd>
                <MudTd DataLabel="Mappings">
                    @if (context.MappingsCount > 0)
                    {
                        <MudLink Href="@($"/flux-mappings/search?fluxId={context.FluxId}")">
                            <MudBadge Content="@context.MappingsCount" Color="Color.Primary" Overlap="true" Max="99" Dot="false">
                                <MudIcon Icon="@Icons.Material.Filled.StackedLineChart" />
                            </MudBadge>
                        </MudLink>
                    }
                    else
                    {
                        <MudText>0</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem OnClick="@(() => ViewDetails(context.FluxId))">
                            <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" Size="Size.Small" /> View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo($"/flux/edit/{context.FluxId}"))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Size="Size.Small" /> Edit
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => ForceFetch(context.FluxId))">
                            <MudIcon Icon="@Icons.Material.Filled.Download" Class="mr-2" Size="Size.Small" /> Force Fetch
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => ForceProcess(context.FluxId))">
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="mr-2" Size="Size.Small" /> Force Process all fetching
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <NoRecordsContent>
                <MudAlert Severity="Severity.Info" Class="my-2">No fluxes found matching your search criteria.</MudAlert>
            </NoRecordsContent>
        </MudTable>
    }
</MudContainer>

@code {
    private FluxSearchRequest searchRequest = new();

    // SearchCriteria for each field
    private SearchCriteria<int> idSearchCriteria = new();
    private SearchCriteria<DateTime> lastFetchingDateSearchCriteria = new();
    private SearchCriteria<DateTime> lastProcessingDateSearchCriteria = new();
    private SearchCriteria<int> fetchingErrorCountSearchCriteria = new();
    private SearchCriteria<int> processingErrorCountSearchCriteria = new();
    private SearchCriteria<int> mappingsCountSearchCriteria = new();

    private List<FluxSearchResponse>? fluxes;
    private bool loading = false;
    private bool isValid = false;
    private MudForm form;
    private string searchString = "";
    private FluxSearchResponse selectedItem = null;

    // Sources from API
    private List<SourceSearchDto> sources = new();

    // Use ConcurrentDictionary for thread-safe updates from SignalR
    private ConcurrentDictionary<int, ActiveWorkflowInfo> activeWorkflows = new();
    private IDialogReference dialog;

    // Classe for workflow info
    private class ActiveWorkflowInfo
    {
        public WorkflowStage Stage { get; set; }
        public Guid WorkflowId { get; set; }
    }

    private TableState tableState;

    protected override async Task OnInitializedAsync()
    {
        await LoadSourcesAsync();
        // Subscribe to SignalR updates
        await SignalRService.SubscribeAsync(nameof(Core.Messaging.Notification.Realtime.NotificationTopic.Workflow), HandleWorkflowNotification);
    }

    private async Task LoadSourcesAsync()
    {
        try
        {
            var sourceSearchRequest = new SourceSearchRequest();
            var response = await MindApi.SearchSourcesAsync(sourceSearchRequest);
            if (response != null && response.Data != null)
            {
                sources = response.Data.ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading sources: {ex.Message}", Severity.Error);
        }
    }

    private async Task<TableData<FluxSearchResponse>> ServerReload(TableState state, CancellationToken token)
    {
        tableState = state;
        loading = true;

        try
        {
            // Apply search criteria
            ApplySearchCriteria();

            // Configurer la pagination
            searchRequest.Pagination = new Pagination(state.PageSize, state.Page + 1);

            var response = await MindApi.SearchFluxAsync(searchRequest);
            fluxes = response.Data.ToList();

            return new TableData<FluxSearchResponse>
                {
                    Items = fluxes,
                    TotalItems = (int)response.TotalRecords
                };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching fluxes: {ex.Message}", Severity.Error);
            return new TableData<FluxSearchResponse>
                {
                    Items = new List<FluxSearchResponse>(),
                    TotalItems = 0
                };
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void ApplySearchCriteria()
    {
        searchRequest.LastFetching = lastFetchingDateSearchCriteria.IsSet() ? lastFetchingDateSearchCriteria : null;
        searchRequest.LastProcessing = lastProcessingDateSearchCriteria.IsSet() ? lastProcessingDateSearchCriteria : null;
        searchRequest.LastFetchingErrorCount = fetchingErrorCountSearchCriteria.IsSet() ? fetchingErrorCountSearchCriteria : null;
        searchRequest.LastProcessingErrorCount = processingErrorCountSearchCriteria.IsSet() ? processingErrorCountSearchCriteria : null;
        searchRequest.MappingsCount = mappingsCountSearchCriteria.IsSet() ? mappingsCountSearchCriteria : null;

        // La pagination est configurée dans ServerReload
    }

    private async Task Search()
    {
        // Utiliser le state actuel pour recharger les données
        await ServerReload(tableState ?? new TableState
            {
                Page = 0,
                PageSize = 10
            }, CancellationToken.None);
    }

    private async Task Reset()
    {
        searchRequest = new FluxSearchRequest();
        idSearchCriteria = new SearchCriteria<int>();
        lastFetchingDateSearchCriteria = new SearchCriteria<DateTime>();
        lastProcessingDateSearchCriteria = new SearchCriteria<DateTime>();
        fetchingErrorCountSearchCriteria = new SearchCriteria<int>();
        processingErrorCountSearchCriteria = new SearchCriteria<int>();
        mappingsCountSearchCriteria = new SearchCriteria<int>();
        searchString = "";

        if (tableState != null)
        {
            tableState.Page = 0;
            await ServerReload(tableState, CancellationToken.None);
        }
    }

    private void ViewDetails(int id)
    {
        NavigationManager.NavigateTo($"/flux/details/{id}");
    }

    private async Task ForceFetch(int id)
    {
        try
        {
            loading = true;
            var result = await MindApi.ForceFetchBackgroundAsync(id);

            if (result?.Data != null)
            {
                // Rediriger vers la page du workflow avec l'ID du workflow
                NavigationManager.NavigateTo($"/flux/workflow-live/{id}/{result.Data.WorkflowId}/true");
                Snackbar.Add($"Suivi du traitement en cours. WorkflowId: {result.Data.WorkflowId}", Severity.Info);
            }
            else
            {
                Snackbar.Add("Force fetch started in the background", Severity.Success);
                await Search();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting force fetch: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ForceProcess(int id)
    {
        try
        {
            loading = true;
            var result = await MindApi.ForceProcessBackgroundAsync(id);

            if (result?.Data != null)
            {
                // Rediriger vers la page du workflow avec l'ID du workflow
                // NavigationManager.NavigateTo($"/flux/workflow-live/{id}/{result.Data.WorkflowId}");
                Snackbar.Add($"Suivi du traitement en cours. WorkflowId: {result.Data.WorkflowId}", Severity.Info);
            }
            else
            {
                Snackbar.Add("Force process started in the background", Severity.Success);
                await Search();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting force process: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    // Helper methods for icons and colors
    private string FormatDateTime(DateTime dateTime)
    {
        var now = DateTime.Now;
        var diff = now - dateTime;

        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalHours < 1)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalDays < 1)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";

        return dateTime.ToString("MMM dd, HH:mm");
    }

    // Get appropriate color for status process
    private Color GetStatusColor(StatusProcess status)
    {
        return status switch
        {
            StatusProcess.Success => Color.Success,
            StatusProcess.Failure => Color.Error,
            StatusProcess.Processing => Color.Info,
            StatusProcess.Paused => Color.Warning,
            StatusProcess.Partially => Color.Default,
            _ => Color.Default
        };
    }

    // Get appropriate icon for status process
    private string GetStatusIcon(StatusProcess status)
    {
        return status switch
        {
            StatusProcess.Success => Icons.Material.Filled.CheckCircle,
            StatusProcess.Failure => Icons.Material.Filled.Error,
            StatusProcess.Processing => Icons.Material.Filled.Refresh,
            StatusProcess.Paused => Icons.Material.Filled.Pending,
            StatusProcess.Partially => Icons.Material.Filled.Cancel,
            _ => Icons.Material.Filled.Help
        };
    }

    // Get appropriate color for flux type
    private Color GetFluxTypeColor(FluxType type)
    {
        return type switch
        {
            FluxType.Email => Color.Info,
            FluxType.Sftp => Color.Success,
            FluxType.Api => Color.Primary,
            FluxType.HttpDownload => Color.Warning,
            FluxType.Scraping => Color.Warning,
            _ => Color.Default
        };
    }

    // Get appropriate color for financial type
    private Color GetFinancialTypeColor(FinancialType type)
    {
        return type switch
        {
            _ => Color.Default
        };
    }

    // Get appropriate color for flux state
    private Color GetFluxStateColor(FluxState state)
    {
        return state switch
        {
            FluxState.Active => Color.Success,
            FluxState.BackOfficeOnly => Color.Warning,
            FluxState.Disabled => Color.Dark,
            FluxState.Obsolete => Color.Error,
            _ => Color.Default
        };
    }

    // Filter function for MudTable
    private bool FilterFunc(FluxSearchResponse flux)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return
            flux.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            flux.FluxId.ToString().Contains(searchString) ||
            flux.FluxType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            flux.FluxState.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            (flux.FinancialType?.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    // Handler for SignalR workflow messages
    private Task HandleWorkflowNotification(object message)
    {
        // Handle the message and update activeWorkflows
        if (message is HillMetrics.Core.Messaging.Notification.Realtime.Records.WorkflowRecord notification)
        {
            if (activeWorkflows.TryGetValue(notification.FluxId, out var workflowInfo))
            {
                workflowInfo.Stage = notification.Stage;
                workflowInfo.WorkflowId = notification.WorkflowId;
            }
            else
            {
                activeWorkflows.TryAdd(notification.FluxId, new ActiveWorkflowInfo
                    {
                        Stage = notification.Stage,
                        WorkflowId = notification.WorkflowId
                    });
            }
        }
        loading = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Helper method to get the icon based on workflow stage
    private string GetWorkflowIcon(WorkflowStage stage)
    {
        return stage switch
        {
            WorkflowStage.FetchingData => Icons.Material.Filled.CloudDownload,
            WorkflowStage.Processing => Icons.Material.Filled.Cached,
            WorkflowStage.NormalizedDataInserting => Icons.Material.Filled.Storage,
            WorkflowStage.RefinedDataCopying => Icons.Material.Filled.FileCopy,
            WorkflowStage.CalculationReturnStarting or
            WorkflowStage.CalculationRiskStarting or
            WorkflowStage.CalculationWeeklyReturnStarting or
            WorkflowStage.CalcCurrencyExchangeRateStarting => Icons.Material.Filled.Calculate,
            WorkflowStage.Failed => Icons.Material.Filled.ErrorOutline, // Use outline for non-blocking error
            _ => Icons.Material.Filled.HourglassEmpty // Default for unknown or starting states
        };
    }

    // Helper method to get tooltip text for workflow status
    private string GetWorkflowTooltip(ActiveWorkflowInfo info)
    {
        return $"Workflow In Progress: {info.Stage}"; // Simple tooltip for now
    }

    private string SelectedRowClassFunc(FluxSearchResponse element, int rowNumber)
    {
        return activeWorkflows.ContainsKey(element.FluxId) ? "workflow-active-row" : string.Empty;
    }

    // Dispose the timer when the component is removed
    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from SignalR
        await SignalRService.UnsubscribeAsync(nameof(Core.Messaging.Notification.Realtime.NotificationTopic.Workflow), HandleWorkflowNotification);
        GC.SuppressFinalize(this);
    }

    private void NavigateToErrorsPage(
        int fluxId,
        FluxActionType? actionType = null,
        int? fetchingId = null,
        int? processingId = null)
    {
        // Construction d'une chaîne de requête pour passer les paramètres
        var query = $"?fluxId={fluxId}";

        if (actionType.HasValue)
        {
            query += $"&actionType={actionType.Value}";
        }

        if (fetchingId.HasValue)
        {
            query += $"&fetchingId={fetchingId.Value}";
        }

        if (processingId.HasValue)
        {
            query += $"&processingId={processingId.Value}";
        }

        // Naviguer vers la page de recherche d'erreurs avec les paramètres
        NavigationManager.NavigateTo($"/flux/errors{query}");
    }

    private void NavigateToFetchingHistoryPage(int fluxId)
    {
        NavigationManager.NavigateTo($"/flux/fetching-history?fluxId={fluxId}");
    }

    private void NavigateToProcessingHistoryPage(int fluxId)
    {
        NavigationManager.NavigateTo($"/flux/processing-history?fluxId={fluxId}");
    }
}