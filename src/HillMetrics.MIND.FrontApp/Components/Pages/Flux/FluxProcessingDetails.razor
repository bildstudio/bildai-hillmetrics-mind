@page "/flux/processing-details/{ProcessingHistoryId:int}"
@using HillMetrics.MIND.API.Contracts.Responses
@using HillMetrics.MIND.API.Contracts.Responses.Flux
@using HillMetrics.Core
@using HillMetrics.Core.Common
@using System.Text.Json
@using HillMetrics.MIND.FrontApp.Services
@using HillMetrics.MIND.API.SDK.V1
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
        <MudText Typo="Typo.h5" Class="ml-2 mb-4 d-flex justify-center">Loading processing details...</MudText>
    }
    else if (processingHistory == null)
    {
        <MudAlert Severity="Severity.Error" Class="my-4">Processing history not found or error loading data.</MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/flux/processing-history"))">
            Back to Processing History
        </MudButton>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <div>
                    <MudText Typo="Typo.h4">Processing History Details</MudText>
                    <MudText Typo="Typo.subtitle1" Class="mt-1">ID: @processingHistory.FluxProcessingHistory.Id</MudText>
                </div>
                <div>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                        <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/flux/details/{processingHistory.FluxProcessingHistory.FluxId}"))">
                            <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2" /> View Flux
                        </MudButton>
                    </MudButtonGroup>
                </div>
            </MudItem>

            <!-- Basic Information -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Basic Information</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Flux ID" Value="@processingHistory.FluxProcessingHistory.FluxId.ToString()" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Processing Start Date" Value="@processingHistory.FluxProcessingHistory.StartedAt.ToString("yyyy-MM-dd HH:mm:ss")" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" />
                            </MudItem>
                            @if (processingHistory.FluxProcessingHistory.EndedAt.HasValue)
                            {
                                <MudItem xs="12" md="6">
                                    <MudTextField Label="Processing End Date" Value="@processingHistory.FluxProcessingHistory.EndedAt.Value.ToString("yyyy-MM-dd HH:mm:ss")" ReadOnly="true"
                                                Variant="Variant.Outlined" FullWidth="true" />
                                </MudItem>
                            }
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Duration" Value="@GetDuration(processingHistory.FluxProcessingHistory)" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Correlation ID" Value="@processingHistory.FluxProcessingHistory.CorrelationId" ReadOnly="true"
                                            Variant="Variant.Outlined" FullWidth="true" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Content Information -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Content Information</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Icon="@Icons.Material.Filled.DataUsage" Color="Color.Primary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudField Label="Content Items" Variant="Variant.Outlined">
                                    <MudBadge Content="@processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Count" Color="Color.Primary" Overlap="true"
                                            Class="d-flex align-center gap-2">
                                        <MudIcon Icon="@Icons.Material.Filled.DataUsage" />
                                        <MudText>@processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Count items</MudText>
                                    </MudBadge>
                                </MudField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudField Label="Processing Status Summary" Variant="Variant.Outlined">
                                    <div class="d-flex gap-2 flex-wrap">
                                        @{
                                            var successCount = processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Count(c => c.Status == StatusProcess.Success);
                                            var failureCount = processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Count(c => c.Status == StatusProcess.Failure);
                                            var processingCount = processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Count(c => c.Status == StatusProcess.Processing);
                                            var otherCount = processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Count(c =>
                                                c.Status != StatusProcess.Success &&
                                                c.Status != StatusProcess.Failure &&
                                                c.Status != StatusProcess.Processing);
                                        }

                                        @if (successCount > 0)
                                        {
                                            <MudChip T="Color" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success">
                                                @successCount Success
                                            </MudChip>
                                        }

                                        @if (failureCount > 0)
                                        {
                                            <MudChip T="Color" Icon="@Icons.Material.Filled.Error" Color="Color.Error">
                                                @failureCount Failed
                                            </MudChip>
                                        }

                                        @if (processingCount > 0)
                                        {
                                            <MudChip T="Color" Icon="@Icons.Material.Filled.Pending" Color="Color.Info">
                                                @processingCount Processing
                                            </MudChip>
                                        }

                                        @if (otherCount > 0)
                                        {
                                            <MudChip T="Color" Icon="@Icons.Material.Filled.Help" Color="Color.Default">
                                                @otherCount Other
                                            </MudChip>
                                        }
                                    </div>
                                </MudField>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Content Processing History -->
            @if (processingHistory.FluxProcessingHistory.FluxProcessingContentHistory != null &&
                 processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Any())
            {
                <MudItem xs="12">
                    <MudCard Elevation="3" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Content Processing Items</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudBadge Content="@processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Count" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.DataUsage" Color="Color.Primary" />
                                </MudBadge>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent Style="padding: 0;">
                            <MudTable Items="@processingHistory.FluxProcessingHistory.FluxProcessingContentHistory" Dense="true"
                                      Hover="true" Bordered="true" Striped="true">
                                <HeaderContent>
                                    <MudTh>ID</MudTh>
                                    <MudTh>Content ID</MudTh>
                                    <MudTh>Status</MudTh>
                                    <MudTh>Start Date</MudTh>
                                    <MudTh>End Date</MudTh>
                                    <MudTh>Duration</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="ID">@context.Id</MudTd>
                                    <MudTd DataLabel="Content ID">@context.FluxIdentificationContentHistoryId</MudTd>
                                    <MudTd DataLabel="Status">
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@GetStatusIcon(context.Status)"
                                                    Color="@GetStatusColor(context.Status)"
                                                    Size="Size.Small"
                                                    Class="mr-2" />
                                            <MudText>@context.Status</MudText>
                                        </div>
                                    </MudTd>
                                    <MudTd DataLabel="Start Date">
                                        <MudTooltip Text="@context.StartedAt.ToString("yyyy-MM-dd HH:mm:ss")">
                                            <div>@FormatDateTime(context.StartedAt)</div>
                                        </MudTooltip>
                                    </MudTd>
                                    <MudTd DataLabel="End Date">
                                        @if (context.EndedAt.HasValue)
                                        {
                                            <MudTooltip Text="@context.EndedAt.Value.ToString("yyyy-MM-dd HH:mm:ss")">
                                                <div>@FormatDateTime(context.EndedAt.Value)</div>
                                            </MudTooltip>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </MudTd>
                                    <MudTd DataLabel="Duration">
                                        @if (context.EndedAt.HasValue)
                                        {
                                            var duration = context.EndedAt.Value - context.StartedAt;
                                            <span>@FormatDuration(duration)</span>
                                        }
                                        else if (context.Status == StatusProcess.Processing)
                                        {
                                            var duration = DateTime.Now - context.StartedAt;
                                            <span>@FormatDuration(duration) (ongoing)</span>
                                        }
                                        else
                                        {
                                            <span>-</span>
                                        }
                                    </MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    <MudAlert Severity="Severity.Info" Class="ma-2">No content processing items found.</MudAlert>
                                </NoRecordsContent>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            <!-- Extraction Metadata -->
            @if (!string.IsNullOrEmpty(processingHistory.FluxProcessingHistory.Metadata))
            {
                <MudItem xs="12">
                    <MudCard Elevation="3" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Extraction Metadata</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Primary" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudPaper Elevation="0" Class="pa-4" Style="background-color: #f5f5f5; overflow-x: auto; max-height: 400px;">
                                <pre style="margin: 0; white-space: pre-wrap;">@FormatJson(processingHistory.FluxProcessingHistory.Metadata)</pre>
                            </MudPaper>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }

            <!-- Quick Links -->
            <MudItem xs="12">
                <MudCard Elevation="3" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Quick Links</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIcon Icon="@Icons.Material.Filled.Link" Color="Color.Primary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="4">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                         OnClick="@(() => NavigationManager.NavigateTo($"/flux/processing-history?fluxId={processingHistory.FluxProcessingHistory.FluxId}"))">
                                    <MudIcon Icon="@Icons.Material.Filled.List" Class="mr-2" /> All Processing History
                                </MudButton>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="4">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                         OnClick="@(() => NavigationManager.NavigateTo($"/flux/details/{processingHistory.FluxProcessingHistory.FluxId}"))">
                                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="mr-2" /> Flux Details
                                </MudButton>
                            </MudItem>
                            @if (processingHistory.FluxProcessingHistory.FluxProcessingContentHistory.Any(c => c.Status == StatusProcess.Failure))
                            {
                                <MudItem xs="12" sm="6" md="4">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true"
                                             OnClick="@(() => NavigationManager.NavigateTo($"/flux/errors?fluxId={processingHistory.FluxProcessingHistory.FluxId}"))">
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Class="mr-2" /> View Errors
                                    </MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int ProcessingHistoryId { get; set; }

    private FluxProcessingResponse? processingHistory;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProcessingHistoryData();
    }

    private async Task LoadProcessingHistoryData()
    {
        try
        {
            loading = true;
            var response = await MindApi.GetProcessingHistoryAsync(ProcessingHistoryId);
            processingHistory = response.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading processing history details: {ex.Message}", Severity.Error);
            processingHistory = null;
        }
        finally
        {
            loading = false;
        }
    }

    private string GetDuration(FluxProcessingHistoryResponse processing)
    {
        if (!processing.EndedAt.HasValue)
        {
            // Si le traitement est en cours
            var currentDuration = DateTime.Now - processing.StartedAt;
            return $"{FormatDuration(currentDuration)} (ongoing)";
        }

        var duration = processing.EndedAt.Value - processing.StartedAt;
        return FormatDuration(duration);
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalDays >= 1)
            return $"{duration.Days}d {duration.Hours}h {duration.Minutes}m";
        if (duration.TotalHours >= 1)
            return $"{duration.Hours}h {duration.Minutes}m {duration.Seconds}s";
        if (duration.TotalMinutes >= 1)
            return $"{duration.Minutes}m {duration.Seconds}s";

        return $"{duration.Seconds}.{duration.Milliseconds}s";
    }

    private string FormatDateTime(DateTime dateTime)
    {
        var now = DateTime.Now;
        var diff = now - dateTime;

        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalHours < 1)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalDays < 1)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";

        return dateTime.ToString("MMM dd, HH:mm");
    }

    private string FormatJson(string json)
    {
        try
        {
            var options = new JsonSerializerOptions
            {
                WriteIndented = true
            };

            var jsonElement = JsonSerializer.Deserialize<JsonElement>(json);
            return JsonSerializer.Serialize(jsonElement, options);
        }
        catch
        {
            return json;
        }
    }

    // Helper methods for icons and colors
    private string GetStatusIcon(StatusProcess status)
    {
        return status switch
        {
            StatusProcess.Success => Icons.Material.Filled.CheckCircle,
            StatusProcess.Failure => Icons.Material.Filled.Error,
            StatusProcess.Warning => Icons.Material.Filled.Warning,
            StatusProcess.Processing => Icons.Material.Filled.Pending,
            StatusProcess.Paused => Icons.Material.Filled.Block,
            StatusProcess.Partially => Icons.Material.Filled.LocalParking,
            _ => Icons.Material.Filled.HelpOutline
        };
    }

    private Color GetStatusColor(StatusProcess status)
    {
        return status switch
        {
            StatusProcess.Success => Color.Success,
            StatusProcess.Failure => Color.Error,
            StatusProcess.Warning => Color.Warning,
            StatusProcess.Processing => Color.Info,
            StatusProcess.Paused => Color.Default,
            StatusProcess.Partially => Color.Secondary,
            _ => Color.Default
        };
    }
}