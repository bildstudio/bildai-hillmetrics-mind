@page "/document-type/search"
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset
@using HillMetrics.Core.Search
@using HillMetrics.Core.Financial
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset.DocumentTypes
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset.DocumentTypes
@using HillMetrics.MIND.API.SDK
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.Normalized.Domain.Contracts.AI.Dataset
@using Refit
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h4" Class="mb-4">Document Types</MudText>
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Add"
            Href="/document-type/create"
            Class="align-self-start">
                Create New Document Type
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudCard Class="mb-4">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid Spacing="1">
                    <!-- Name -->
                    <MudItem xs="12" md="4">
                        <MudTextField @bind-Value="searchRequest.Name"
                                     Label="Document Type Name"
                                     Variant="Variant.Outlined"
                                     Placeholder="Search by name..."
                                     Immediate="true"
                                     DebounceInterval="500"
                                     OnDebounceIntervalElapsed="Search"
                                     Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.Search"/>
                    </MudItem>

                    <!-- Financial Type -->
                    <MudItem xs="12" md="4">
                        <MudSelect T="FinancialType?" @bind-Value="searchRequest.FinancialType"
                                   Label="Financial Type" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((FinancialType?)null)">All</MudSelectItem>
                            @foreach (var type in Enum.GetValues<FinancialType>())
                            {
                                <MudSelectItem T="FinancialType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search" Size="Size.Small">Search</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset" Size="Size.Small">Reset</MudButton>
        </MudCardActions>
    </MudCard>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else
    {
        <MudTable ServerData="@ServerReload"
        Hover="true" Bordered="true" Striped="true"
        Dense="true" @bind-SelectedItem="selectedItem"
                  T="DocumentTypeDto"
        Breakpoint="Breakpoint.Sm" @ref="_table" RowsPerPage="100">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="ml-2">Document Types List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium"
                Class="mt-0 mb-3" Margin="Margin.Dense" Dense="true" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="Id" T="DocumentTypeDto">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Name" T="DocumentTypeDto">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="FinancialType" T="DocumentTypeDto">Financial Type</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Financial Type">
                    <MudChip T="FinancialType" Color="Color.Primary" Size="Size.Small">
                        @context.FinancialType
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem OnClick="@(() => EditDocumentType(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Size="Size.Small" /> Edit
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => DeleteDocumentType(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" Size="Size.Small" Color="Color.Error" /> Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <NoRecordsContent>
                <MudAlert Severity="Severity.Info" Class="my-2">No document types found matching your search criteria.</MudAlert>
            </NoRecordsContent>
        </MudTable>
    }
</MudContainer>

@code {
    private SearchDocumentTypeRequest searchRequest = new();
    private bool loading = false;
    private bool isValid = false;
    private MudForm form;
    private string searchString = "";
    private DocumentTypeDto selectedItem = null;
    private TableState tableState;
    MudTable<DocumentTypeDto> _table;

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    private async Task<TableData<DocumentTypeDto>> ServerReload(TableState state, CancellationToken token)
    {
        tableState = state;
        loading = true;

        try
        {
            searchRequest.Pagination = new Pagination(state.PageSize, state.Page + 1);

            ListDocumentTypesResponse response = await MindApi.SearchDocumentTypesAsync(searchRequest);

            return new TableData<DocumentTypeDto>
            {
                Items = response.Data,
                TotalItems = (int)response.TotalRecords
            };
        }
        catch (ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Error loading data: {hillEx.Errors[0].Message}", Severity.Error);

            return new TableData<DocumentTypeDto>
            {
                Items = new List<DocumentTypeDto>(),
                TotalItems = 0
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching document types: {ex.Message}", Severity.Error);
            return new TableData<DocumentTypeDto>
            {
                Items = new List<DocumentTypeDto>(),
                TotalItems = 0
            };
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task Search()
    {
        await ServerReload(tableState ?? new TableState
        {
            Page = 0,
            PageSize = 10
        }, CancellationToken.None);
    }

    private async Task Reset()
    {
        searchRequest = new SearchDocumentTypeRequest();
        searchString = "";

        if (tableState != null)
        {
            tableState.Page = 0;
            await ServerReload(tableState, CancellationToken.None);
        }
    }

    private void EditDocumentType(int id)
    {
        NavigationManager.NavigateTo($"/document-type/edit/{id}");
    }

    private async Task DeleteDocumentType(int id)
    {
        var dialog = await DialogService.ShowMessageBox(
            "Confirm Deletion",
            "Are you sure you want to delete this document type? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel"
        );

        if (dialog == true)
        {
            try
            {
                var result = await MindApi.DeleteDocumentTypeAsync(id);
                if (!string.IsNullOrEmpty(result?.Message))
                {
                    Snackbar.Add(result.Message, Severity.Success);
                    if (_table != null)
                        await _table.ReloadServerData();
                }
            }
            catch (ApiException apiEx)
            {
                var hillEx = apiEx.ToHillMetricsApiException();

                Snackbar.Add($"Error loading data: {hillEx.Errors[0].Message}", Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting document type: {ex.Message}", Severity.Error);
            }
        }
    }
}