@page "/prompt/search"
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset
@using HillMetrics.Core.Search
@using HillMetrics.Core.Financial
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset.DocumentTypes
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset
@using HillMetrics.MIND.API.Contracts.Responses.AiDataset.DocumentTypes
@using HillMetrics.MIND.API.Contracts.Responses.AiPrompts
@using HillMetrics.MIND.API.Contracts.Responses.Languages
@using HillMetrics.MIND.API.SDK
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.Normalized.Domain.Contracts.AI.Dataset
@using Refit
@using Core.AI;
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h4" Class="mb-4">Prompts</MudText>
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       Href="/prompt/create"
                       Class="align-self-start">
                Create a new Prompt
            </MudButton>
        </MudItem>
    </MudGrid>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else
    {
         <MudCard Class="mb-4">
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid Spacing="1">
                    <!-- Language -->
                    <MudItem xs="12" md="4">
                        <MudSelect T="int?" @bind-Value="selectedLanguageId"
                                   Label="Language" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((int?)null)">All</MudSelectItem>
                            @foreach (var language in languages)
                            {
                                <MudSelectItem T="int?" Value="@language.Id">@language.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- PromptTaskType -->
                    <MudItem xs="12" md="4">
                        <MudSelect T="PromptTaskType?" @bind-Value="selectedTaskType"
                                   Label="Task Type" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((PromptTaskType?)null)">All</MudSelectItem>
                            @foreach (var type in Enum.GetValues<PromptTaskType>())
                            {
                                <MudSelectItem T="PromptTaskType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- PromptType -->
                    <MudItem xs="12" md="4">
                        <MudSelect T="PromptType?" @bind-Value="selectedPromptType"
                                   Label="Type" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
                            <MudSelectItem Value="@((PromptType?)null)">All</MudSelectItem>
                            @foreach (var type in Enum.GetValues<PromptType>())
                            {
                                <MudSelectItem T="PromptType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search" Size="Size.Small">Search</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset" Size="Size.Small">Reset</MudButton>
        </MudCardActions>
    </MudCard>

        <MudTable ServerData="@ServerReload"
                  Hover="true" Bordered="true" Striped="true"
                  Dense="true" @bind-SelectedItem="selectedItem"
                  T="AiPromptDto"
                  Breakpoint="Breakpoint.Sm"
                  @ref="_table">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Class="ml-2">Prompts List</MudText>
                <MudSpacer />
@*                 <MudTextField @bind-Value="searchString" Placeholder="Search"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0 mb-3" Margin="Margin.Dense" Dense="true" /> *@
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="Id" T="AiPromptDto">ID</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="TaskType" T="AiPromptDto">TaskType</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Type" T="AiPromptDto">Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Type" T="AiPromptDto">Language</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="TaskType">@context.TaskType</MudTd>
                <MudTd DataLabel="Type">@context.Type</MudTd>
                <MudTd DataLabel="Language">@(languagesDictionary[context.LanguageId])</MudTd>
                
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
                        <MudMenuItem OnClick="@(() => EditPrompt(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Size="Size.Small" /> Edit
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => DeletePrompt(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" Size="Size.Small" Color="Color.Error" /> Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <NoRecordsContent>
                <MudAlert Severity="Severity.Info" Class="my-2">No prompts found matching your search criteria.</MudAlert>
            </NoRecordsContent>
        </MudTable>
    }
</MudContainer>

@code {
    private bool loading = false;
    private bool isValid = false;
    private MudForm form;
    private AiPromptDto selectedItem = null;
    private TableState tableState;
    private string searchString = "";
    MudTable<AiPromptDto> _table;
    private int? selectedLanguageId = null;
    private PromptTaskType? selectedTaskType = null;
    private PromptType? selectedPromptType = null;
    private List<LanguageDto> languages = [];
    private Dictionary<int, string> languagesDictionary = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadLanguagesAsync();
        //await Search();
    }

    private async Task LoadLanguagesAsync()
    {

        try
        {
            if(languages.Count == 0)
            {
                var languagesResponse = await MindApi.ListLanguagesAsync();
                languages = languagesResponse.Data.ToList();
                languagesDictionary = languages.ToDictionary(s => s.Id, s => s.Name);
            }
            
        }
        catch (ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Failed to load languages: {hillEx.Errors[0].Message}", Severity.Error);


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load languages: {ex.Message}", Severity.Error);
        }
    }

    private async Task<TableData<AiPromptDto>> ServerReload(TableState state, CancellationToken token)
    {
        tableState = state;
        loading = true;

        try
        {

            ListAiPromptsResponse response = await MindApi.SearchAiPromptsAsync(selectedLanguageId, selectedTaskType, selectedPromptType, state.Page + 1, state.PageSize);

            return new TableData<AiPromptDto>
            {
                Items = response.Data,
                TotalItems = (int)response.TotalRecords
            };
        }
        catch (ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Error searching prompts: {hillEx.Errors[0].Message}", Severity.Error);

            return new TableData<AiPromptDto>
            {
                Items = new List<AiPromptDto>(),
                TotalItems = 0
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching prompts: {ex.Message}", Severity.Error);
            return new TableData<AiPromptDto>
            {
                Items = new List<AiPromptDto>(),
                TotalItems = 0
            };
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task Search()
    {
        await ServerReload(tableState ?? new TableState
        {
            Page = 0,
            PageSize = 10
        }, CancellationToken.None);
    }

    private async Task Reset()
    {
        selectedLanguageId = null;
        selectedPromptType = null;
        selectedTaskType = null;

        if (tableState != null)
        {
            tableState.Page = 0;
            await ServerReload(tableState, CancellationToken.None);
        }
    }

    private void EditPrompt(int id)
    {
        NavigationManager.NavigateTo($"/prompt/edit/{id}");
    }

    private async Task DeletePrompt(int id)
    {
        var dialog = await DialogService.ShowMessageBox(
            "Confirm Deletion",
            "Are you sure you want to delete this prompt? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel"
        );

        if (dialog == true)
        {
            try
            {
                var result = await MindApi.DeleteAiPromptAsync(id);
                if (!string.IsNullOrEmpty(result?.Message))
                {
                    Snackbar.Add(result.Message, Severity.Success);
                    if (_table != null)
                        await _table.ReloadServerData();
                }
            }
            catch (ApiException apiEx)
            {
                var hillEx = apiEx.ToHillMetricsApiException();

                Snackbar.Add($"Error deleting prompt: {hillEx.Errors[0].Message}", Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting prompt: {ex.Message}", Severity.Error);
            }
        }
    }
}