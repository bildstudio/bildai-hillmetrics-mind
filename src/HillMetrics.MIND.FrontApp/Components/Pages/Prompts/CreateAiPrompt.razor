@page "/prompt/edit/{LanguageId:int}/{TaskTypeParam}/{create:bool}"
@using HillMetrics.Core.AI
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset
@using HillMetrics.MIND.API.Contracts.Requests.AiDataset.DocumentTypes
@using HillMetrics.MIND.API.Contracts.Requests.AiPrompts
@using HillMetrics.MIND.API.Contracts.Requests.Languages
@using HillMetrics.MIND.API.Contracts.Responses.Languages
@using HillMetrics.MIND.API.SDK
@using HillMetrics.Normalized.Domain.Contracts.AI.Dataset
@using HillMetrics.MIND.API.SDK.V1
@using HillMetrics.Core.Financial
@using Refit
@using API.Contracts.Responses.AiPrompts;
@inject IMindAPI MindApi
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService


@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{

    <BackToComponent ReturnUrl="/prompt/search"/>

    <MudText Typo="Typo.h4" Class="mb-4">@(Create ? "Create" : "Edit") Prompt</MudText>

    <MudCard Class="mb-6">
        <MudCardContent>
            <MudGrid Spacing="3" AlignItems="Center">

                <!-- Task Type -->
                <MudItem xs="12" md="3">
                    <MudText Typo="Typo.subtitle2" Class="text-secondary">
                        Task Type:
                    </MudText>
                    <MudText Typo="Typo.body1">
                        <b>@TaskTypeParam</b>
                    </MudText>
                </MudItem>

                <!-- Language -->
                <MudItem xs="12" md="3">
                    <MudText Typo="Typo.subtitle2" Class="text-secondary">
                        Language:
                    </MudText>
                    <MudText Typo="Typo.body1">
                        <b>@languagesDictionary[LanguageId]</b>
                    </MudText>
                </MudItem>
                <MudItem xs="12" md="3"></MudItem>

                <!-- Prompt Type Selector + Add Button in one row -->
                <MudItem xs="12" md="3">
                    <MudStack Row="true" AlignItems="AlignItems.Center">

                        <!-- Select Dropdown -->
                        <MudSelect T="PromptType?" @bind-Value="selectedPromptType"
                                   Label="Select Type"
                                   Variant="Variant.Outlined"
                                   Dense="true"
                                   Margin="Margin.Dense"
                                   >
                            <MudSelectItem Value="@((PromptType?)null)">Select type</MudSelectItem>
                            @foreach (var type in promptTypes)
                            {
                                <MudSelectItem T="PromptType?" Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>

                        <!-- Add Button with + Icon -->
                        <MudTooltip Text="Add selected prompt type">
                            <MudButton OnClick="AddNewType"
                                       Color="Color.Primary"
                                       Variant="Variant.Filled"
                                       Disabled="@(!selectedPromptType.HasValue)">
                                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-1" />
                                Add
                            </MudButton>
                        </MudTooltip>

                    </MudStack>
                </MudItem>

            </MudGrid>
        </MudCardContent>
    </MudCard>


    <MudDivider Class="my-6" />

    <MudExpansionPanels>
    @foreach (var (promptId, savePromptRequest) in _promptDictionary)
    {
        <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudText>Type : <b>@savePromptRequest.Prompt.Type</b> @(promptId <=0 ? "(New, Not saved)" : "")</MudText>
                        <MudIconButton Class="ml-auto" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeletePrompt(promptId, savePromptRequest.Prompt.Type)" />
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudCard Class="mb-6">
                        <MudCardContent>
                            <MudGrid Spacing="3">

                                <!-- Divider -->
                                <MudItem xs="12">
                                    <MudText Typo="Typo.subtitle1" Class="mt-2">Prompt Contents</MudText>
                                </MudItem>

                                @foreach (var content in savePromptRequest.Prompt.Contents)
                                {
                                    <MudItem xs="12">
                                        <MudPaper Class="p-4 mb-3 border rounded" Elevation="0">
                                            <MudGrid>
                                                <MudItem xs="12" md="2">
                                                    <MudText Typo="Typo.subtitle2">Type: @content.Type</MudText>
                                                </MudItem>

                                                <MudItem xs="12" md="9">
                                                    <MudTextField @bind-Value="content.Content"
                                                                  Label="Content"
                                                                  Lines="5"
                                                                  FullWidth="true"
                                                                  Required="true"
                                                                  RequiredError="Content is required" />
                                                </MudItem>

                                                <MudItem xs="12" md="1" Class="d-flex justify-end align-end">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                   Color="Color.Error"
                                                                   OnClick="() => RemoveContent(savePromptRequest, content)"
                                                                   Size="Size.Medium"
                                                                   AriaLabel="Remove Content" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudPaper>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>

                        <MudCardActions Class="px-4 pb-4">
                            <MudGrid Spacing="2" AlignItems="Center">
                                <MudItem xs="12" md="4">
                                    <MudSelect T="ContentType?" @bind-Value="selectedContentType"
                                               Label="Add Content Type"
                                               Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense" FullWidth="true">
                                        <MudSelectItem Value="@((ContentType?)null)">Select content type</MudSelectItem>
                                        @foreach (var type in contentTypes)
                                        {
                                            <MudSelectItem T="ContentType?" Value="@type">@type</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>

                                <MudItem xs="12" md="2">
                                    <MudButton OnClick="() => AddNewContent(savePromptRequest)"
                                               Disabled="@(!selectedContentType.HasValue)"
                                               Color="Color.Primary"
                                               Variant="Variant.Filled"
                                               StartIcon="@Icons.Material.Filled.Add"
                                               FullWidth="true">
                                        Add Content
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudCardActions>
                    </MudCard>

                    <MudDivider Class="my-6" />

                    <MudButton OnClick="() => SavePrompt(savePromptRequest)"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               Size="Size.Large"
                               Disabled="@(!CanSave(savePromptRequest.Prompt))">
                        @(promptId <= 0 ? "Create" : "Update") Prompt
                    </MudButton>
                </ChildContent>
        </MudExpansionPanel>
    }
    </MudExpansionPanels>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public int LanguageId { get; set; }

    [Parameter]
    public string TaskTypeParam { get; set; }

    [Parameter]
    public bool Create { get; set; }

    private Dictionary<int, SaveAiPromptRequest> _promptDictionary = new Dictionary<int, SaveAiPromptRequest>();

    private List<LanguageDto> languages = [];
    private Dictionary<int, string> languagesDictionary = new Dictionary<int, string>();
    private readonly List<ContentType> contentTypes = Enum.GetValues<ContentType>().ToList();
    private readonly List<PromptType> promptTypes = Enum.GetValues<PromptType>().ToList();
    private ContentType? selectedContentType = null;
    private PromptType? selectedPromptType = null;

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadLanguagesAsync();
        if (!Create)
        {
            await LoadPromptsAsync();
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task LoadLanguagesAsync()
    {

        try
        {
            if (languages.Count == 0)
            {
                var languagesResponse = await MindApi.ListLanguagesAsync();
                languages = languagesResponse.Data.ToList();
                languagesDictionary = languages.ToDictionary(s => s.Id, s => s.Name);
            }

        }
        catch (ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Failed to load languages: {hillEx.Errors[0].Message}", Severity.Error);


        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load languages: {ex.Message}", Severity.Error);
        }
    }



    private async Task LoadPromptsAsync()
    {
        try
        {
            Enum.TryParse<PromptTaskType>(TaskTypeParam, true, out PromptTaskType promptTaskType);

            var distinctData = await MindApi.ListAiPromptAsync(LanguageId, promptTaskType);

            _promptDictionary.Clear();
            foreach (var item in distinctData.Data)
            {
                promptTypes.Remove(item.Type);
                _promptDictionary.Add(item.Id, new SaveAiPromptRequest
                {
                    Prompt = item
                });
            }

        }
        catch (ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Error loading data: {hillEx.Errors[0].Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool CanSave(AiPromptDto aiPrompt)
    {
        return aiPrompt != null && aiPrompt.LanguageId > 0 && aiPrompt.Contents.Count > 0 && aiPrompt.Contents.All(s => !string.IsNullOrEmpty(s.Content));
    }

    private async Task SavePrompt(SaveAiPromptRequest request)
    {
        try
        {
            if (!Create && request.Prompt.Id > 0)
            {
                var result = await MindApi.UpdateAiPromptAsync(request.Prompt.Id, request);
                Snackbar.Add("Prompt updated successfully", Severity.Success);
                request.Prompt = result.Data;
            }
            else
            {
                var result = await MindApi.CreateAiPromptAsync(request);

                if (result.Data != null)
                {
                    Snackbar.Add("Prompt created successfully", Severity.Success);
                    request.Prompt = result.Data;
                    NavigationManager.NavigateTo($"/prompt/edit/{LanguageId}/{TaskTypeParam}/false", true);
                }
                else
                {
                    Snackbar.Add("Failed to create prompt", Severity.Error);
                }
            }
        }
        catch (ApiException apiEx)
        {
            var hillEx = apiEx.ToHillMetricsApiException();

            Snackbar.Add($"Error saving Prompt: {hillEx.Errors[0].Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving Prompt: {ex.Message}", Severity.Error);
        }
    }

    private void AddNewContent(SaveAiPromptRequest request)
    {
        if (!selectedContentType.HasValue)
            return;

        request.Prompt.Contents.Add(new AiPromptContentDto("", selectedContentType.Value));
        contentTypes.Remove(selectedContentType.Value);
        selectedContentType = null;
    }
    //
    private void RemoveContent(SaveAiPromptRequest request, AiPromptContentDto content)
    {
        contentTypes.Add(content.Type);
        request.Prompt.Contents.Remove(content);
        selectedContentType = null;
    }

    private void AddNewType()
    {
        if (!selectedPromptType.HasValue)
            return;

        Enum.TryParse<PromptTaskType>(TaskTypeParam, true, out PromptTaskType promptTaskType);
        _promptDictionary.Add(-(int)selectedPromptType.Value, new SaveAiPromptRequest
        {
            Prompt = new AiPromptDto
            {
                LanguageId = LanguageId,
                TaskType = promptTaskType,
                Type = selectedPromptType.Value,
                Contents = []
            }
        });

        promptTypes.Remove(selectedPromptType.Value);

        selectedPromptType = null;
    }

    private async Task DeletePrompt(int promptId, PromptType type)
    {
        if(promptId > 0)
        {
            var dialog = await DialogService.ShowMessageBox(
                                "Confirm Deletion",
                                "Are you sure you want to delete this prompt? This action cannot be undone.",
                                yesText: "Delete",
                                cancelText: "Cancel"
                );

            if (dialog == true)
            {
                try
                {
                    var result = await MindApi.DeleteAiPromptAsync(promptId);
                    if (!string.IsNullOrEmpty(result?.Message))
                    {
                        Snackbar.Add(result.Message, Severity.Success);
                    }

                    _promptDictionary.Remove(promptId);
                    promptTypes.Add(type);

                }
                catch (ApiException apiEx)
                {
                    var hillEx = apiEx.ToHillMetricsApiException();

                    Snackbar.Add($"Error deleting prompt: {hillEx.Errors[0].Message}", Severity.Error);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error deleting prompt: {ex.Message}", Severity.Error);
                }
            }
        }
        else
        {
            _promptDictionary.Remove(promptId);
            promptTypes.Add(type);
        }
    }
}