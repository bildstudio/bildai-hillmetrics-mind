trigger:
  branches:
    include:
      - dev
  paths:
    exclude:
      - 'src/HillMetrics.MIND.FrontApp/*'

resources:
  repositories:
  - repository: self
  - repository: Core
    type: git
    name: HM/HillMetrics.Core
  - repository: FinancialData
    type: git
    name: HM/HillMetrics.FinancialData
  - repository: Orchestrator
    type: git
    name: HM/HillMetrics.Orchestrator
  - repository: Audit
    type: git
    name: HM/HillMetrics.Audit
  - repository: Batchs
    type: git
    name: HM/HillMetrics.Batchs
  - repository: PythonApp
    type: git
    name: HM/HillMetrics.PythonApp
  - repository: Calculs
    type: git
    name: HM/HillMetrics.Calculs
  - repository: Business
    type: git
    name: HM/HillMetrics.Business

variables:
  dockerRegistryServiceConnection: 'hillm-stage-acr'
  imageRepository: 'hillm-stage/mindapi'
  containerRegistry: 'crhillmstage.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/$(Build.Repository.Name)/infra/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: sonar
  displayName: Sonar Analysis
  jobs:
  - job: sonar
    displayName: Sonar Analysis
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
      fetchDepth: 0
    - checkout: Core
      fetchDepth: 0
    - checkout: FinancialData
      fetchDepth: 0
    - checkout: Orchestrator
      fetchDepth: 0
    - checkout: Audit
      fetchDepth: 0
    - checkout: Batchs
      fetchDepth: 0
    - checkout: PythonApp
      fetchDepth: 0
    - checkout: Calculs
      fetchDepth: 0
    - checkout: Business
      fetchDepth: 0

    - task: SonarCloudPrepare@3
      inputs:
        SonarQube: 'SonarCloud'
        organization: 'hillmetrics'
        scannerMode: 'dotnet'
        projectKey: 'HillMetrics_HillMetrics.MIND'
        projectName: 'HillMetrics.MIND'
        extraProperties: |
           sonar.projectBaseDir=/home/vsts/work/1/s/HillMetrics.MIND
           sonar.exclusions=src/HillMetrics.MIND.API/bin/Release/net8.0/.playwright/**/*, src/HillMetrics.MIND.API/bin/Debug/net8.0/.playwright/**/*, tests/HillMetrics.MIND.API.Tests/bin/**/*
           sonar.cs.vscoveragexml.reportsPaths=**/*coverage.xml

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(Build.SourcesDirectory)/$(Build.Repository.Name)/HillMetrics.MIND.sln'
        arguments: '--configuration=release'

    - task: DotNetCoreCLI@2
      displayName: 'Install dotnet-coverage'
      inputs:
        command: 'custom'
        custom: "tool"
        arguments: 'install -g dotnet-coverage'

    - task: Bash@3
      displayName: Test coverage
      inputs:
        workingDirectory: '$(Build.SourcesDirectory)/$(Build.Repository.Name)'
        targetType: 'inline'
        script: |
          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml" || true

    - task: SonarCloudAnalyze@3

    - task: SonarCloudPublish@3

- stage: staging
  displayName: Build and Deploy Staging
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: staging
    displayName: Build and Deploy Staging
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    - checkout: Core
    - checkout: FinancialData
    - checkout: Orchestrator
    - checkout: Audit
    - checkout: Batchs
    - checkout: PythonApp
    - checkout: Calculs
    - checkout: Business

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        buildContext: '$(Build.SourcesDirectory)'
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: KubeloginInstaller@0
      inputs:
        kubeloginVersion: 'latest'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'azureResourceManager'
        azureSubscriptionConnection: 'hillmstage-cicd'
        azureResourceGroup: 'rg-hillm-stage'
        kubernetesCluster: 'aks-hillm-stage'
        namespace: 'hillm-stage'
        manifests: '$(Build.SourcesDirectory)/$(Build.Repository.Name)/infra/k8s/deployment-mindapi-stage.yaml'
        containers: |
          $(containerRegistry)/$(imageRepository):$(tag)
